{"version":3,"sources":["../../aj-framework-cli/node_modules/browser-pack/_prelude.js","../../aj-framework-cli/node_modules/browserify/lib/_empty.js","../../aj-framework-cli/node_modules/vm-browserify/index.js","app/js/app/js/actions/account.js","app/js/app/js/actions/entities.js","app/js/app/js/actions/menu.jsx","app/js/app/js/actions/session.js","app/js/app/js/actions/system.js","app/js/app/js/actions/types.js","app/js/app/js/actions/ui.js","app/js/app/js/aj/assert.js","app/js/app/js/aj/base64.js","app/js/app/js/aj/events.js","app/js/app/js/aj/http.js","app/js/app/js/aj/index.js","app/js/app/js/aj/path.js","app/js/app/js/aj/storage.js","app/js/app/js/api/account.js","app/js/app/js/api/entities.js","app/js/app/js/api/grids.js","app/js/app/js/api/query.js","app/js/app/js/api/responses.js","app/js/app/js/api/session.js","app/js/app/js/api/system.js","app/js/app/js/api/utils.js","app/js/app/js/api/values.js","app/js/app/js/app.js","app/js/app/js/config.js","app/js/app/js/framework/config.js","app/js/app/js/framework/preferences.js","app/js/app/js/libs/validator.js","app/js/app/js/model/menu.js","app/js/app/js/node_modules/@babel/polyfill/lib/index.js","app/js/app/js/node_modules/@babel/polyfill/lib/noConflict.js","app/js/app/js/node_modules/core-js/es6/index.js","app/js/app/js/node_modules/core-js/fn/array/flat-map.js","app/js/app/js/node_modules/core-js/fn/array/includes.js","app/js/app/js/node_modules/core-js/fn/object/entries.js","app/js/app/js/node_modules/core-js/fn/object/get-own-property-descriptors.js","app/js/app/js/node_modules/core-js/fn/object/values.js","app/js/app/js/node_modules/core-js/fn/promise/finally.js","app/js/app/js/node_modules/core-js/fn/string/pad-end.js","app/js/app/js/node_modules/core-js/fn/string/pad-start.js","app/js/app/js/node_modules/core-js/fn/string/trim-end.js","app/js/app/js/node_modules/core-js/fn/string/trim-start.js","app/js/app/js/node_modules/core-js/fn/symbol/async-iterator.js","app/js/app/js/node_modules/core-js/library/fn/global.js","app/js/app/js/node_modules/core-js/library/modules/_a-function.js","app/js/app/js/node_modules/core-js/library/modules/_an-object.js","app/js/app/js/node_modules/core-js/library/modules/_core.js","app/js/app/js/node_modules/core-js/library/modules/_ctx.js","app/js/app/js/node_modules/core-js/library/modules/_descriptors.js","app/js/app/js/node_modules/core-js/library/modules/_dom-create.js","app/js/app/js/node_modules/core-js/library/modules/_export.js","app/js/app/js/node_modules/core-js/library/modules/_fails.js","app/js/app/js/node_modules/core-js/library/modules/_global.js","app/js/app/js/node_modules/core-js/library/modules/_has.js","app/js/app/js/node_modules/core-js/library/modules/_hide.js","app/js/app/js/node_modules/core-js/library/modules/_ie8-dom-define.js","app/js/app/js/node_modules/core-js/library/modules/_is-object.js","app/js/app/js/node_modules/core-js/library/modules/_object-dp.js","app/js/app/js/node_modules/core-js/library/modules/_property-desc.js","app/js/app/js/node_modules/core-js/library/modules/_to-primitive.js","app/js/app/js/node_modules/core-js/library/modules/es7.global.js","app/js/app/js/node_modules/core-js/modules/_a-number-value.js","app/js/app/js/node_modules/core-js/modules/_add-to-unscopables.js","app/js/app/js/node_modules/core-js/modules/_advance-string-index.js","app/js/app/js/node_modules/core-js/modules/_an-instance.js","app/js/app/js/node_modules/core-js/modules/_array-copy-within.js","app/js/app/js/node_modules/core-js/modules/_array-fill.js","app/js/app/js/node_modules/core-js/modules/_array-includes.js","app/js/app/js/node_modules/core-js/modules/_array-methods.js","app/js/app/js/node_modules/core-js/modules/_array-reduce.js","app/js/app/js/node_modules/core-js/modules/_array-species-constructor.js","app/js/app/js/node_modules/core-js/modules/_array-species-create.js","app/js/app/js/node_modules/core-js/modules/_bind.js","app/js/app/js/node_modules/core-js/modules/_classof.js","app/js/app/js/node_modules/core-js/modules/_cof.js","app/js/app/js/node_modules/core-js/modules/_collection-strong.js","app/js/app/js/node_modules/core-js/modules/_collection-weak.js","app/js/app/js/node_modules/core-js/modules/_collection.js","app/js/app/js/node_modules/core-js/modules/_create-property.js","app/js/app/js/node_modules/core-js/modules/_date-to-iso-string.js","app/js/app/js/node_modules/core-js/modules/_date-to-primitive.js","app/js/app/js/node_modules/core-js/modules/_defined.js","app/js/app/js/node_modules/core-js/modules/_enum-bug-keys.js","app/js/app/js/node_modules/core-js/modules/_enum-keys.js","app/js/app/js/node_modules/core-js/modules/_export.js","app/js/app/js/node_modules/core-js/modules/_fails-is-regexp.js","app/js/app/js/node_modules/core-js/modules/_fix-re-wks.js","app/js/app/js/node_modules/core-js/modules/_flags.js","app/js/app/js/node_modules/core-js/modules/_flatten-into-array.js","app/js/app/js/node_modules/core-js/modules/_for-of.js","app/js/app/js/node_modules/core-js/modules/_function-to-string.js","app/js/app/js/node_modules/core-js/modules/_html.js","app/js/app/js/node_modules/core-js/modules/_inherit-if-required.js","app/js/app/js/node_modules/core-js/modules/_invoke.js","app/js/app/js/node_modules/core-js/modules/_iobject.js","app/js/app/js/node_modules/core-js/modules/_is-array-iter.js","app/js/app/js/node_modules/core-js/modules/_is-array.js","app/js/app/js/node_modules/core-js/modules/_is-integer.js","app/js/app/js/node_modules/core-js/modules/_is-regexp.js","app/js/app/js/node_modules/core-js/modules/_iter-call.js","app/js/app/js/node_modules/core-js/modules/_iter-create.js","app/js/app/js/node_modules/core-js/modules/_iter-define.js","app/js/app/js/node_modules/core-js/modules/_iter-detect.js","app/js/app/js/node_modules/core-js/modules/_iter-step.js","app/js/app/js/node_modules/core-js/modules/_iterators.js","app/js/app/js/node_modules/core-js/modules/_library.js","app/js/app/js/node_modules/core-js/modules/_math-expm1.js","app/js/app/js/node_modules/core-js/modules/_math-fround.js","app/js/app/js/node_modules/core-js/modules/_math-log1p.js","app/js/app/js/node_modules/core-js/modules/_math-sign.js","app/js/app/js/node_modules/core-js/modules/_meta.js","app/js/app/js/node_modules/core-js/modules/_microtask.js","app/js/app/js/node_modules/core-js/modules/_new-promise-capability.js","app/js/app/js/node_modules/core-js/modules/_object-assign.js","app/js/app/js/node_modules/core-js/modules/_object-create.js","app/js/app/js/node_modules/core-js/modules/_object-dps.js","app/js/app/js/node_modules/core-js/modules/_object-gopd.js","app/js/app/js/node_modules/core-js/modules/_object-gopn-ext.js","app/js/app/js/node_modules/core-js/modules/_object-gopn.js","app/js/app/js/node_modules/core-js/modules/_object-gops.js","app/js/app/js/node_modules/core-js/modules/_object-gpo.js","app/js/app/js/node_modules/core-js/modules/_object-keys-internal.js","app/js/app/js/node_modules/core-js/modules/_object-keys.js","app/js/app/js/node_modules/core-js/modules/_object-pie.js","app/js/app/js/node_modules/core-js/modules/_object-sap.js","app/js/app/js/node_modules/core-js/modules/_object-to-array.js","app/js/app/js/node_modules/core-js/modules/_own-keys.js","app/js/app/js/node_modules/core-js/modules/_parse-float.js","app/js/app/js/node_modules/core-js/modules/_parse-int.js","app/js/app/js/node_modules/core-js/modules/_perform.js","app/js/app/js/node_modules/core-js/modules/_promise-resolve.js","app/js/app/js/node_modules/core-js/modules/_redefine-all.js","app/js/app/js/node_modules/core-js/modules/_redefine.js","app/js/app/js/node_modules/core-js/modules/_regexp-exec-abstract.js","app/js/app/js/node_modules/core-js/modules/_regexp-exec.js","app/js/app/js/node_modules/core-js/modules/_same-value.js","app/js/app/js/node_modules/core-js/modules/_set-proto.js","app/js/app/js/node_modules/core-js/modules/_set-species.js","app/js/app/js/node_modules/core-js/modules/_set-to-string-tag.js","app/js/app/js/node_modules/core-js/modules/_shared-key.js","app/js/app/js/node_modules/core-js/modules/_shared.js","app/js/app/js/node_modules/core-js/modules/_species-constructor.js","app/js/app/js/node_modules/core-js/modules/_strict-method.js","app/js/app/js/node_modules/core-js/modules/_string-at.js","app/js/app/js/node_modules/core-js/modules/_string-context.js","app/js/app/js/node_modules/core-js/modules/_string-html.js","app/js/app/js/node_modules/core-js/modules/_string-pad.js","app/js/app/js/node_modules/core-js/modules/_string-repeat.js","app/js/app/js/node_modules/core-js/modules/_string-trim.js","app/js/app/js/node_modules/core-js/modules/_string-ws.js","app/js/app/js/node_modules/core-js/modules/_task.js","app/js/app/js/node_modules/core-js/modules/_to-absolute-index.js","app/js/app/js/node_modules/core-js/modules/_to-index.js","app/js/app/js/node_modules/core-js/modules/_to-integer.js","app/js/app/js/node_modules/core-js/modules/_to-iobject.js","app/js/app/js/node_modules/core-js/modules/_to-length.js","app/js/app/js/node_modules/core-js/modules/_to-object.js","app/js/app/js/node_modules/core-js/modules/_typed-array.js","app/js/app/js/node_modules/core-js/modules/_typed-buffer.js","app/js/app/js/node_modules/core-js/modules/_typed.js","app/js/app/js/node_modules/core-js/modules/_uid.js","app/js/app/js/node_modules/core-js/modules/_user-agent.js","app/js/app/js/node_modules/core-js/modules/_validate-collection.js","app/js/app/js/node_modules/core-js/modules/_wks-define.js","app/js/app/js/node_modules/core-js/modules/_wks-ext.js","app/js/app/js/node_modules/core-js/modules/_wks.js","app/js/app/js/node_modules/core-js/modules/core.get-iterator-method.js","app/js/app/js/node_modules/core-js/modules/es6.array.copy-within.js","app/js/app/js/node_modules/core-js/modules/es6.array.every.js","app/js/app/js/node_modules/core-js/modules/es6.array.fill.js","app/js/app/js/node_modules/core-js/modules/es6.array.filter.js","app/js/app/js/node_modules/core-js/modules/es6.array.find-index.js","app/js/app/js/node_modules/core-js/modules/es6.array.find.js","app/js/app/js/node_modules/core-js/modules/es6.array.for-each.js","app/js/app/js/node_modules/core-js/modules/es6.array.from.js","app/js/app/js/node_modules/core-js/modules/es6.array.index-of.js","app/js/app/js/node_modules/core-js/modules/es6.array.is-array.js","app/js/app/js/node_modules/core-js/modules/es6.array.iterator.js","app/js/app/js/node_modules/core-js/modules/es6.array.join.js","app/js/app/js/node_modules/core-js/modules/es6.array.last-index-of.js","app/js/app/js/node_modules/core-js/modules/es6.array.map.js","app/js/app/js/node_modules/core-js/modules/es6.array.of.js","app/js/app/js/node_modules/core-js/modules/es6.array.reduce-right.js","app/js/app/js/node_modules/core-js/modules/es6.array.reduce.js","app/js/app/js/node_modules/core-js/modules/es6.array.slice.js","app/js/app/js/node_modules/core-js/modules/es6.array.some.js","app/js/app/js/node_modules/core-js/modules/es6.array.sort.js","app/js/app/js/node_modules/core-js/modules/es6.array.species.js","app/js/app/js/node_modules/core-js/modules/es6.date.now.js","app/js/app/js/node_modules/core-js/modules/es6.date.to-iso-string.js","app/js/app/js/node_modules/core-js/modules/es6.date.to-json.js","app/js/app/js/node_modules/core-js/modules/es6.date.to-primitive.js","app/js/app/js/node_modules/core-js/modules/es6.date.to-string.js","app/js/app/js/node_modules/core-js/modules/es6.function.bind.js","app/js/app/js/node_modules/core-js/modules/es6.function.has-instance.js","app/js/app/js/node_modules/core-js/modules/es6.function.name.js","app/js/app/js/node_modules/core-js/modules/es6.map.js","app/js/app/js/node_modules/core-js/modules/es6.math.acosh.js","app/js/app/js/node_modules/core-js/modules/es6.math.asinh.js","app/js/app/js/node_modules/core-js/modules/es6.math.atanh.js","app/js/app/js/node_modules/core-js/modules/es6.math.cbrt.js","app/js/app/js/node_modules/core-js/modules/es6.math.clz32.js","app/js/app/js/node_modules/core-js/modules/es6.math.cosh.js","app/js/app/js/node_modules/core-js/modules/es6.math.expm1.js","app/js/app/js/node_modules/core-js/modules/es6.math.fround.js","app/js/app/js/node_modules/core-js/modules/es6.math.hypot.js","app/js/app/js/node_modules/core-js/modules/es6.math.imul.js","app/js/app/js/node_modules/core-js/modules/es6.math.log10.js","app/js/app/js/node_modules/core-js/modules/es6.math.log1p.js","app/js/app/js/node_modules/core-js/modules/es6.math.log2.js","app/js/app/js/node_modules/core-js/modules/es6.math.sign.js","app/js/app/js/node_modules/core-js/modules/es6.math.sinh.js","app/js/app/js/node_modules/core-js/modules/es6.math.tanh.js","app/js/app/js/node_modules/core-js/modules/es6.math.trunc.js","app/js/app/js/node_modules/core-js/modules/es6.number.constructor.js","app/js/app/js/node_modules/core-js/modules/es6.number.epsilon.js","app/js/app/js/node_modules/core-js/modules/es6.number.is-finite.js","app/js/app/js/node_modules/core-js/modules/es6.number.is-integer.js","app/js/app/js/node_modules/core-js/modules/es6.number.is-nan.js","app/js/app/js/node_modules/core-js/modules/es6.number.is-safe-integer.js","app/js/app/js/node_modules/core-js/modules/es6.number.max-safe-integer.js","app/js/app/js/node_modules/core-js/modules/es6.number.min-safe-integer.js","app/js/app/js/node_modules/core-js/modules/es6.number.parse-float.js","app/js/app/js/node_modules/core-js/modules/es6.number.parse-int.js","app/js/app/js/node_modules/core-js/modules/es6.number.to-fixed.js","app/js/app/js/node_modules/core-js/modules/es6.number.to-precision.js","app/js/app/js/node_modules/core-js/modules/es6.object.assign.js","app/js/app/js/node_modules/core-js/modules/es6.object.create.js","app/js/app/js/node_modules/core-js/modules/es6.object.define-properties.js","app/js/app/js/node_modules/core-js/modules/es6.object.define-property.js","app/js/app/js/node_modules/core-js/modules/es6.object.freeze.js","app/js/app/js/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","app/js/app/js/node_modules/core-js/modules/es6.object.get-own-property-names.js","app/js/app/js/node_modules/core-js/modules/es6.object.get-prototype-of.js","app/js/app/js/node_modules/core-js/modules/es6.object.is-extensible.js","app/js/app/js/node_modules/core-js/modules/es6.object.is-frozen.js","app/js/app/js/node_modules/core-js/modules/es6.object.is-sealed.js","app/js/app/js/node_modules/core-js/modules/es6.object.is.js","app/js/app/js/node_modules/core-js/modules/es6.object.keys.js","app/js/app/js/node_modules/core-js/modules/es6.object.prevent-extensions.js","app/js/app/js/node_modules/core-js/modules/es6.object.seal.js","app/js/app/js/node_modules/core-js/modules/es6.object.set-prototype-of.js","app/js/app/js/node_modules/core-js/modules/es6.object.to-string.js","app/js/app/js/node_modules/core-js/modules/es6.parse-float.js","app/js/app/js/node_modules/core-js/modules/es6.parse-int.js","app/js/app/js/node_modules/core-js/modules/es6.promise.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.apply.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.construct.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.define-property.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.delete-property.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.enumerate.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.get-prototype-of.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.get.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.has.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.is-extensible.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.own-keys.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.prevent-extensions.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.set-prototype-of.js","app/js/app/js/node_modules/core-js/modules/es6.reflect.set.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.constructor.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.exec.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.flags.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.match.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.replace.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.search.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.split.js","app/js/app/js/node_modules/core-js/modules/es6.regexp.to-string.js","app/js/app/js/node_modules/core-js/modules/es6.set.js","app/js/app/js/node_modules/core-js/modules/es6.string.anchor.js","app/js/app/js/node_modules/core-js/modules/es6.string.big.js","app/js/app/js/node_modules/core-js/modules/es6.string.blink.js","app/js/app/js/node_modules/core-js/modules/es6.string.bold.js","app/js/app/js/node_modules/core-js/modules/es6.string.code-point-at.js","app/js/app/js/node_modules/core-js/modules/es6.string.ends-with.js","app/js/app/js/node_modules/core-js/modules/es6.string.fixed.js","app/js/app/js/node_modules/core-js/modules/es6.string.fontcolor.js","app/js/app/js/node_modules/core-js/modules/es6.string.fontsize.js","app/js/app/js/node_modules/core-js/modules/es6.string.from-code-point.js","app/js/app/js/node_modules/core-js/modules/es6.string.includes.js","app/js/app/js/node_modules/core-js/modules/es6.string.italics.js","app/js/app/js/node_modules/core-js/modules/es6.string.iterator.js","app/js/app/js/node_modules/core-js/modules/es6.string.link.js","app/js/app/js/node_modules/core-js/modules/es6.string.raw.js","app/js/app/js/node_modules/core-js/modules/es6.string.repeat.js","app/js/app/js/node_modules/core-js/modules/es6.string.small.js","app/js/app/js/node_modules/core-js/modules/es6.string.starts-with.js","app/js/app/js/node_modules/core-js/modules/es6.string.strike.js","app/js/app/js/node_modules/core-js/modules/es6.string.sub.js","app/js/app/js/node_modules/core-js/modules/es6.string.sup.js","app/js/app/js/node_modules/core-js/modules/es6.string.trim.js","app/js/app/js/node_modules/core-js/modules/es6.symbol.js","app/js/app/js/node_modules/core-js/modules/es6.typed.array-buffer.js","app/js/app/js/node_modules/core-js/modules/es6.typed.data-view.js","app/js/app/js/node_modules/core-js/modules/es6.typed.float32-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.float64-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.int16-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.int32-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.int8-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.uint16-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.uint32-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.uint8-array.js","app/js/app/js/node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","app/js/app/js/node_modules/core-js/modules/es6.weak-map.js","app/js/app/js/node_modules/core-js/modules/es6.weak-set.js","app/js/app/js/node_modules/core-js/modules/es7.array.flat-map.js","app/js/app/js/node_modules/core-js/modules/es7.array.includes.js","app/js/app/js/node_modules/core-js/modules/es7.object.entries.js","app/js/app/js/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","app/js/app/js/node_modules/core-js/modules/es7.object.values.js","app/js/app/js/node_modules/core-js/modules/es7.promise.finally.js","app/js/app/js/node_modules/core-js/modules/es7.string.pad-end.js","app/js/app/js/node_modules/core-js/modules/es7.string.pad-start.js","app/js/app/js/node_modules/core-js/modules/es7.string.trim-left.js","app/js/app/js/node_modules/core-js/modules/es7.string.trim-right.js","app/js/app/js/node_modules/core-js/modules/es7.symbol.async-iterator.js","app/js/app/js/node_modules/core-js/modules/web.dom.iterable.js","app/js/app/js/node_modules/core-js/modules/web.immediate.js","app/js/app/js/node_modules/core-js/modules/web.timers.js","app/js/app/js/node_modules/core-js/web/index.js","app/js/app/js/node_modules/regenerator-runtime/runtime.js","app/js/app/js/node_modules/underscore/underscore.js","app/js/app/js/plugins.js","app/js/app/js/stores/account.js","app/js/app/js/stores/entities.js","app/js/app/js/stores/menu.js","app/js/app/js/stores/passwordRecovery.js","app/js/app/js/stores/session.js","app/js/app/js/stores/system.js","app/js/app/js/stores/types.js","app/js/app/js/stores/ui.js","app/js/app/js/strings.js","app/js/app/js/utils/ajex.js","app/js/app/js/utils/datasource.js","app/js/app/js/utils/lang.js","app/js/app/js/web/components/common.jsx","app/js/app/js/web/components/containers.jsx","app/js/app/js/web/components/forms.jsx","app/js/app/js/web/components/grids.jsx","app/js/app/js/web/components/layout.jsx","app/js/app/js/web/components/loader.jsx","app/js/app/js/web/components/secure.jsx","app/js/app/js/web/entities.jsx","app/js/app/js/web/main.jsx","app/js/app/js/web/pluginsimpl.jsx","app/js/app/js/web/screens/changePassword.jsx","app/js/app/js/web/screens/confirm.jsx","app/js/app/js/web/screens/entities/abstractEntitiesGrid.jsx","app/js/app/js/web/screens/entities/entitiesGrid.jsx","app/js/app/js/web/screens/entities/entityForm.jsx","app/js/app/js/web/screens/entities/index.jsx","app/js/app/js/web/screens/entities/revisionsGrid.jsx","app/js/app/js/web/screens/home.jsx","app/js/app/js/web/screens/login.jsx","app/js/app/js/web/screens/recover.jsx","app/js/app/js/web/screens/register.jsx","app/js/app/js/web/screens/registrationOk.jsx","app/js/app/js/web/utils/aj.jsx","app/js/app/js/web/utils/events.jsx","app/js/app/js/web/utils/forms.jsx","app/js/app/js/web/utils/inputfile.jsx","app/js/app/js/web/utils/keyboard.js","app/js/app/js/web/utils/mobile.jsx","app/js/app/js/web/utils/ui.jsx"],"names":[],"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ACA;AACA;AACA;AACA;AACA;AACA;;ACppBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;;;;;;;;ACDA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChepRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxttIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"../../../app/js/app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",null,"var indexOf = function (xs, item) {\n    if (xs.indexOf) return xs.indexOf(item);\n    else for (var i = 0; i < xs.length; i++) {\n        if (xs[i] === item) return i;\n    }\n    return -1;\n};\nvar Object_keys = function (obj) {\n    if (Object.keys) return Object.keys(obj)\n    else {\n        var res = [];\n        for (var key in obj) res.push(key)\n        return res;\n    }\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nvar defineProp = (function() {\n    try {\n        Object.defineProperty({}, '_', {});\n        return function(obj, name, value) {\n            Object.defineProperty(obj, name, {\n                writable: true,\n                enumerable: false,\n                configurable: true,\n                value: value\n            })\n        };\n    } catch(e) {\n        return function(obj, name, value) {\n            obj[name] = value;\n        };\n    }\n}());\n\nvar globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];\n\nfunction Context() {}\nContext.prototype = {};\n\nvar Script = exports.Script = function NodeScript (code) {\n    if (!(this instanceof Script)) return new Script(code);\n    this.code = code;\n};\n\nScript.prototype.runInContext = function (context) {\n    if (!(context instanceof Context)) {\n        throw new TypeError(\"needs a 'context' argument.\");\n    }\n    \n    var iframe = document.createElement('iframe');\n    if (!iframe.style) iframe.style = {};\n    iframe.style.display = 'none';\n    \n    document.body.appendChild(iframe);\n    \n    var win = iframe.contentWindow;\n    var wEval = win.eval, wExecScript = win.execScript;\n\n    if (!wEval && wExecScript) {\n        // win.eval() magically appears when this is called in IE:\n        wExecScript.call(win, 'null');\n        wEval = win.eval;\n    }\n    \n    forEach(Object_keys(context), function (key) {\n        win[key] = context[key];\n    });\n    forEach(globals, function (key) {\n        if (context[key]) {\n            win[key] = context[key];\n        }\n    });\n    \n    var winKeys = Object_keys(win);\n\n    var res = wEval.call(win, this.code);\n    \n    forEach(Object_keys(win), function (key) {\n        // Avoid copying circular objects like `top` and `window` by only\n        // updating existing context properties or new properties in the `win`\n        // that was only introduced after the eval.\n        if (key in context || indexOf(winKeys, key) === -1) {\n            context[key] = win[key];\n        }\n    });\n\n    forEach(globals, function (key) {\n        if (!(key in context)) {\n            defineProp(context, key, win[key]);\n        }\n    });\n    \n    document.body.removeChild(iframe);\n    \n    return res;\n};\n\nScript.prototype.runInThisContext = function () {\n    return eval(this.code); // maybe...\n};\n\nScript.prototype.runInNewContext = function (context) {\n    var ctx = Script.createContext(context);\n    var res = this.runInContext(ctx);\n\n    if (context) {\n        forEach(Object_keys(ctx), function (key) {\n            context[key] = ctx[key];\n        });\n    }\n\n    return res;\n};\n\nforEach(Object_keys(Script.prototype), function (name) {\n    exports[name] = Script[name] = function (code) {\n        var s = Script(code);\n        return s[name].apply(s, [].slice.call(arguments, 1));\n    };\n});\n\nexports.isContext = function (context) {\n    return context instanceof Context;\n};\n\nexports.createScript = function (code) {\n    return exports.Script(code);\n};\n\nexports.createContext = Script.createContext = function (context) {\n    var copy = new Context();\n    if(typeof context === 'object') {\n        forEach(Object_keys(context), function (key) {\n            copy[key] = context[key];\n        });\n    }\n    return copy;\n};\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {createAsyncAction} from \"../utils/ajex\";\nimport * as SessionApi from \"../api/session\";\nimport * as AccountApi from \"../api/account\";\nimport * as responses from \"../api/responses\";\nimport {alert, hideLoader, showLoader, toast} from \"../plugins\";\nimport {format} from \"../utils/lang\";\nimport M from \"../strings\";\nimport _ from \"underscore\";\nimport {\n    CHANGE_PASSWORD,\n    CONFIRM_ACCOUNT,\n    RECOVER_ACCOUNT,\n    REGISTER,\n    REQUEST_RECOVERY_CODE,\n    RESET_PASSWORD,\n    RESET_USER_PASSWORD,\n    SET_ACTIVATION_CODE,\n    VALIDATE_RECOVERY_CODE\n} from \"./types\";\n\nexport const register = createAsyncAction(REGISTER, data => {\n    if (_.isEmpty(data.name) || _.isEmpty(data.mail) || _.isEmpty(data.password)) {\n        alert(M(\"problemOccoured\"), M(\"nameMailAndPasswordRequired\"), \"warning\")\n        return;\n    }\n\n    aj.dispatch({\n        type: REGISTER\n    })\n\n    showLoader(M(\"registering\"))\n    AccountApi.register(data.name, data.mail, data.password)\n        .then(() => {\n            hideLoader()\n\n            let message = format(M(\"welcomeMessage\"), data.name, data.mail)\n            register.complete({name: data.name, mail: data.mail, message})\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            register.fail()\n        })\n});\n\nexport const recoverAccount = createAsyncAction(RECOVER_ACCOUNT, data => {\n    if (_.isEmpty(data.mail)) {\n        alert(M(\"problemOccoured\"), M(\"mailRequired\"), \"warning\")\n        return;\n    }\n\n    aj.dispatch({\n        type: RECOVER_ACCOUNT,\n    })\n\n    showLoader()\n    AccountApi.recover(data.mail)\n        .then(() => {\n            hideLoader()\n            alert(M(\"congratulations\"), format(M(\"accountRecovered\"), data.mail))\n\n            recoverAccount.complete()\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            recoverAccount.fail()\n        })\n})\n\nexport const setActivationCode = aj.createAction(SET_ACTIVATION_CODE, data => {\n    aj.dispatch({\n        type: SET_ACTIVATION_CODE,\n        activationCode: data.activationCode\n    })\n})\n\nexport const confirmAccount = createAsyncAction(CONFIRM_ACCOUNT, data => {\n    if (_.isEmpty(data.activationCode)) {\n        alert(M(\"problemOccoured\"), M(\"activationCodeRequired\"), \"warning\")\n        return;\n    }\n\n    aj.dispatch({\n        type: CONFIRM_ACCOUNT,\n    })\n\n    showLoader()\n    AccountApi.confirm(data.activationCode)\n        .then(() => {\n            hideLoader()\n            alert(M(\"congratulations\"), M(\"accountConfirmed\"))\n\n            confirmAccount.complete()\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            confirmAccount.fail()\n        })\n})\n\n\nexport const requestRecoveryCode = createAsyncAction(REQUEST_RECOVERY_CODE, data => {\n    if (_.isEmpty(data.mail)) {\n        alert(M(\"problemOccoured\"), M(\"mailRequired\"), \"warning\")\n        return;\n    }\n    showLoader()\n    AccountApi.requestRecoveryCode(data.mail)\n        .then(resp => {\n            hideLoader()\n            alert(M(\"congratulations\"), format(M(\"recoveryCodeSent\"), data.mail))\n\n            requestRecoveryCode.complete({\n                mail: data.mail\n            })\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            requestRecoveryCode.fail()\n        })\n})\n\nexport const validateRecoveryCode = createAsyncAction(VALIDATE_RECOVERY_CODE, data => {\n    if (_.isEmpty(data.mail)) {\n        alert(M(\"problemOccoured\"), M(\"mailRequired\"), \"warning\")\n        return;\n    }\n    if (_.isNull(data.code) || _.isUndefined(data.code) || data.code.length === 0) {\n        alert(M(\"problemOccoured\"), M(\"validationCodeRequired\"), \"warning\");\n        return;\n    }\n    let codeSize = 5;\n    if (data.code.length !== codeSize) {\n        alert(M(\"problemOccoured\"), format(M(\"validationCodeLengthMismatch\"),codeSize), \"warning\");\n        return;\n    }\n    showLoader();\n    AccountApi.validateRecoveryCode(data.mail,data.code)\n        .then(resp => {\n            hideLoader();\n            validateRecoveryCode.complete({\n                mail: data.mail,\n                code: data.code,\n            });\n        })\n        .catch(e => {\n            hideLoader();\n            alert(M(\"ooops\"), responses.msg(e), \"error\");\n\n            validateRecoveryCode.fail();\n        });\n})\n\nexport const resetPassword = createAsyncAction(RESET_PASSWORD, data => {\n    if (_.isEmpty(data.mail)) {\n        alert(M(\"problemOccoured\"), M(\"mailRequired\"), \"warning\")\n        return;\n    }\n    if (_.isNull(data.code) || _.isUndefined(data.code) || data.code.length === 0) {\n        alert(M(\"problemOccoured\"), M(\"validationCodeRequired\"), \"warning\");\n        return;\n    }\n    let codeSize = 5;\n    if (data.code.length !== codeSize) {\n        alert(M(\"problemOccoured\"), format(M(\"validationCodeLengthMismatch\"),codeSize), \"warning\");\n        return;\n    }\n    if (_.isEmpty(data.password) | _.isUndefined(data.password) | _.isNull(data.password)) {\n        alert(M(\"problemOccoured\"), M(\"passwordRequired\"), \"warning\")\n        return;\n    }\n    if (_.isEmpty(data.passwordConfirm) | _.isUndefined(data.passwordConfirm) | _.isNull(data.passwordConfirm)) {\n        alert(M(\"problemOccoured\"), M(\"passwordConfirmRequired\"), \"warning\")\n        return;\n    }\n    if (data.password !== data.passwordConfirm) {\n        alert(M(\"problemOccoured\"), M(\"passwordConfirmMismatch\"), \"warning\")\n        return;\n    }\n    showLoader();\n    AccountApi.resetPassword(data.mail, data.code, data.password, data.passwordConfirm)\n        .then(resp => {\n            hideLoader();\n            resetPassword.complete();\n        })\n        .catch(e => {\n            hideLoader();\n            alert(\"Attenzione!\", responses.msg(e));\n            resetPassword.fail();\n        });\n})\n\n\n\nexport const resetUserPassword = createAsyncAction(RESET_USER_PASSWORD, data => {\n\n    aj.dispatch({\n        type: RESET_USER_PASSWORD\n    });\n\n    showLoader();\n    AccountApi.resetUserPassword(data.id)\n        .then(response => {\n            hideLoader();\n            toast(M(\"passwordSuccessfulChanged\"));\n            resetUserPassword.complete()\n        })\n        .catch(e => {\n            hideLoader();\n            alert(\"Attenzione!\", responses.msg(e));\n            resetUserPassword.fail()\n        })\n});\n\nexport const changePassword = createAsyncAction(CHANGE_PASSWORD, data => {\n\n    aj.dispatch({\n        type: CHANGE_PASSWORD\n    });\n\n    showLoader();\n    AccountApi.changePassword(data.password, data.passwordConfirm)\n        .then(response => {\n            hideLoader();\n            SessionApi.updateUserPassword(data.password)\n            SessionApi.updateLoggedUser(response.value.user);\n            SessionApi.updateSessionToken(response.value.token);\n            toast(M(\"passwordSuccessfulChanged\"));\n            changePassword.complete({firstLogin: false, user: response.value.user})\n        })\n        .catch(e => {\n            hideLoader()\n            alert(\"Attenzione!\", responses.msg(e));\n            changePassword.fail({firstLogin: null})\n        })\n});\n","/** Entities **/\n\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {createAsyncAction} from \"../utils/ajex\";\nimport * as SessionApi from \"../api/session\";\nimport * as responses from \"../api/responses\";\nimport {alert, hideLoader, showLoader, toast} from \"../plugins\";\nimport M from \"../strings\";\nimport * as GridsApi from \"../api/grids\";\nimport * as EntitiesApi from \"../api/entities\";\nimport * as ValuesApi from \"../api/values\";\nimport _ from \"underscore\";\nimport {getUserCoverImage, getUserProfileImage} from \"./ui\"\n\n\nimport {\n    CHECK_REVISION_ENABLE_STATUS,\n    DELETE_ENTITIES,\n    FREE_ENTITIES,\n    FREE_LOOKUP,\n    FREE_SELECT,\n    FREE_SETTINGS_VALUES,\n    GET_ENTITY,\n    GET_GRID,\n    GET_LOOKUP_RESULT,\n    GET_LOOKUP_VALUES,\n    GET_SELECT_ENTITIES,\n    GET_SELECT_VALUES,\n    LOAD_ENTITIES,\n    NEW_ENTITY,\n    SAVE_ENTITY,\n    SET_MULTIVALUE_SETTINGS,\n    UPDATE_MULTIVALUE_SETTINGS\n} from \"./types\";\n\nexport const getGrid = createAsyncAction(GET_GRID, data => {\n    if (_.isEmpty(data.id)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyId\"))\n        return\n    }\n\n    aj.dispatch({\n        type: GET_GRID\n    })\n\n    showLoader()\n    GridsApi.getGrid(data.id)\n        .then(response => {\n            hideLoader()\n\n            getGrid.complete({grid: JSON.parse(response.value)})\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            getGrid.fail()\n        })\n})\n\n\nlet queries = {}\n\nexport const loadEntities = createAsyncAction(LOAD_ENTITIES, data => {\n    if (_.isEmpty(data.entity)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    showLoader()\n    aj.dispatch({\n        type: LOAD_ENTITIES,\n        discriminator: data.discriminator\n    })\n\n    let query = !_.isEmpty(data.query) ? data.query : null\n    queries[data.entity] = query\n\n    EntitiesApi.load(data.entity, query)\n        .then(response => {\n            hideLoader()\n            loadEntities.complete({result: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            loadEntities.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const deleteEntities = createAsyncAction(DELETE_ENTITIES, data => {\n    if (_.isEmpty(data.entity)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.ids)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyId\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    showLoader()\n    aj.dispatch({\n        type: DELETE_ENTITIES,\n        discriminator: data.discriminator\n    })\n\n    EntitiesApi.delete_(data.entity, data.ids)\n        .then(() => {\n            hideLoader()\n            deleteEntities.complete({discriminator: data.discriminator})\n\n            if (_.has(queries, data.entity)) {\n                loadEntities({discriminator: data.discriminator, entity: data.entity, query: queries[data.entity]})\n            }\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            deleteEntities.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const saveEntity = createAsyncAction(SAVE_ENTITY, data => {\n    if (_.isEmpty(data.entity)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.data)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyData\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    showLoader()\n    aj.dispatch({\n        type: SAVE_ENTITY,\n        discriminator: data.discriminator\n    })\n\n    EntitiesApi.save(data.entity, data.data)\n        .then(response => {\n            hideLoader()\n            toast(M(\"saveComplete\"))\n\n            saveEntity.complete({discriminator: data.discriminator, data: data.data})\n\n            if (data.reload) {\n                getEntity({discriminator: data.discriminator, entity: data.entity, id: response.value.id})\n            }\n\n            if (data.entity == \"user\") {\n                if (SessionApi.getLoggedUser() != null && SessionApi.getLoggedUser().id == data.data.id) {\n                    getUserProfileImage()\n                    getUserCoverImage()\n                }\n            }\n        })\n        .catch(r => {\n            hideLoader()\n\n            if (r.responseCode === responses.ERROR_VALIDATION) {\n                saveEntity.fail({discriminator: data.discriminator, data: data.data, validationError: true, validationResult: r.result})\n            } else {\n                alert(M(\"ooops\"), responses.msg(r.responseCode), \"error\")\n\n                saveEntity.fail({discriminator: data.discriminator, data: data.data, validationError: false, validationResult: null})\n            }\n        })\n});\n\nexport const newEntity = aj.createAction(NEW_ENTITY, data => {\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    aj.dispatch({\n        type: NEW_ENTITY,\n        discriminator: data.discriminator\n    })\n})\n\n\nexport const getEntity = createAsyncAction(GET_ENTITY, data => {\n    if (_.isEmpty(data.entity)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.id)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyId\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    showLoader()\n    aj.dispatch({\n        type: GET_ENTITY,\n        discriminator: data.discriminator\n    })\n\n    EntitiesApi.get(data.entity, data.id, data.params)\n        .then(response => {\n            hideLoader()\n            getEntity.complete({data: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            getEntity.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const freeEntities = aj.createAction(FREE_ENTITIES, data => {\n    aj.dispatch({\n        type: FREE_ENTITIES,\n        discriminator: data.discriminator\n    })\n})\n\n\n/**\n * LOOKUP ACTIONS\n */\n\nexport const getLookupResult = createAsyncAction(GET_LOOKUP_RESULT, data => {\n    if (_.isEmpty(data.entity)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    aj.dispatch({\n        type: GET_LOOKUP_RESULT,\n        discriminator: data.discriminator\n    })\n\n    EntitiesApi.load(data.entity, !_.isEmpty(data.query) ? data.query : null)\n        .then(response => {\n            getLookupResult.complete({result: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            getLookupResult.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const getLookupValues = createAsyncAction(GET_LOOKUP_VALUES, data => {\n    if (_.isEmpty(data.collection)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    aj.dispatch({\n        type: GET_LOOKUP_VALUES,\n        discriminator: data.discriminator\n    })\n\n    ValuesApi.load(data.collection, data.keyword, {page: data.page, rowsPerPage: data.rowsPerPage})\n\n        .then(response => {\n            getLookupValues.complete({values: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            getLookupValues.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const freeLookup = aj.createAction(FREE_LOOKUP, data => {\n    aj.dispatch({\n        type: FREE_LOOKUP,\n        discriminator: data.discriminator\n    })\n})\n\n\n/**\n * SELECT ACTIONS\n */\n\nexport const getSelectEntities = createAsyncAction(GET_SELECT_ENTITIES, data => {\n    if (_.isEmpty(data.entity)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    aj.dispatch({\n        type: GET_SELECT_ENTITIES,\n        discriminator: data.discriminator\n    })\n\n    ValuesApi.loadEntities(data.entity, data.query)\n        .then(response => {\n            getSelectEntities.complete({entities: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            getSelectEntities.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const getSelectValues = createAsyncAction(GET_SELECT_VALUES, data => {\n    if (_.isEmpty(data.collection)) {\n        alert(M(\"problemOccoured\"), M(\"pleaseSpecifyEntity\"))\n        return\n    }\n\n    if (_.isEmpty(data.discriminator)) {\n        throw new Error(\"Discriminator is required\")\n    }\n\n    aj.dispatch({\n        type: GET_SELECT_VALUES,\n        discriminator: data.discriminator\n    })\n\n    ValuesApi.load(data.collection, data.keyword)\n        .then(response => {\n            getSelectValues.complete({values: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            alert(M(\"ooops\"), responses.msg(e), \"error\")\n\n            getSelectValues.fail({discriminator: data.discriminator})\n        })\n})\n\nexport const freeSelect = aj.createAction(FREE_SELECT, data => {\n    aj.dispatch({\n        type: FREE_SELECT,\n        discriminator: data.discriminator\n    })\n})\n\n\nexport const setMultivalueSettings = aj.createAction(SET_MULTIVALUE_SETTINGS, data => {\n\n    aj.dispatch({\n        type: SET_MULTIVALUE_SETTINGS,\n        items: data.items,\n        discriminator: data.discriminator\n    })\n})\n\nexport const updateMultivalueSettings = aj.createAction(UPDATE_MULTIVALUE_SETTINGS, data => {\n\n    aj.dispatch({\n        type: UPDATE_MULTIVALUE_SETTINGS,\n        itemType: data.itemType,\n        enabled: data.enabled,\n        discriminator: data.discriminator\n    })\n})\n\nexport const freeSettingValues = aj.createAction(FREE_SETTINGS_VALUES, data => {\n    aj.dispatch({\n        type: FREE_SETTINGS_VALUES,\n        discriminator: data.discriminator\n    })\n})\n\n\nexport const checkRevisionEnableStatus =  createAsyncAction(CHECK_REVISION_ENABLE_STATUS, data => {\n\n    aj.dispatch({\n        type: CHECK_REVISION_ENABLE_STATUS,\n        discriminator: data.discriminator\n    })\n\n    EntitiesApi.checkRevisionEnableStatus(data.entity)\n        .then(response => {\n            checkRevisionEnableStatus.complete({revisionEnabled: response.value, discriminator: data.discriminator})\n        })\n        .catch(e => {\n            checkRevisionEnableStatus.fail({discriminator: data.discriminator})\n        })\n});\n\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {EXPAND_MENU_ITEM, SET_ACTIVE_MENU_ITEM} from \"./types\";\nimport menu from \"../model/menu\";\n\n\nexport const SETUP_MENU = \"SETUP_MENU\"\nexport const setupMenu = aj.createAction(SETUP_MENU, data => {\n    aj.dispatch({\n        type: SETUP_MENU,\n        user: data.user,\n        menu: menu\n    })\n})\n\n\nexport const setActiveMenuItem = aj.createAction(SET_ACTIVE_MENU_ITEM, data => {\n    aj.dispatch({\n        type: SET_ACTIVE_MENU_ITEM,\n        item: data.item\n    })\n})\n\nexport const expandMenuItem = aj.createAction(EXPAND_MENU_ITEM, data => {\n    aj.dispatch({\n        type: EXPAND_MENU_ITEM,\n        item: data.item\n    })\n})\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {createAsyncAction} from \"../utils/ajex\";\nimport * as SessionApi from \"../api/session\";\nimport {alert, hideLoader, showLoader, toast} from \"../plugins\";\nimport M from \"../strings\";\nimport _ from \"underscore\";\nimport {LOGIN, LOGOUT, RESUME_SESSION} from \"./types\";\nimport {getUserCoverImage, getUserProfileImage} from \"./ui\";\nimport {setupMenu} from \"./menu\";\n\nexport const login = createAsyncAction(LOGIN, data => {\n    if (_.isEmpty(data.mail) || _.isEmpty(data.password)) {\n        alert(M(\"problemOccoured\"), M(\"mailAndPasswordRequired\"), \"warning\")\n        return;\n    }\n\n    aj.dispatch({\n        type: LOGIN\n    })\n\n    showLoader()\n    SessionApi.start(data.mail, data.password)\n        .then(user => {\n            hideLoader()\n            toast(M(\"welcome\") + \" \" + user.name);\n\n            login.complete({user})\n            performLoginUserAction(user)\n\n        })\n        .catch(e => {\n            hideLoader()\n            alert(M(\"ooops\"), M(\"badLogin\"), \"error\")\n\n            login.fail()\n        })\n});\n\nfunction performLoginUserAction (user) {\n    if (user) {\n        setupMenu({user})\n    }\n    getUserProfileImage()\n    getUserCoverImage()\n}\n\nexport const resumeSession = createAsyncAction(RESUME_SESSION, data => {\n    aj.dispatch({\n        type: RESUME_SESSION\n    })\n\n    SessionApi.resume()\n        .then(user => {\n            hideLoader()\n            toast(M(\"welcome\") + \" \" + user.name);\n\n            resumeSession.complete({user})\n            performLoginUserAction(user)\n        })\n        .catch(e => {\n            hideLoader()\n\n            resumeSession.fail()\n        })\n});\n\nexport const logout = aj.createAction(LOGOUT, data => {\n    SessionApi.destroy()\n        .then(() => {\n            aj.dispatch({\n                type: LOGOUT\n            })\n        })\n});\n\n","\"use strict\"\n\nimport {SYSTEM_INFORMATIONS} from \"./types\";\nimport {createAsyncAction} from \"../utils/ajex\";\nimport * as SystemApi from \"../api/system\";\nimport * as config from \"../config\";\n\nexport const systemInformation = createAsyncAction(SYSTEM_INFORMATIONS, data => {\n\n    SystemApi.getSystemInfos()\n        .then(response => {\n            let systemInfos = {}\n            systemInfos.backendVersion = config.backendVersion\n            systemInfos.apiVersion = response.value.apiVersion\n            systemInfos.copyrightInfos = config.copyrightInfos\n            systemInformation.complete(systemInfos)\n        })\n        .catch(e => {\n        })\n\n});","\"use strict\"\n\nexport const LOGIN = \"LOGIN\";\nexport const RESUME_SESSION = \"RESUME_SESSION\"\nexport const LOGOUT = \"LOGOUT\";\nexport const REGISTER = \"REGISTER\";\nexport const RECOVER_ACCOUNT = \"RECOVER_ACCOUNT\"\nexport const REQUEST_RECOVERY_CODE = \"REQUEST_RECOVERY_CODE\"\nexport const RESET_PASSWORD = \"RESET_PASSWORD\"\nexport const VALIDATE_RECOVERY_CODE = \"VALIDATE_RECOVERY_CODE\"\nexport const SET_ACTIVATION_CODE = \"SET_ACTIVATION_CODE\"\nexport const CONFIRM_ACCOUNT = \"CONFIRM_ACCOUNT\"\n\nexport const GET_GRID = \"GET_GRID\"\nexport const LOAD_ENTITIES = \"LOAD_ENTITIES\"\nexport const DELETE_ENTITIES = \"DELETE_ENTITIES\"\nexport const SAVE_ENTITY = \"SAVE_ENTITY\"\nexport const NEW_ENTITY = \"NEW_ENTITY\"\nexport const GET_ENTITY = \"GET_ENTITY\"\nexport const FREE_ENTITIES = \"FREE_ENTITIES\"\nexport const GET_LOOKUP_RESULT = \"GET_LOOKUP_RESULT\"\nexport const GET_LOOKUP_VALUES = \"GET_LOOKUP_VALUES\"\nexport const FREE_LOOKUP = \"FREE_LOOKUP\"\nexport const GET_SELECT_ENTITIES = \"GET_SELECT_ENTITIES\"\nexport const GET_SELECT_VALUES = \"GET_SELECT_VALUES\"\nexport const FREE_SELECT = \"FREE_SELECT\"\n\nexport const SETUP_MENU = \"SETUP_MENU\"\nexport const SET_ACTIVE_MENU_ITEM = \"SET_ACTIVE_MENU_ITEM\"\nexport const EXPAND_MENU_ITEM = \"EXPAND_MENU_ITEM\"\n\nexport const GET_USER_COVER_IMAGE = \"GET_USER_COVER_IMAGE\"\nexport const GET_USER_PROFILE_IMAGE = \"GET_USER_PROFILE_IMAGE\"\n\nexport const RESET_USER_PASSWORD = \"RESET_USER_PASSWORD\";\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const FREE_SETTINGS_VALUES = \"FREE_SETTINGS_VALUES\";\nexport const UPDATE_MULTIVALUE_SETTINGS = \"UPDATE_MULTIVALUE_SETTINGS\";\nexport const SET_MULTIVALUE_SETTINGS = \"SET_MULTIVALUE_SETTINGS\";\nexport const CHECK_REVISION_ENABLE_STATUS = \"CHECK_REVISION_ENABLE_STATUS\";\n\nexport const SYSTEM_INFORMATIONS = \"SYSTEM_INFORMATIONS\";\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {createAsyncAction} from \"../utils/ajex\";\nimport * as SessionApi from \"../api/session\";\nimport * as AccountApi from \"../api/account\";\nimport {GET_USER_COVER_IMAGE, GET_USER_PROFILE_IMAGE} from \"./types\";\n\n\nexport const getUserCoverImage = createAsyncAction(GET_USER_COVER_IMAGE, data => {\n    let user = SessionApi.getLoggedUser()\n    if (user == null) {\n        return\n    }\n\n    aj.dispatch({\n        type: GET_USER_COVER_IMAGE\n    })\n\n    AccountApi.getCoverImage(user.id)\n        .then(data => {\n            getUserCoverImage.complete({data: data.value})\n        })\n        .catch(e => {\n            getUserCoverImage.fail({e})\n        })\n\n})\n\nexport const getUserProfileImage = createAsyncAction(GET_USER_PROFILE_IMAGE, data => {\n    let user = SessionApi.getLoggedUser()\n    if (user == null) {\n        return\n    }\n\n    aj.dispatch({\n        type: GET_USER_PROFILE_IMAGE\n    })\n\n    AccountApi.getProfileImage(user.id)\n        .then(data => {\n            getUserProfileImage.complete({data: data.value})\n        })\n        .catch(e => {\n            getUserProfileImage.fail({e})\n        })\n})","\"use strict\"\n\nconst _ = require(\"underscore\")\n\nexports.assertTrue = function(test, msg){\n    if (!test) {\n        throw \"Assertion failure: \" + msg || \"\";\n    }\n};\n\nexports.assertEquals = function(first, second, msg){\n    if (first != second) {\n        throw \"Assertion failure: \" + msg || \"\";\n    }\n};\n\nexports.assertNotNull = function(obj, msg){\n    if (obj == undefined || obj == null) {\n        throw \"Assertion failure: \" + msg || \"\";\n    }\n};\n\nexports.assertNotEmpty = function(obj, msg){\n    if (_.isEmpty(obj)) {\n        throw \"Assertion failure: \" + msg || \"\";\n    }\n};\n","'use strict';\nvar version = \"2.1.9\";\n// constants\nvar b64chars\n    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar b64tab = function (bin) {\n    var t = {};\n    for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n    return t;\n}(b64chars);\nvar fromCharCode = String.fromCharCode;\n// encoder stuff\nvar cb_utob = function (c) {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n        + fromCharCode(0x80 | (cc & 0x3f)))\n            : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n        + fromCharCode(0x80 | ((cc >>> 6) & 0x3f))\n        + fromCharCode(0x80 | ( cc & 0x3f)));\n    } else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n        + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n        + fromCharCode(0x80 | ((cc >>> 6) & 0x3f))\n        + fromCharCode(0x80 | ( cc & 0x3f)));\n    }\n};\nvar re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\nvar utob = function (u) {\n    return u.replace(re_utob, cb_utob);\n};\nvar cb_encode = function (ccc) {\n    var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt(ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n    return chars.join('');\n};\nvar btoa = function (b) {\n    return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n};\nvar _encode = function (u) {\n        return btoa(utob(u))\n};\nvar encode = function (u, urisafe) {\n    return !urisafe\n        ? _encode(String(u))\n        : _encode(String(u)).replace(/[+\\/]/g, function (m0) {\n        return m0 == '+' ? '-' : '_';\n    }).replace(/=/g, '');\n};\nvar encodeURI = function (u) {\n    return encode(u, true)\n};\n// decoder stuff\nvar re_btou = new RegExp([\n    '[\\xC0-\\xDF][\\x80-\\xBF]',\n    '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n    '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n].join('|'), 'g');\nvar cb_btou = function (cccc) {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                    | ((0x3f & cccc.charCodeAt(1)) << 12)\n                    | ((0x3f & cccc.charCodeAt(2)) << 6)\n                    | (0x3f & cccc.charCodeAt(3)),\n                offset = cp - 0x10000;\n            return (fromCharCode((offset >>> 10) + 0xD800)\n            + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1))\n            );\n    }\n};\nvar btou = function (b) {\n    return b.replace(re_btou, cb_btou);\n};\nvar cb_decode = function (cccc) {\n    var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)] : 0),\n        chars = [\n            fromCharCode(n >>> 16),\n            fromCharCode((n >>> 8) & 0xff),\n            fromCharCode(n & 0xff)\n        ];\n    chars.length -= [0, 0, 2, 1][padlen];\n    return chars.join('');\n};\nvar atob = function (a) {\n    return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n};\nvar _decode = function (a) {\n    return btou(atob(a))\n};\nvar decode = function (a) {\n    return _decode(\n        String(a).replace(/[-_]/g, function (m0) {\n                return m0 == '-' ? '+' : '/'\n            })\n            .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n    );\n};\n\n// export Base64\nmodule.exports = {\n    VERSION: version,\n    atob: atob,\n    btoa: btoa,\n    fromBase64: decode,\n    toBase64: encode,\n    utob: utob,\n    encode: encode,\n    encodeURI: encodeURI,\n    btou: btou,\n    decode: decode\n};","\"use strict\";\n\nexport const EventEmitter = {}\n\nEventEmitter.addListener = function(obj, evt, handler) {\n    let listeners = obj.$$events_listeners;\n    if(!listeners) {\n        listeners = {};\n        obj.$$events_listeners = listeners;\n    }\n\n    if(!listeners[evt]) {\n        listeners[evt] = [];\n    }\n\n    listeners[evt].push(handler);\n};\n\nEventEmitter.addCallback = function(obj, evt, handler) {\n    let callbacks = obj.$$events_callbacks;\n    if(!callbacks) {\n        callbacks = {};\n        obj.$$events_callbacks = callbacks;\n    }\n\n    if(!callbacks[evt]) {\n        callbacks[evt] = [];\n    }\n\n    callbacks[evt].push(handler);\n}\n\nEventEmitter.addListeners = function(obj, listeners) {\n    for(let key in listeners) {\n        EventEmitter.addListener(obj, key, listeners[key]);\n    }\n};\n\nEventEmitter.removeListener = function(obj, evt, listener) {\n    if (obj.$$events_listeners && obj.$$events_listeners[evt]) {\n        obj.$$events_listeners[evt] = obj.$$events_listeners[evt].filter(l => l != listener);\n    }\n};\n\nEventEmitter.on = function(obj, evt, handler) {\n    if(typeof(evt) === \"object\") {\n        EventEmitter.addListeners(obj, evt);\n    } else {\n        EventEmitter.addListener(obj, evt, handler);\n    }\n};\n\nEventEmitter.off = function(obj, evt, handler) {\n    EventEmitter.removeListener(obj, evt, handler);\n};\n\nEventEmitter.live = function(obj, evt) {\n    if(!obj.$$events_offs) obj.$$events_offs = {};\n    if(evt) {\n        obj.$$events_offs[evt] = false;\n    } else {\n        obj.$$events_off = false;\n    }\n};\n\nEventEmitter.die = function(obj, evt) {\n    if(!obj.$$events_offs) obj.$$events_offs = {};\n    if(evt) {\n        obj.$$events_offs[evt] = true;\n    } else {\n        obj.$$events_off = true;\n    }\n};\n\nEventEmitter.invoke = function(obj, evt) {\n    if(!obj.$$events_offs) obj.$$events_offs = {};\n    if(obj.$$events_off) return;\n    if(obj.$$events_offs[evt]) return;\n\n    let listeners = obj.$$events_listeners;\n    if(!listeners) {\n        listeners = {};\n        obj.$$events_listeners = listeners;\n    }\n\n    let handlers = listeners[evt];\n    if(handlers) {\n        let size = handlers.length;\n        for (let i = 0; i < size; i++) {\n            let h = handlers[i];\n            h.apply(obj, Array.prototype.slice.call(arguments, 2));\n        }\n    }\n\n    let callbacks = obj.$$events_callbacks;\n    if(!callbacks) {\n        callbacks = {};\n        obj.$$events_callbacks = callbacks;\n    }\n\n    let callbackHandlers = callbacks[evt];\n    if(callbackHandlers) {\n        let size = callbackHandlers.length;\n        for (let i = 0; i < size; i++) {\n            let h = callbackHandlers[i];\n            h.apply(obj, Array.prototype.slice.call(arguments, 2));\n        }\n    }\n\n    callbacks[evt] = []\n};\n\nexport class Observable {\n    on(evt, handler) {\n        EventEmitter.on(this, evt, handler);\n    }\n\n    once(evt, handler) {\n        EventEmitter.addCallback(this, evt, handler)\n    }\n\n    off(evt, handler) {\n        EventEmitter.off(this, evt, handler);\n    }\n\n    invoke(evt) {\n        EventEmitter.invoke.apply(null, [this, evt].concat(Array.prototype.slice.call(arguments, 1)));\n    }\n}\n\n","\"use strict\";\n\nconst assert = require(\"./assert\");\nconst _ = require(\"underscore\");\n\nfunction buildQueryString(obj) {\n    var q = \"\";\n    var first = true;\n    for (var k in obj) {\n        var sep = first ? \"\" : \"&\";\n        q += sep + k + \"=\" + encodeURIComponent(obj[k]);\n        first = false;\n    }\n\n    return q;\n}\n\nclass HttpClient {\n    constructor(url, method, data) {\n        this.url = url;\n        this.method = method || \"GET\";\n        this.headers = {};\n        this.data = data || {};\n        this.accept = null;\n        this.contentType = null;\n        this.rawResponse = false;\n    }\n\n    request() {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(this.url, \"url is not defined\");\n                assert.assertNotEmpty(this.method, \"method is not defined\");\n\n                let data = _.isObject(this.data) ? buildQueryString(this.data) : this.data;\n                let headers = this.headers || {};\n\n                logger.i(this.method.toUpperCase() + \" \" + this.url)\n                if (data) {\n                    logger.i(data)\n                }\n\n                __httpClient.request(this.url, this.method, data, headers, this.accept, this.contentType, this.rawResponse, (error, value) => {\n                    if (error) {\n                        logger.e(\"error\");\n                        reject(error);\n                    } else {\n                        resolve(value)\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        })\n    }\n}\n\n\nlet request = (url, method, data, headers, accept, contentType, rawResponse) => {\n    var method = method || \"GET\";\n    var data = data || {};\n    var headers = headers || {};\n    var rawResponse = rawResponse || false;\n\n    let client = new HttpClient(url);\n    client.method = method;\n    client.data = data;\n    client.headers = headers;\n    client.rawResponse = rawResponse;\n    client.accept = accept;\n    client.contentType = contentType;\n\n    return client.request();\n};\n\n\nexports.HttpClient = HttpClient;\nexports.request = request;\n\n/**\n * Makes a GET request to specified url\n * @param url\n * @param data, can be a string or object. If is an object will be converted in a form encoded string\n * @param headers\n * @returns A promise of result\n */\nexports.get = (url, data, headers) => {\n    var data = data || {};\n    var headers = headers || {};\n\n    return request(url, \"GET\", data, headers, null, null, false);\n};\n\n/**\n * Makes a POST request to specified url\n * @param url\n * @param data, can be a string or object. If is an object will be converted in a form encoded string\n * @param headers\n * @returns A promise of result\n */\nexports.post = (url, data, headers) => {\n    var data = data || {};\n    var headers = headers || {};\n    return request(url, \"POST\", data, headers, null, null, false);\n};\n\n/**\n * Makes a PUT request to specified url\n * @param url\n * @param data, can be a string or object. If is an object will be converted in a form encoded string\n * @param headers\n * @returns A promise of result\n */\nexports.put = (url, data, headers) => {\n    var data = data || {};\n    var headers = headers || {};\n    return request(url, \"PUT\", data, headers, null, null, false);\n};\n\n/**\n * Makes a DELETE request to specified url\n * @param url\n * @param data, can be a string or object. If is an object will be converted in a form encoded string\n * @param headers\n * @returns A promise of result\n */\nexports.delete = (url, data, headers) => {\n    var data = data || {};\n    var headers = headers || {};\n    return request(url, \"DELETE\", data, headers, null, null, false);\n};\n\n/**\n * Downloads a file from specified url\n * @param url\n * @param data, can be a string or object. If is an object will be converted in a form encoded string\n * @param headers\n * @returns A promise of result\n */\nexports.download = (url, data, headers) => {\n    var data = data || {};\n    var headers = headers || {};\n    return request(url, \"GET\", data, headers, null, null, true);\n};","/**\n * AJ Framework main module. Contains functions to create hybrid applications using flux framework\n * @module aj\n */\n\n\"use strict\";\n\nconst _ = require(\"underscore\")\nconst Observable = require(\"./events\").Observable;\n\nvar __runtime = null;\nvar __stores = {};\nvar __actions = {};\n\nfunction stringifyIfNotBrowser(obj) {\n    if (window) {\n        return obj\n    } else {\n        JSON.stringify(obj)\n    }\n}\n\nclass AJRuntime {\n    constructor() {\n\n    }\n\n    static instance() {\n        if (!__runtime) {\n            throw \"Runtime not initialized\"\n        }\n        return __runtime;\n    }\n\n    exec() {\n        throw \"Not implemented\"\n    }\n\n    createBuffer(data) {\n        throw \"Not implemented\"\n    }\n\n    loadBuffer(id) {\n        throw \"Not implemented\"\n    }\n\n    destroyBuffer(id) {\n        throw \"Not implemented\"\n    }\n\n    __trigger(store, state) {\n        throw \"Not implemented\";\n    }\n}\n\nif (platform.test) {\n    (function() {\n        var vm = require(\"vm\");\n        var fs = require(\"fs\");\n        var buffers = {}\n        var bufferId = 0\n\n        class AJTestRuntime extends AJRuntime {\n            constructor() {\n                super();\n\n                this.semaphores = [];\n\n                logger.i(\"New test runtime created\");\n            }\n\n            init(options) {\n\n            }\n\n            exec(plugin, fn, data) {\n                logger.i(\"Executing plugin \", plugin + \".\" + fn);\n\n                return new Promise((resolve, reject) => {\n                    resolve({})\n                })\n            }\n\n            __trigger(store, state) {\n                logger.i(\"Triggering\", store);\n                logger.i(stringifyIfNotBrowser(state));\n            }\n\n            createBuffer(data) {\n                return new Promise((resolve, reject) => {\n                    let id = ++bufferId\n                    buffers[id] = data\n                    resolve(id)\n                })\n            };\n\n            readBuffer(id) {\n                return new Promise((resolve, reject) => {\n                    resolve(buffers[id])\n                })\n            };\n\n            destroyBuffer(id) {\n                return new Promise((resolve, reject) => {\n                    delete buffers[id]\n                    resolve()\n                })\n            };\n\n        }\n\n        AJRuntime.create = function() {\n            return new AJTestRuntime();\n        }\n    })();\n}\nelse if (platform.engine == \"node\") {\n    (function() {\n        var vm = require(\"vm\");\n        var fs = require(\"fs\");\n\n        class AJWebSocketServerRuntime extends AJRuntime {\n            constructor() {\n                super();\n\n                this.semaphores = [];\n\n                logger.i(\"New websocket server runtime created\");\n            }\n\n            init(options) {\n                this.socket =  options.socket;\n                if (!this.socket) {\n                    throw \"Socket is required\";\n                }\n\n                this.socket.on(\"run\", (action, json, ack) => {\n                    async(() => {\n                        try {\n                            var data = JSON.parse(json);\n                            run(action, data);\n\n                            ack();\n                        } catch (e) {\n                            if (e && e.stack) { logger.e(e.stack); }\n                            logger.e(e);\n                        }\n                    });\n                });\n\n                this.socket.on(\"freeSemaphore\", (id, data) => {\n                    try {\n                        this.freeSemaphore(id, data);\n                    } catch(e) {\n                        if (e && e.stack) { logger.e(e.stack); }\n                        logger.e(e);\n                    }\n                });\n\n                this.socket.on(\"error\", (e) => {\n                    if (e && e.stack) { logger.e(e.stack); }\n                    logger.e(e);\n                });\n            }\n\n            exec(plugin, fn, data) {\n                logger.i(\"Executing plugin \", plugin + \".\" + fn);\n\n                return new Promise((resolve, reject) => {\n                    this.socket.emit(\"exec\", plugin, fn, data, (error, result) => {\n                        if (!error) {\n                            resolve(result);\n                        } else {\n                            reject(result);\n                        }\n                    });\n                })\n            }\n\n            __trigger(store, state) {\n                if (DEBUG) {\n                    logger.i(\"Triggering\", store);\n                    logger.i(stringifyIfNotBrowser(state))\n                }\n\n                return new Promise((resolve, reject) => {\n                    this.socket.emit(\"trigger\", store, state, function() {\n                        resolve();\n                    });\n                });\n\n            }\n\n            freeSemaphore(id, data) {\n                var index = -1;\n                var found = false;\n                for (var i = 0; i < this.semaphores.length; i++) {\n                    index++;\n                    var semaphore = this.semaphores[i];\n\n                    if (semaphore.id == id) {\n                        found = true;\n                        semaphore.free(data);\n                        break;\n                    }\n                }\n\n                if (found) {\n                    this.semaphores.splice(index, 1);\n                    logger.i(\"Semaphore destroyed:\", semaphore.name);\n                }\n            }\n\n            createBuffer(data) {\n                return new Promise((resolve, reject) => {\n                    this.socket.emit(\"createBuffer\", data, (error, id) => {\n                        if (!error) {\n                            resolve(id)\n                        } else {\n                            reject()\n                        }\n                    })\n                })\n            };\n\n            readBuffer(id) {\n                return new Promise((resolve, reject) => {\n                    this.socket.emit(\"readBuffer\", id, (error, data) => {\n                        if (!error) {\n                            resolve(data)\n                        } else {\n                            reject()\n                        }\n                    })\n                })\n            };\n\n            destroyBuffer(id) {\n                return new Promise((resolve, reject) => {\n                    this.socket.emit(\"readBuffer\", id, (error) => {\n                        if (!error) {\n                            resolve()\n                        } else {\n                            reject()\n                        }\n                    })\n                })\n            };\n\n        }\n\n        AJRuntime.create = function() {\n            return new AJWebSocketServerRuntime();\n        }\n    })();\n} else {\n    (function() {\n        class AJNativeServerRuntime extends AJRuntime {\n            constructor() {\n                super();\n\n                logger.i(\"New native server runtime created\");\n            }\n\n            init(options) {\n\n            }\n\n            run(action, data) {\n                run(action, data);\n            }\n\n            __trigger(store, state) {\n                if (__trigger == undefined) {\n                    throw \"__trigger function not defined\";\n                }\n\n                if (DEBUG) {\n                    logger.i(\"Triggering\", store);\n                    logger.i(stringifyIfNotBrowser(state));\n                }\n\n                return new Promise((resolve, reject) => {\n                    try {\n                        __trigger(store, state);\n                        resolve();\n                    } catch (e) {\n                        reject(e);\n                    }\n                });\n            }\n\n            exec(plugin, fn, data) {\n                if (__exec == undefined) {\n                    throw \"__exec function not defined\"\n                }\n\n                logger.i(\"Executing plugin\", plugin + \".\" + fn)\n\n                return new Promise((resolve, reject) => {\n                    __exec(plugin, fn, data, function(error, value) {\n                        if (error) {\n                            reject(value)\n                        } else {\n                            resolve(value)\n                        }\n                    })\n                })\n            }\n\n            createBuffer(data) {\n                return new Promise((resolve, reject) => {\n                    __buffersManager.create(data, function(error, value) {\n                        if (error) {\n                            reject(value);\n                        } else {\n                            resolve(value);\n                        }\n                    });\n                })\n            };\n\n            readBuffer(id) {\n                return new Promise((resolve, reject) => {\n                    __buffersManager.read(id, function(error, value) {\n                        if (error) {\n                            reject(value);\n                        } else {\n                            resolve(value);\n                        }\n                    });\n                })\n            };\n\n            destroyBuffer(id) {\n                return new Promise((resolve, reject) => {\n                    __buffersManager.destroy(id, function(error, value) {\n                        if (error) {\n                            reject(value);\n                        } else {\n                            resolve(value);\n                        }\n                    });\n                })\n            };\n\n        }\n\n        AJRuntime.create = function() {\n            return new AJNativeServerRuntime();\n        }\n    })();\n}\n\n\nclass Store extends Observable {\n    constructor(type, reducer) {\n        super();\n\n        this.type = type;\n        this.reducer = reducer;\n        this.subscriptions = [];\n    }\n\n    init(options) {}\n\n    subscribe(owner, subscription) {\n        this.subscriptions.push({owner, subscription});\n    }\n\n    unsubscribe(owner) {\n        this.subscriptions = _.filter(this.subscriptions, s => s.owner != owner);\n    }\n\n    trigger(state) {\n        let newState = state || this.state;\n\n        _.each(this.subscriptions, s => {\n            s.subscription(newState);\n        });\n\n        return __runtime.__trigger(this.type, newState);\n    }\n\n    dispatch(action) {\n        if (_.isFunction(this.reducer)) {\n            var newState = this.reducer(this.state, action);\n            if (newState) {\n                this.state = newState;\n\n                this.trigger()\n            }\n        } else {\n            logger.w(\"Cannot dispatch action:\", this.type + \".\" + action);\n        }\n    }\n}\n\n\n\nclass Semaphore {\n    constructor(action) {\n        this.complete = false;\n        this.listeners = [];\n        this.id = Semaphore.counter++;\n\n        if (action) {\n            this.runAction(action);\n        }\n\n    }\n\n    runAction(action) {\n        async(() => {\n            action();\n            this.free()\n        })\n    }\n\n    then(action) {\n        this.listeners.push(action);\n\n        if (this.complete) {\n            action();\n        }\n\n        return this;\n    }\n\n    free(data) {\n        this.listeners.forEach((l) => { l(data); });\n        this.complete = true;\n\n        return this;\n    }\n\n}\n\nSemaphore.counter = 1;\n\n/**\n * @function createRuntime\n * @description Creates a new instance of runtime. Usually used internally by devices runtimes\n * @returns singleton instance of runtime\n */\nexport function createRuntime(options) {\n    __runtime = AJRuntime.create();\n    __runtime.init(options);\n\n    return __runtime;\n};\n\n/**\n * @function createStore\n * @description Creates a new singleton instance of store\n * @param {string} type - Name of store to create\n * @param {function} reducer - Store reducer\n * @returns {store} - The newly created store\n */\nexport function createStore(type, reducer) {\n    if (_.has(__stores, type)) {\n        throw \"Cannot create store \" + type + \". Only one instance of store is allowed\";\n    }\n\n    var store = new Store(type, reducer);\n    __stores[type] = store;\n\n    logger.i(\"Store created:\", type);\n\n    return store;\n}\n\n/**\n * @function createAction\n * @Description Creates a new action for the application\n * @param {string} type - Type of action to create\n * @param {function} action - Action to execute\n * @returns {function} The newly created action\n */\nexport function createAction(type, fn) {\n    if (type == undefined) {\n        throw new Error(\"Action type is undefined\")\n    }\n\n    if (_.has(__actions, type)) {\n        throw \"Cannot create action \" + type + \". Already created\";\n    }\n\n    var act = __actions[type] = (data) => {\n        if (DEBUG) {\n            logger.i(\"Running action\", type);\n            logger.i(stringifyIfNotBrowser(data));\n        }\n        fn(data);\n    };\n\n    logger.i(\"Action created:\", type);\n\n    return act;\n}\n\n/**\n * @function dispatch\n * @description Dispatch action to stores, usually called by actions\n * @param {object} data - Data to pass to stores\n */\nexport function dispatch(action) {\n    if (DEBUG) {\n        logger.i(\"Dispatching action\", action.type);\n        logger.i(stringifyIfNotBrowser(action));\n    }\n\n    _.each(__stores, (store) => {\n        try {\n            store.dispatch(action);\n        } catch (e) {\n            if (e && e.stack) { logger.e(e.stack); }\n            logger.e(e);\n        }\n    });\n}\n\n/**\n * @function run\n * @description Run specified action. This is not the common method to call actions, but it's necessary for managing actions from\n * devices. On JS side, call actions directly\n * @param {type} type - Type of action to call\n * @param {data} type - Data to pass to action\n */\nexport function run(action, data) {\n    if (_.has(__actions, action)) {\n        __actions[action](data);\n    } else {\n        logger.w(\"Cannot find action: \" + action);\n    }\n}\n\n/**\n * @function exec\n * @description Exec a plugin method\n * @param {string} plugin - The plugin\n * @param {method} method - The plugin method to call\n * @param {data} data - Data to pass to plugin\n * @returns {Promise} - A promise of plugin call result\n */\nexport function exec(plugin, fn, data) {\n    return __runtime.exec(plugin, fn, data);\n}\n\n\nexport function createBuffer(data) {\n    return __runtime.createBuffer(data);\n}\n\nexport function readBuffer(id) {\n    return __runtime.readBuffer(id);\n}\n\nexport function destroyBuffer(id) {\n    return __runtime.destroyBuffer(id);\n}","\"use strict\";\n\nconst _ = require(\"underscore\");\n\nexports.ext = function(path) {\n    if (_.isEmpty(path)) {\n        return \"\";\n    }\n\n    var index = path.lastIndexOf(\".\");\n    if (index == -1) {\n        return \"\";\n    }\n\n    return path.substring(index);\n};\n\nexports.removeExt = function(path) {\n    if (_.isEmpty(path)) {\n        return path;\n    }\n\n    var index = path.lastIndexOf(\".\");\n    if (index == -1) {\n        return path;\n    }\n\n    return path.substring(0, index);\n};","\"use strict\";\n\nconst assert = require(\"./assert\");\nconst path = require(\"./path\");\nconst base64 = require(\"./base64\");\n\nclass StorageManager {\n    constructor() {\n        if (__storageManager == undefined) {\n            throw \"__storageManager undefined\";\n        }\n    }\n\n    /*\n    Read text files and return a promise with the result as string\n     */\n    readText(path) {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(path, \"path is not defined\");\n\n                logger.i(\"Reading text file\", path);\n\n                __storageManager.readText(path, (error, value) => {\n                    if (error) {\n                        logger.e(value);\n                        reject(value)\n                    } else {\n                        resolve(value)\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        });\n    }\n\n    /*\n     Read binary files and return a promise with the result as byte array (transfer with native using base64)\n     */\n    read(path) {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(path, \"path is not defined\");\n\n                logger.i(\"Reading binary file\", path);\n\n                __storageManager.read(path, (error, value) => {\n                    if (error) {\n                        logger.e(value);\n                        reject(value)\n                    } else {\n                        var bytes = base64.decode(value);\n                        resolve(bytes);\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        });\n    }\n\n    /*\n     Write text files and return a promise with the result of operation\n     */\n    writeText(path, content) {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(path, \"path is not defined\");\n\n                logger.i(\"Writing text file\", path);\n\n                __storageManager.writeText(path, content, (error, value) => {\n                    if (error) {\n                        logger.e(value);\n                        reject(value)\n                    } else {\n                        resolve(value)\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        });\n    }\n\n    /*\n     Write binary files and return a promise with the result of operation\n     */\n    write(path, bytes) {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(path, \"path is not defined\");\n\n                logger.i(\"Writing binary file\", path);\n\n                var content = base64.encode(bytes);\n                __storageManager.write(path, content, (error, value) => {\n                    if (error) {\n                        logger.e(value);\n                        reject(value)\n                    } else {\n                        resolve(value)\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        });\n    }\n\n    /*\n     Delete a file and return a promise with the result of operation\n     */\n    delete(path) {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(path, \"path is not defined\");\n\n                logger.i(\"Deleting file\", path);\n\n                __storageManager.delete(path, (error, value) => {\n                    if (error) {\n                        logger.e(value);\n                        reject(value)\n                    } else {\n                        resolve(value)\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        });\n    }\n\n    /*\n     Check file existence and return a promise with the result of operation\n     */\n    exists(path) {\n        return new Promise((resolve, reject) => {\n            try {\n                assert.assertNotEmpty(path, \"path is not defined\");\n\n                logger.i(\"Checking file existence\", path);\n\n                __storageManager.exists(path, (error, value) => {\n                    if (error) {\n                        logger.e(value);\n                        reject(value)\n                    } else {\n                        resolve(value)\n                    }\n                })\n            } catch (e) {\n                logger.e(e);\n                reject(e);\n            }\n        });\n    }\n\n}\n\nvar instance = new StorageManager();\n\n/**\n * Reads text of file in specified path\n * @param path\n * @returns A promise with text result\n */\nexports.readText = function(path) {\n    return instance.readText(path);\n};\n\n/**\n * Reads binary file from specified path.\n * @param path\n * @returns A promise of result\n */\nexports.read = function(path) {\n    return instance.read(path);\n};\n\n/**\n * Writes text contents in specified file\n * @param path\n * @param content\n * @returns A promise of result\n */\nexports.writeText = function(path, content) {\n    return instance.writeText(path, content);\n};\n\n/**\n * Writes bytes contents in speified file\n * @param path\n * @param bytes\n * @returns A promise of result\n */\nexports.write = function(path, bytes) {\n    return instance.write(path, bytes);\n};\n\n/**\n * Deletes specified file from device storage\n * @param path\n * @returns A promise of result\n */\nexports.delete = function(path) {\n    return instance.delete(path);\n};\n\n/**\n * Check if specified file exists in device storage\n * @param path\n * @returns A promise of result\n */\nexports.exists = function(path) {\n    return instance.exists(path);\n};\n","\"use strict\";\n\nimport * as config from \"../framework/config\";\nimport {get, post} from \"./utils\";\n\nexport function register(name, mail, password) {\n    return post(config.get(\"account.register.url\"), {name, mail, password})\n}\n\nexport function recover(mail) {\n    return post(config.get(\"account.recover.url\"), {mail})\n}\n\nexport function confirm(activationCode) {\n    return post(config.get(\"account.confirm.url\"), {activationCode})\n}\n\nexport function getCoverImage(userId) {\n    return get(`${config.get(\"account.url\")}/${userId}/cover`)\n}\n\nexport function getProfileImage(userId) {\n    return get(`${config.get(\"account.url\")}/${userId}/profile/image`)\n}\n\nexport function changePassword(password, passwordConfirm) {\n    return post(config.get(\"account.url\") + \"/changePassword\", {password: password ? password: \"\", passwordConfirm: passwordConfirm ? passwordConfirm : \"\"});\n}\n\nexport function resetUserPassword(id) {\n    return post(config.get(\"account.resetUserPassword.url\"), {id})\n}\n\nexport function requestRecoveryCode(mail) {\n    return post(config.get(\"account.requestRecoveryCode.url\"), {mail})\n}\n\nexport function validateRecoveryCode(mail, code) {\n    return post(config.get(\"account.validateRecoveryCode.url\"), {mail, code})\n}\n\nexport function resetPassword(mail, code, password, passwordConfirm) {\n    return post(config.get(\"account.resetPassword.url\"), {mail, code, password, passwordConfirm})\n}\n\n\n\n","\"use strict\"\n\nimport * as config from \"../framework/config\";\nimport * as utils from \"./utils\";\nimport {addToken} from \"./utils\";\nimport _ from \"underscore\";\nimport {flatten} from \"../utils/lang\";\nimport * as http from \"../aj/http\";\nimport * as responses from \"./responses\";\n\nexport function find(entity, query) {\n    return load(entity, query)\n}\n\nexport function load(entity, query) {\n    let url = config.get(\"entities.url\") + \"/\" + entity + \"/find\"\n    return utils.postJson(url, query.cleaned())\n}\n\nexport function delete_(entity, ids) {\n    if (!_.isArray(ids)) {\n        throw new Error(\"ids is not an array\")\n    }\n\n    let data = []\n    for (let i = 0; i < ids.length; i++) {\n        data.push(`${ids[i]}`)\n    }\n\n    let url = config.get(\"entities.url\") + \"/\" + entity + \"/delete\"\n    return utils.post(url, {ids: data.join()})\n}\n\nexport function save(entity, data) {\n    let url = config.get(\"entities.url\") + \"/\" + entity\n    return new Promise((resolve, reject) => {\n        let json = typeof(data) === \"string\" ? data : JSON.stringify(data)\n        let headers = {\"Content-Type\": \"application/json\"}\n        http.post(url, json, addToken(headers))\n            .then(json => {\n                if (_.isEmpty(json)) {\n                    reject(responses.ERROR)\n                } else {\n                    let response = JSON.parse(json)\n\n                    if (responses.OK != response.responseCode) {\n                        reject(response)\n                    } else {\n                        resolve(response)\n                    }\n                }\n            })\n            .catch(e => {\n                logger.e(\"Error in request:\", e)\n                reject(responses.ERROR)\n            })\n    })\n}\n\n\nexport function get(entity, id, params) {\n    let url = config.get(\"entities.url\") + \"/\" + entity + \"/\" + id\n    return utils.get(url, params)\n}\n\nexport function checkRevisionEnableStatus(entity) {\n    let url = config.get(\"revision.url\") + \"/checkStatus/\" + entity\n    return utils.get(url)\n}","\"use strict\"\n\nimport * as config from \"../framework/config\";\nimport {get} from \"./utils\";\n\nexport function getGrid(id) {\n    let url = config.get(\"grids.url\") + \"/\" + id\n    return get(url)\n}","\"use strict\"\n\nimport _ from \"underscore\";\nimport {Observable} from \"../aj/events\";\n\nexport const LIKE = \"like\"\nexport const GT = \"gt\"\nexport const NE = \"ne\"\nexport const GTE = \"gte\"\nexport const LT = \"lt\"\nexport const LTE = \"lte\"\nexport const EQ = \"eq\"\nexport const IN = \"in\"\nexport const NIN = \"nin\"\nexport const ID = \"id\"\nexport const OR = \"or\"\nexport const AND = \"and\"\nexport const RANGE = \"range\"\n\nexport class Query extends Observable {\n    constructor(init) {\n        super()\n\n        this.page = 0\n        this.rowsPerPage = 0\n        this.sorts = []\n        this.filters = []\n        this.keyword = null\n\n        this.invokationEnabled = true\n\n        _.assign(this, init)\n    }\n\n    live() {\n        this.invokationEnabled = true\n    }\n\n    die() {\n        this.invokationEnabled = false\n    }\n\n    filter(type, property, value) {\n\n        if ((value === null || value === undefined) && _.any(this.filters, f => f.property === property)) {\n            this.unfilter(property)\n            return this\n        }\n\n        let current = _.find(this.filters, s => s.property == property)\n        if (current) {\n            current.value = value\n            current.type = type\n        } else {\n            this.filters.push({property, type, value})\n        }\n\n        this.invokeChange()\n\n        return this\n    }\n\n    unfilter(property) {\n        this.filters = _.filter(this.filters, f => f.property != property)\n\n        this.invokeChange()\n        return this\n    }\n\n    like(prop, value) {\n        this.filter(LIKE, prop, value)\n        return this\n    }\n\n    gt(prop, value) {\n        this.filter(GT, prop, value)\n        return this\n    }\n\n    ne(prop, value) {\n        this.filter(NE, prop, value)\n        return this\n    }\n\n    gte(prop, value) {\n        this.filter(GTE, prop, value)\n        return this\n    }\n\n    lt(prop, value) {\n        this.filter(LT, prop, value)\n        return this\n    }\n\n    lte(prop, value) {\n        this.filter(LTE, prop, value)\n        return this\n    }\n\n    eq(prop, value) {\n        this.filter(EQ, prop, value)\n        return this\n    }\n\n    in(prop, value) {\n        this.filter(IN, prop, value)\n        return this\n    }\n\n    nin(prop, value) {\n        this.filter(NE, prop, value)\n        return this\n    }\n\n    id(prop, value) {\n        this.filter(ID, prop, value)\n        return this\n    }\n\n    or(prop, value) {\n        this.filter(OR, prop, value)\n        return this\n    }\n\n    and(prop, value) {\n        this.filter(AND, prop, value)\n        return this\n    }\n\n    range(prop, value) {\n        this.filter(RANGE, prop, value)\n        return this\n    }\n\n    gt(prop, value) {\n        this.filter(GT, prop, value)\n        return this\n    }\n\n    ne(prop, value) {\n        this.filter(NE, prop, value)\n        return this\n    }\n\n    sort(prop, descending) {\n        let current = _.find(this.sorts, s => s.property == prop)\n        if (current) {\n            current.descending = descending\n        } else {\n            this.sorts.push({property: prop, descending})\n        }\n\n        this.invokeChange()\n        return this\n    }\n\n    unsort(prop) {\n        this.sorts = _.filter(this.sorts, s => s.property != prop)\n\n        this.invokeChange()\n        return this\n    }\n\n    clearFilters() {\n        this.filters = []\n        this.invokeChange()\n        return this\n    }\n\n    setPage(page) {\n        this.page = page\n        this.invokeChange()\n        return this\n    }\n\n    setRowsPerPage(rowsPerPage) {\n        this.rowsPerPage = rowsPerPage\n        this.invokeChange()\n        return this\n    }\n\n    setKeyword(newValue) {\n        this.keyword = newValue\n        this.invokeChange()\n        return this\n    }\n\n    invokeChange() {\n        if (this.invokationEnabled) {\n            this.invoke(\"change\")\n        }\n    }\n\n    cleaned() {\n        return {\n            page: this.page,\n            rowsPerPage: this.rowsPerPage,\n            sorts: this.sorts,\n            filters: this.filters,\n            keyword: this.keyword\n        }\n    }\n}\n\nexport function create(init) {\n    let query = new Query(init)\n    return query\n}","import {getLanguage} from \"../strings\";\n\n\nexport const OK                              = 0;\nexport const ERROR                           = 1;\nexport const UNAUTHORIZED                    = 2;\n\nexport const ERROR_MAIL_ALREADY_EXISTS                   = 1001\nexport const ERROR_MAIL_NOT_FOUND                        = 1002\nexport const ERROR_BAD_CREDENTIALS                       = 1003\nexport const ERROR_TOKEN_GENERATION                      = 1004\nexport const ERROR_TOKEN_FORMAT                          = 1005\nexport const ERROR_MAIL_NOT_VALID                        = 1006\nexport const ERROR_PASSWORD_NOT_VALID                    = 1007\nexport const ERROR_VALIDATION                            = 1008\nexport const ERROR_NOT_FOUND                             = 1009\nexport const ERROR_USER_NOT_FOUND                        = 1010\nexport const ERROR_CONSTRAINT_VIOLATION                  = 1011\nexport const ERROR_CONNECTOR                             = 1012\nexport const ERROR_ROLE_NOT_FOUND                        = 1013\nexport const ERROR_IO                                    = 1014\nexport const ERROR_INVALID_DATA                          = 1015\nexport const ERROR_ARTICLE_NOT_FOUND                     = 2001\nexport const ERROR_INVALID_DEFAULT_ARTICLE               = 2002\nexport const ERROR_USER_COMPANY_NOT_SETTED               = 2003\nexport const ERROR_COVER_COMPONENT_ALREADY_EXISTS        = 2004\nexport const ERROR_COVER_COMPONENT_NOT_CONFIGURED        = 2005\nexport const ERROR_CUSTOMER_NOT_FOUND                    = 3001\nexport const ERROR_WAREHOUSE_NOT_FOUND                   = 4001\nexport const ERROR_DOCUMENT_NOT_FOUND                    = 5001\n\n\nconst messages = {\n\ten: {},\n\n\tit: {}\n}\n\nmessages[\"en\"][OK]\t\t\t\t\t\t\t\t\t\t  = \"OK\"\nmessages[\"en\"][ERROR] \t\t\t\t\t\t\t\t\t  = \"Generic error\"\nmessages[\"en\"][ERROR_MAIL_ALREADY_EXISTS]                   = \"Cannot register: mail already exists\"\nmessages[\"en\"][ERROR_MAIL_NOT_FOUND]                        = \"Mail not found\"\nmessages[\"en\"][ERROR_BAD_CREDENTIALS]                       = \"Cannot login: bad username or password\"\nmessages[\"en\"][ERROR_TOKEN_GENERATION]                      = \"Error generating token\"\nmessages[\"en\"][ERROR_TOKEN_FORMAT]                          = \"Bat token format\"\nmessages[\"en\"][ERROR_MAIL_NOT_VALID]                        = \"Invalid email\"\nmessages[\"en\"][ERROR_PASSWORD_NOT_VALID]                    = \"Password not valid\"\nmessages[\"en\"][ERROR_VALIDATION]                            = \"Validation error. Please control inserted data and retry\"\nmessages[\"en\"][ERROR_NOT_FOUND]                             = \"Not found\"\nmessages[\"en\"][ERROR_USER_NOT_FOUND]                        = \"User not found\"\nmessages[\"en\"][ERROR_CONSTRAINT_VIOLATION]                  = \"Constraint violation\"\nmessages[\"en\"][ERROR_CONNECTOR]                             = \"There is a problem retrieving data from Gamma\"\nmessages[\"en\"][ERROR_ROLE_NOT_FOUND]                        = \"Role not found\"\nmessages[\"en\"][ERROR_IO]                                    = \"IO error\"\nmessages[\"en\"][ERROR_INVALID_DATA]                          = \"Invalid data\"\nmessages[\"en\"][ERROR_ARTICLE_NOT_FOUND]                     = \"Article not found\"\nmessages[\"en\"][ERROR_INVALID_DEFAULT_ARTICLE]               = \"Invalid default article\"\nmessages[\"en\"][ERROR_USER_COMPANY_NOT_SETTED]               = \"User company not setted\"\nmessages[\"en\"][ERROR_COVER_COMPONENT_ALREADY_EXISTS]        = \"Cover component already exists\"\nmessages[\"en\"][ERROR_COVER_COMPONENT_NOT_CONFIGURED]        = \"Cover component not configured\"\nmessages[\"en\"][ERROR_CUSTOMER_NOT_FOUND]                    = \"Customer not found\"\nmessages[\"en\"][ERROR_WAREHOUSE_NOT_FOUND]                   = \"Warehouse not found\"\nmessages[\"en\"][ERROR_DOCUMENT_NOT_FOUND]                    = \"Document not found\"\n\nmessages[\"it\"][OK]\t\t\t\t\t\t\t\t\t\t\t= \"OK\"\nmessages[\"it\"][ERROR] \t\t\t\t\t\t\t\t\t\t= \"Si è verificato un errore\"\nmessages[\"it\"][ERROR_MAIL_ALREADY_EXISTS]                   = \"Impossibile registrarsi: indirizzo email già presente\"\nmessages[\"it\"][ERROR_MAIL_NOT_FOUND]                        = \"Mail non trovata\"\nmessages[\"it\"][ERROR_BAD_CREDENTIALS]                       = \"Impossibile accedere: email o password errati\"\nmessages[\"it\"][ERROR_TOKEN_GENERATION]                      = \"Errore durante la generazione del token\"\nmessages[\"it\"][ERROR_TOKEN_FORMAT]                          = \"Formato del token non valido\"\nmessages[\"it\"][ERROR_MAIL_NOT_VALID]                        = \"Email non valida\"\nmessages[\"it\"][ERROR_PASSWORD_NOT_VALID]                    = \"Password non valida\"\nmessages[\"it\"][ERROR_VALIDATION]                            = \"Errore di validazione: ricontrollare i dati inseriti e riprovare\"\nmessages[\"it\"][ERROR_NOT_FOUND]                             = \"Non trovato\"\nmessages[\"it\"][ERROR_USER_NOT_FOUND]                        = \"Utente non trovato\"\nmessages[\"it\"][ERROR_CONSTRAINT_VIOLATION]                  = \"Impossibile proseguire. Esistono entità collegate che dipendono da questa entità\"\nmessages[\"it\"][ERROR_CONNECTOR]                             = \"Problema durante la comunicazione con Gamma\"\nmessages[\"it\"][ERROR_ROLE_NOT_FOUND]                        = \"Ruolo non trovato\"\nmessages[\"it\"][ERROR_IO]                                    = \"IO error\"\nmessages[\"it\"][ERROR_INVALID_DATA]                          = \"Dati non validi\"\nmessages[\"it\"][ERROR_ARTICLE_NOT_FOUND]                     = \"Articolo non trovato\"\nmessages[\"it\"][ERROR_INVALID_DEFAULT_ARTICLE]               = \"Articolo predefinito non trovato\"\nmessages[\"it\"][ERROR_USER_COMPANY_NOT_SETTED]               = \"Azienda non configurata per l'utente corrente\"\nmessages[\"it\"][ERROR_COVER_COMPONENT_ALREADY_EXISTS]        = \"Componente di tipo rivestimento già presente\"\nmessages[\"it\"][ERROR_COVER_COMPONENT_NOT_CONFIGURED]        = \"Componente di tipo rivestimento non trovato\"\nmessages[\"it\"][ERROR_CUSTOMER_NOT_FOUND]                    = \"Cliente non trovato\"\nmessages[\"it\"][ERROR_WAREHOUSE_NOT_FOUND]                   = \"Magazzino non trovato\"\nmessages[\"it\"][ERROR_DOCUMENT_NOT_FOUND]                    = \"Documento non trovato\"\n\nexport function msg(response) {\n\tlet responseCode = null;\n\n\tif (typeof(response) === \"object\") {\n\t    if (response.message)\n\t        return response.message;\n\n\t    responseCode = response.responseCode;\n\t} else {\n\t\tresponseCode = response;\n\t}\n\n \tif (_.has(messages[getLanguage()], responseCode )) {\n        return messages[getLanguage()][responseCode]\n    }\n\n    return \"Errore n. \" + responseCode\n}\n\n/**\n * Returns value of value responses. If o is a promise, a wrapped promise thar returns value will be returned\n */\nexport function value(o) {\n\tif (o instanceof Promise) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\to\n\t\t\t\t.then(result => {\n\t\t\t\t\tresolve(result.value)\n\t\t\t\t})\n\t\t\t\t.catch(e => reject(e))\n\t\t})\t\t\n\t} else {\n\t\tif (_.isObject(o)) {\n\t\t\treturn o.value\n\t\t}\n\t}\n\n\tlogger.w(o, \"is not a value response\")\n\n\treturn null\n}","\"use strict\"\n\nimport * as http from \"../aj/http\";\nimport * as preferences from \"../framework/preferences\";\nimport * as config from \"../framework/config\";\nimport _ from \"underscore\";\nimport * as responses from \"./responses\";\nimport {safeGet} from \"../utils/lang\";\n\nlet _loggedUser\nlet _sessionToken\n\nexport const TYPE_MAIL = \"MAIL\"\nexport const TYPE_FACEBOOK = \"FACEBOOK\"\n\nlet STOP_OBJ = {}\n\nfunction stop() {\n    return STOP_OBJ\n}\n\nfunction wrap(r, fn) {\n    if (r == STOP_OBJ) {\n        return STOP_OBJ\n    } else {\n        return fn(r)\n    }\n}\n\nexport function login(mail, password) {\n    return new Promise((resolve, reject) => {\n        http.post(config.get(\"login.url\"), {mail, password})\n            .then(json => {\n                if (_.isEmpty(json)) {\n                    reject(responses.ERROR)\n                } else {\n                    let response = JSON.parse(json)\n\n                    if (responses.OK != response.responseCode) {\n                        reject(response.responseCode)\n                    } else {\n                        resolve(response)\n                    }\n                }\n            })\n            .catch(e => {\n                logger.e(\"Error logging in:\", e)\n                reject(responses.ERROR)\n            })\n    })\n}\n\nexport function start(mail, password) {\n    return new Promise((resolve, reject) => {\n        _loggedUser = null\n        _sessionToken = null\n\n        let data = {}\n\n        preferences.load()\n            .then(() => { return login(mail, password) })\n            .then((response) => {\n                preferences.set(\"session.type\", TYPE_MAIL)\n                preferences.set(\"session.mail\", mail)\n                preferences.set(\"session.password\", password)\n\n                _sessionToken = response.token\n                console.log(_sessionToken)\n                _loggedUser = response.user\n\n                return preferences.save()\n            })\n            .then((r) => {\n                resolve(_loggedUser)\n            })\n            .catch((e) => {\n                _loggedUser = null\n                _sessionToken = null\n\n                preferences.load()\n                    .then(() => {\n                        preferences.set(\"session.type\", null)\n                        preferences.set(\"session.mail\", null)\n                        preferences.set(\"session.password\", null)\n                        return preferences.save()\n                    })\n                    .catch((e) => {\n                        logger.e(e)\n                    })\n\n                reject(e)\n            })\n    })\n}\n\nexport function resume() {\n    return new Promise((resolve, reject) => {\n        _loggedUser = null\n        _sessionToken = null\n\n        preferences.load()\n            .then(() => {\n                var type = preferences.get(\"session.type\")\n                var mail = preferences.get(\"session.mail\")\n                var password = preferences.get(\"session.password\")\n\n                if ((type == TYPE_MAIL && mail && password)) {\n                    return start(mail, password)\n                } else {\n                    reject(responses.ERROR)\n                    return stop()\n                }\n            })\n            .then((r) => {\n                return wrap(r, () => {\n                    resolve(r)\n                })\n            })\n            .catch(e => {reject(e)})\n    })\n}\n\nexport function destroy() {\n    _loggedUser = null\n    _sessionToken = null\n\n    return preferences.load()\n        .then(() => {\n            preferences.set(\"session.type\", null)\n            preferences.set(\"session.mail\", null)\n            preferences.set(\"session.password\", null)\n            return preferences.save()\n        })\n        .catch((e) => {\n            logger.e(e)\n        })\n}\n\nexport function getLoggedUser() {\n    return _loggedUser\n}\n\nexport function isLoggedIn() {\n    return _loggedUser != null\n}\n\nexport function getSessionToken() {\n    return _sessionToken\n}\n\nexport function updateLoggedUser(user) {\n    _loggedUser = user;\n}\n\nexport function updateUserPassword(password) {\n    preferences.set(\"session.password\", password)\n    preferences.save()\n}\n\nexport function updateSessionToken(token) {\n    _sessionToken = token;\n}\n\n\n/**\n * Check if user has permissions\n * @param permissions --> array string ex: [document:list, document:new]\n */\n\n\nexport function isSuperuser() {\n    return _.any(safeGet(getLoggedUser(), \"roles\"), r => _.any(r.permissions, p => p === \"admin:superuser\"))\n}\n\nexport function hasPermission(permissions) {\n    if (_.isEmpty(permissions) || isSuperuser())\n        return true\n\n    return _.any(safeGet(getLoggedUser(), \"roles\"), r => _.intersection(r.permissions, permissions).length > 0)\n}\n\nexport const Permission = {\n    LIST: \"list\",\n    NEW: \"new\",\n    EDIT: \"edit\",\n    DELETE: \"delete\",\n    SAVE: \"save\",\n}\n","\"use strict\";\n\nimport * as config from \"../framework/config\";\nimport {get} from \"./utils\";\n\nexport function getSystemInfos() {\n    return get(config.get(\"system.url\") + \"/version\");\n}","\"use strict\"\n\nimport * as http from \"../aj/http\";\nimport * as responses from \"./responses\";\nimport {getSessionToken} from \"./session\";\nimport _ from \"underscore\";\n\nexport function addToken(headers) {\n    if (!_.isEmpty(getSessionToken())) {\n        return _.assign(headers || {}, {\"x-auth-token\": getSessionToken()})\n    } else {\n        return headers\n    }\n}\n\nexport function post(url, data, headers = {}) {\n    return new Promise((resolve, reject) => {\n        http.post(url, data, addToken(headers))\n            .then(json => {\n                if (_.isEmpty(json)) {\n                    reject(responses.ERROR)\n                } else {\n                    let response = JSON.parse(json)\n\n                    if (responses.OK != response.responseCode) {\n                        reject(response)\n                    } else {\n                        resolve(response)\n                    }\n                }\n            })\n            .catch(e => {\n                logger.e(\"Error in request:\", e)\n                reject(responses.ERROR)\n            })\n    })\n}\n\nexport function postJson(url, data, headers = {}) {\n    return new Promise((resolve, reject) => {\n        let json = typeof(data) == \"string\" ? data : JSON.stringify(data)\n        headers = _.assign(headers, {\"Content-Type\": \"application/json\"})\n        http.post(url, json, addToken(headers))\n            .then(json => {\n                if (_.isEmpty(json)) {\n                    reject(responses.ERROR)\n                } else {\n                    let response = JSON.parse(json)\n\n                    if (responses.OK != response.responseCode) {\n                        reject(response)\n                    } else {\n                        resolve(response)\n                    }\n                }\n            })\n            .catch(e => {\n                logger.e(\"Error in request:\", e)\n                reject(responses.ERROR)\n            })\n    })\n}\n\nexport function get(url, data, headers = {}) {\n    return new Promise((resolve, reject) => {\n        http.get(url, data, addToken(headers))\n            .then(json => {\n                if (_.isEmpty(json)) {\n                    reject(responses.ERROR)\n                } else {\n                    let response = JSON.parse(json)\n\n                    if (responses.OK != response.responseCode) {\n                        reject(response)\n                    } else {\n                        resolve(response)\n                    }\n                }\n            })\n            .catch(e => {\n                logger.e(\"Error in request:\", e)\n                reject(responses.ERROR)\n            })\n    })\n}\n\nexport function delete_(url, data, headers) {\n    return new Promise((resolve, reject) => {\n        http.delete(url, data, addToken(headers))\n            .then(json => {\n                if (_.isEmpty(json)) {\n                    reject(responses.ERROR)\n                } else {\n                    let response = JSON.parse(json)\n\n                    if (responses.OK != response.responseCode) {\n                        reject(response)\n                    } else {\n                        resolve(response)\n                    }\n                }\n            })\n            .catch(e => {\n                logger.e(\"Error in request:\", e)\n                reject(responses.ERROR)\n            })\n    })\n}","\"use strict\"\n\nconst aj = require(\"../aj\")\nconst http = require(\"../aj/http\")\n\nconst preferences = require(\"../framework/preferences\")\nconst config = require(\"../framework/config\")\n\nimport _ from \"underscore\";\nimport {flatten} from \"../utils/lang\";\nimport * as query from \"../api/query\";\nimport {get} from \"./utils\";\n\nexport function loadEntities(entity, _query) {\n    if (_.isEmpty(_query)) {\n        _query = query.create();\n    }\n    let url = config.get(`values.entities.url`) + \"/\" + entity\n    return get(url, flatten(_query.cleaned()))\n}\n\nexport function load(collection, keyword, params = {}) {\n    let url = config.get(\"values.url\") + \"/\" + collection\n    if (!_.isEmpty(keyword)) {\n    \turl += \"?keyword=\" + keyword\n    }\n\n    let separator = \"&\"\n    if (url.indexOf(\"?\") == -1) {\n        separator = \"?\"\n    }\n\n    let paramsString = \"\"\n    _.each(_.allKeys(params), k => {\n        paramsString += k + \"=\" + encodeURIComponent(params[k]) + \"&\"\n    })\n\n    if (!_.isEmpty(paramsString)) {\n        url += separator + paramsString\n    }\n\n    return get(url)\n}","import \"@babel/polyfill\";\n\nimport {createRuntime} from \"./aj\";\nimport \"./stores/session\";\nimport \"./stores/account\";\nimport \"./stores/entities\";\nimport \"./stores/menu\";\nimport \"./stores/ui\";\nimport \"./actions/session\";\nimport \"./actions/entities\";\nimport \"./actions/menu\";\nimport \"./actions/ui\";\n\n\ncreateRuntime();\n\nif (platform.device == \"browser\") {\n\tconst main = require(\"./web/main\");\n\n\tmain.default();\n}\n\n","var serviceBase = \"http://localhost:8080/\";\n\nfunction getVersion() {\n    return \"1.0\";\n}\n\nfunction getCopyright() {\n    return \"Applica SRL, 2019\";\n}\n\nmodule.exports = {\n    \"service.url\": `${serviceBase}`,\n    \"fs.url\": `${serviceBase}fs`,\n    \"login.url\": `${serviceBase}auth/login`,\n    \"account.url\": `${serviceBase}account`,\n    \"account.register.url\": `${serviceBase}account/register`,\n    \"account.recover.url\": `${serviceBase}account/recover`,\n    \"account.reset.url\": `${serviceBase}account/reset`,\n    \"account.confirm.url\": `${serviceBase}account/confirm`,\n    \"grids.url\": `${serviceBase}grids`,\n    \"entities.url\": `${serviceBase}entities`,\n    \"entities.delete.url\": `${serviceBase}entities/delete`,\n    \"values.url\": `${serviceBase}values`,\n    \"values.entities.url\": `${serviceBase}values/entities`,\n    \"account.requestRecoveryCode.url\": `${serviceBase}account/sendConfirmationCode`,\n    \"account.validateRecoveryCode.url\": `${serviceBase}account/validateRecoveryCode`,\n    \"account.resetPassword.url\": `${serviceBase}account/resetUserPassword`,\n    \"account.resetUserPassword.url\": `${serviceBase}account/resetPassword`,\n    \"system.url\": `${serviceBase}system`,\n    \"backendVersion\" : getVersion(),\n    \"copyrightInfos\" : getCopyright()\n}","const config = require(\"../config\");\n\nconst _ = require(\"underscore\");\n\nexports.get = function(key) {\n    if (_.has(config, key)) {\n        return config[key];\n    } else {\n        throw \"Config not found: \" + key;\n    }\n};","\"use strict\";\n\nconst storage = require(\"../aj/storage\");\n\nclass Preferences {\n    static instance() {\n        if (!Preferences._instance) {\n            Preferences._instance = new Preferences();\n        }\n\n        return Preferences._instance;\n    }\n\n    constructor() {\n        this.path = \"preferences.json\";\n        this.data = {};\n    }\n\n    load() {\n        logger.i(\"Loading preferences...\");\n\n        this.data = {};\n\n        return new Promise((resolve, reject) => {\n            storage.exists(this.path)\n                .then(exists => {\n                    if (exists) {\n                        return storage.readText(this.path).then(content => {\n                            logger.i(\"Preferences:\", content);\n                            try {\n                                this.data = JSON.parse(content);\n                            } catch (e) {}\n                            resolve(this);\n                        })\n                    } else {\n                        resolve(this);\n                    }\n                })\n                .catch(e => reject(e))\n        });\n    }\n\n    get(key) {\n        return this.data[key];\n    }\n\n    set(key, value) {\n        this.data[key] = value;\n    }\n\n    save() {\n        logger.i(\"Saving preferences\", JSON.stringify(this.data));\n        return new Promise((resolve, reject) => {\n            storage.writeText(this.path, JSON.stringify(this.data))\n                .then(() => {\n                    resolve();\n                })\n                .catch(e => reject(e))\n        });\n    }\n\n    clear() {\n        this.data = {};\n    }\n}\n\nexports.Preferences = Preferences;\n\nexports.load = function() {\n    return Preferences.instance().load();\n};\n\nexports.get = function(key) {\n    return Preferences.instance().get(key);\n};\n\nexports.set = function(key, value) {\n    return Preferences.instance().set(key, value);\n};\n\nexports.save = function() {\n    return Preferences.instance().save();\n};\n\nexports.clear = function() {\n    return Preferences.instance().clear();\n};","/*!\n * Copyright (c) 2010 Chris O'Hara <cohara87@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n(function(exports) {\n\n    var entities = {\n        '&nbsp;': '\\u00a0',\n        '&iexcl;': '\\u00a1',\n        '&cent;': '\\u00a2',\n        '&pound;': '\\u00a3',\n        '&curren;': '\\u20ac',\n        '&yen;': '\\u00a5',\n        '&brvbar;': '\\u0160',\n        '&sect;': '\\u00a7',\n        '&uml;': '\\u0161',\n        '&copy;': '\\u00a9',\n        '&ordf;': '\\u00aa',\n        '&laquo;': '\\u00ab',\n        '&not;': '\\u00ac',\n        '&shy;': '\\u00ad',\n        '&reg;': '\\u00ae',\n        '&macr;': '\\u00af',\n        '&deg;': '\\u00b0',\n        '&plusmn;': '\\u00b1',\n        '&sup2;': '\\u00b2',\n        '&sup3;': '\\u00b3',\n        '&acute;': '\\u017d',\n        '&micro;': '\\u00b5',\n        '&para;': '\\u00b6',\n        '&middot;': '\\u00b7',\n        '&cedil;': '\\u017e',\n        '&sup1;': '\\u00b9',\n        '&ordm;': '\\u00ba',\n        '&raquo;': '\\u00bb',\n        '&frac14;': '\\u0152',\n        '&frac12;': '\\u0153',\n        '&frac34;': '\\u0178',\n        '&iquest;': '\\u00bf',\n        '&Agrave;': '\\u00c0',\n        '&Aacute;': '\\u00c1',\n        '&Acirc;': '\\u00c2',\n        '&Atilde;': '\\u00c3',\n        '&Auml;': '\\u00c4',\n        '&Aring;': '\\u00c5',\n        '&AElig;': '\\u00c6',\n        '&Ccedil;': '\\u00c7',\n        '&Egrave;': '\\u00c8',\n        '&Eacute;': '\\u00c9',\n        '&Ecirc;': '\\u00ca',\n        '&Euml;': '\\u00cb',\n        '&Igrave;': '\\u00cc',\n        '&Iacute;': '\\u00cd',\n        '&Icirc;': '\\u00ce',\n        '&Iuml;': '\\u00cf',\n        '&ETH;': '\\u00d0',\n        '&Ntilde;': '\\u00d1',\n        '&Ograve;': '\\u00d2',\n        '&Oacute;': '\\u00d3',\n        '&Ocirc;': '\\u00d4',\n        '&Otilde;': '\\u00d5',\n        '&Ouml;': '\\u00d6',\n        '&times;': '\\u00d7',\n        '&Oslash;': '\\u00d8',\n        '&Ugrave;': '\\u00d9',\n        '&Uacute;': '\\u00da',\n        '&Ucirc;': '\\u00db',\n        '&Uuml;': '\\u00dc',\n        '&Yacute;': '\\u00dd',\n        '&THORN;': '\\u00de',\n        '&szlig;': '\\u00df',\n        '&agrave;': '\\u00e0',\n        '&aacute;': '\\u00e1',\n        '&acirc;': '\\u00e2',\n        '&atilde;': '\\u00e3',\n        '&auml;': '\\u00e4',\n        '&aring;': '\\u00e5',\n        '&aelig;': '\\u00e6',\n        '&ccedil;': '\\u00e7',\n        '&egrave;': '\\u00e8',\n        '&eacute;': '\\u00e9',\n        '&ecirc;': '\\u00ea',\n        '&euml;': '\\u00eb',\n        '&igrave;': '\\u00ec',\n        '&iacute;': '\\u00ed',\n        '&icirc;': '\\u00ee',\n        '&iuml;': '\\u00ef',\n        '&eth;': '\\u00f0',\n        '&ntilde;': '\\u00f1',\n        '&ograve;': '\\u00f2',\n        '&oacute;': '\\u00f3',\n        '&ocirc;': '\\u00f4',\n        '&otilde;': '\\u00f5',\n        '&ouml;': '\\u00f6',\n        '&divide;': '\\u00f7',\n        '&oslash;': '\\u00f8',\n        '&ugrave;': '\\u00f9',\n        '&uacute;': '\\u00fa',\n        '&ucirc;': '\\u00fb',\n        '&uuml;': '\\u00fc',\n        '&yacute;': '\\u00fd',\n        '&thorn;': '\\u00fe',\n        '&yuml;': '\\u00ff',\n        '&quot;': '\\u0022',\n        '&lt;': '\\u003c',\n        '&gt;': '\\u003e',\n        '&apos;': '\\u0027',\n        '&minus;': '\\u2212',\n        '&circ;': '\\u02c6',\n        '&tilde;': '\\u02dc',\n        '&Scaron;': '\\u0160',\n        '&lsaquo;': '\\u2039',\n        '&OElig;': '\\u0152',\n        '&lsquo;': '\\u2018',\n        '&rsquo;': '\\u2019',\n        '&ldquo;': '\\u201c',\n        '&rdquo;': '\\u201d',\n        '&bull;': '\\u2022',\n        '&ndash;': '\\u2013',\n        '&mdash;': '\\u2014',\n        '&trade;': '\\u2122',\n        '&scaron;': '\\u0161',\n        '&rsaquo;': '\\u203a',\n        '&oelig;': '\\u0153',\n        '&Yuml;': '\\u0178',\n        '&fnof;': '\\u0192',\n        '&Alpha;': '\\u0391',\n        '&Beta;': '\\u0392',\n        '&Gamma;': '\\u0393',\n        '&Delta;': '\\u0394',\n        '&Epsilon;': '\\u0395',\n        '&Zeta;': '\\u0396',\n        '&Eta;': '\\u0397',\n        '&Theta;': '\\u0398',\n        '&Iota;': '\\u0399',\n        '&Kappa;': '\\u039a',\n        '&Lambda;': '\\u039b',\n        '&Mu;': '\\u039c',\n        '&Nu;': '\\u039d',\n        '&Xi;': '\\u039e',\n        '&Omicron;': '\\u039f',\n        '&Pi;': '\\u03a0',\n        '&Rho;': '\\u03a1',\n        '&Sigma;': '\\u03a3',\n        '&Tau;': '\\u03a4',\n        '&Upsilon;': '\\u03a5',\n        '&Phi;': '\\u03a6',\n        '&Chi;': '\\u03a7',\n        '&Psi;': '\\u03a8',\n        '&Omega;': '\\u03a9',\n        '&alpha;': '\\u03b1',\n        '&beta;': '\\u03b2',\n        '&gamma;': '\\u03b3',\n        '&delta;': '\\u03b4',\n        '&epsilon;': '\\u03b5',\n        '&zeta;': '\\u03b6',\n        '&eta;': '\\u03b7',\n        '&theta;': '\\u03b8',\n        '&iota;': '\\u03b9',\n        '&kappa;': '\\u03ba',\n        '&lambda;': '\\u03bb',\n        '&mu;': '\\u03bc',\n        '&nu;': '\\u03bd',\n        '&xi;': '\\u03be',\n        '&omicron;': '\\u03bf',\n        '&pi;': '\\u03c0',\n        '&rho;': '\\u03c1',\n        '&sigmaf;': '\\u03c2',\n        '&sigma;': '\\u03c3',\n        '&tau;': '\\u03c4',\n        '&upsilon;': '\\u03c5',\n        '&phi;': '\\u03c6',\n        '&chi;': '\\u03c7',\n        '&psi;': '\\u03c8',\n        '&omega;': '\\u03c9',\n        '&thetasym;': '\\u03d1',\n        '&upsih;': '\\u03d2',\n        '&piv;': '\\u03d6',\n        '&ensp;': '\\u2002',\n        '&emsp;': '\\u2003',\n        '&thinsp;': '\\u2009',\n        '&zwnj;': '\\u200c',\n        '&zwj;': '\\u200d',\n        '&lrm;': '\\u200e',\n        '&rlm;': '\\u200f',\n        '&sbquo;': '\\u201a',\n        '&bdquo;': '\\u201e',\n        '&dagger;': '\\u2020',\n        '&Dagger;': '\\u2021',\n        '&hellip;': '\\u2026',\n        '&permil;': '\\u2030',\n        '&prime;': '\\u2032',\n        '&Prime;': '\\u2033',\n        '&oline;': '\\u203e',\n        '&frasl;': '\\u2044',\n        '&euro;': '\\u20ac',\n        '&image;': '\\u2111',\n        '&weierp;': '\\u2118',\n        '&real;': '\\u211c',\n        '&alefsym;': '\\u2135',\n        '&larr;': '\\u2190',\n        '&uarr;': '\\u2191',\n        '&rarr;': '\\u2192',\n        '&darr;': '\\u2193',\n        '&harr;': '\\u2194',\n        '&crarr;': '\\u21b5',\n        '&lArr;': '\\u21d0',\n        '&uArr;': '\\u21d1',\n        '&rArr;': '\\u21d2',\n        '&dArr;': '\\u21d3',\n        '&hArr;': '\\u21d4',\n        '&forall;': '\\u2200',\n        '&part;': '\\u2202',\n        '&exist;': '\\u2203',\n        '&empty;': '\\u2205',\n        '&nabla;': '\\u2207',\n        '&isin;': '\\u2208',\n        '&notin;': '\\u2209',\n        '&ni;': '\\u220b',\n        '&prod;': '\\u220f',\n        '&sum;': '\\u2211',\n        '&lowast;': '\\u2217',\n        '&radic;': '\\u221a',\n        '&prop;': '\\u221d',\n        '&infin;': '\\u221e',\n        '&ang;': '\\u2220',\n        '&and;': '\\u2227',\n        '&or;': '\\u2228',\n        '&cap;': '\\u2229',\n        '&cup;': '\\u222a',\n        '&int;': '\\u222b',\n        '&there4;': '\\u2234',\n        '&sim;': '\\u223c',\n        '&cong;': '\\u2245',\n        '&asymp;': '\\u2248',\n        '&ne;': '\\u2260',\n        '&equiv;': '\\u2261',\n        '&le;': '\\u2264',\n        '&ge;': '\\u2265',\n        '&sub;': '\\u2282',\n        '&sup;': '\\u2283',\n        '&nsub;': '\\u2284',\n        '&sube;': '\\u2286',\n        '&supe;': '\\u2287',\n        '&oplus;': '\\u2295',\n        '&otimes;': '\\u2297',\n        '&perp;': '\\u22a5',\n        '&sdot;': '\\u22c5',\n        '&lceil;': '\\u2308',\n        '&rceil;': '\\u2309',\n        '&lfloor;': '\\u230a',\n        '&rfloor;': '\\u230b',\n        '&lang;': '\\u2329',\n        '&rang;': '\\u232a',\n        '&loz;': '\\u25ca',\n        '&spades;': '\\u2660',\n        '&clubs;': '\\u2663',\n        '&hearts;': '\\u2665',\n        '&diams;': '\\u2666'\n    };\n\n    var decode = function (str) {\n        if (!~str.indexOf('&')) return str;\n\n        //Decode literal EntitiesApi\n        for (var i in entities) {\n            str = str.replace(new RegExp(i, 'g'), entities[i]);\n        }\n\n        //Decode hex EntitiesApi\n        str = str.replace(/&#x(0*[0-9a-f]{2,5});?/gi, function (m, code) {\n            return String.fromCharCode(parseInt(+code, 16));\n        });\n\n        //Decode numeric EntitiesApi\n        str = str.replace(/&#([0-9]{2,4});?/gi, function (m, code) {\n            return String.fromCharCode(+code);\n        });\n\n        str = str.replace(/&amp;/g, '&');\n\n        return str;\n    }\n\n    var encode = function (str) {\n        str = str.replace(/&/g, '&amp;');\n\n        //IE doesn't accept &apos;\n        str = str.replace(/'/g, '&#39;');\n\n        //Encode literal EntitiesApi\n        for (var i in entities) {\n            str = str.replace(new RegExp(entities[i], 'g'), i);\n        }\n\n        return str;\n    }\n\n    exports.entities = {\n        encode: encode,\n        decode: decode\n    }\n\n    //This module is adapted from the CodeIgniter framework\n    //The license is available at http://codeigniter.com/\n\n    var never_allowed_str = {\n        'document.cookie':              '[removed]',\n        'document.write':               '[removed]',\n        '.parentNode':                  '[removed]',\n        '.innerHTML':                   '[removed]',\n        'window.location':              '[removed]',\n        '-moz-binding':                 '[removed]',\n        '<!--':                         '&lt;!--',\n        '-->':                          '--&gt;',\n        '<![CDATA[':                    '&lt;![CDATA['\n    };\n\n    var never_allowed_regex = {\n        'javascript\\\\s*:':              '[removed]',\n        'expression\\\\s*(\\\\(|&\\\\#40;)':  '[removed]',\n        'vbscript\\\\s*:':                '[removed]',\n        'Redirect\\\\s+302':              '[removed]'\n    };\n\n    var non_displayables = [\n        /%0[0-8bcef]/g,         // url encoded 00-08, 11, 12, 14, 15\n        /%1[0-9a-f]/g,          // url encoded 16-31\n        /[\\x00-\\x08]/g,         // 00-08\n        /\\x0b/g, /\\x0c/g,       // 11,12\n        /[\\x0e-\\x1f]/g,         // 14-31\n    ];\n\n    var compact_words = [\n        'javascript', 'expression', 'vbscript',\n        'script', 'applet', 'alert', 'document',\n        'write', 'cookie', 'window'\n    ];\n\n    exports.xssClean = function(str, is_image) {\n\n        //Recursively clean objects and arrays\n        if (str instanceof Array || typeof str === 'object') {\n            for (var i in str) {\n                str[i] = exports.xssClean(str[i]);\n            }\n            return str;\n        }\n\n        //Remove invisible characters\n        str = remove_invisible_characters(str);\n\n        //Protect query string variables in URLs => 901119URL5918AMP18930PROTECT8198\n        str = str.replace(/\\&([a-z\\_0-9]+)\\=([a-z\\_0-9]+)/i, xss_hash() + '$1=$2');\n\n        //Validate standard character EntitiesApi - add a semicolon if missing.  We do this to enable\n        //the conversion of EntitiesApi to ASCII later.\n        str = str.replace(/(&\\#?[0-9a-z]{2,})([\\x00-\\x20])*;?/i, '$1;$2');\n\n        //Validate UTF16 two byte encoding (x00) - just as above, adds a semicolon if missing.\n        str = str.replace(/(&\\#x?)([0-9A-F]+);?/i, '$1;$2');\n\n        //Un-protect query string variables\n        str = str.replace(xss_hash(), '&');\n\n        //Decode just in case stuff like this is submitted:\n        //<a href=\"http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\">Google</a>\n        str = decodeURIComponent(str);\n\n        //Convert character EntitiesApi to ASCII - this permits our tests below to work reliably.\n        //We only convert EntitiesApi that are within tags since these are the ones that will pose security problems.\n        str = str.replace(/[a-z]+=([\\'\\\"]).*?\\\\1/gi, function(m, match) {\n            return m.replace(match, convert_attribute(match));\n        });\n\n        //Remove invisible characters again\n        str = remove_invisible_characters(str);\n\n        //Convert tabs to spaces\n        str = str.replace('\\t', ' ');\n\n        //Captured the converted string for later comparison\n        var converted_string = str;\n\n        //Remove strings that are never allowed\n        for (var i in never_allowed_str) {\n            str = str.replace(i, never_allowed_str[i]);\n        }\n\n        //Remove regex patterns that are never allowed\n        for (var i in never_allowed_regex) {\n            str = str.replace(new RegExp(i, 'i'), never_allowed_regex[i]);\n        }\n\n        //Compact any exploded words like:  j a v a s c r i p t\n        // We only want to do this when it is followed by a non-word character\n        for (var i in compact_words) {\n            var spacified = compact_words[i].split('').join('\\\\s*')+'\\\\s*';\n\n            str = str.replace(new RegExp('('+spacified+')(\\\\W)', 'ig'), function(m, compat, after) {\n                return compat.replace(/\\s+/g, '') + after;\n            });\n        }\n\n        //Remove disallowed Javascript in links or img tags\n        do {\n            var original = str;\n\n            if (str.match(/<a/i)) {\n                str = str.replace(/<a\\\\s+([^>]*?)(>|$)/gi, function(m, attributes, end_tag) {\n                    attributes = filter_attributes(attributes.replace('<','').replace('>',''));\n                    return m.replace(attributes, attributes.replace(/href=.*?(alert\\(|alert&\\#40;|javascript\\:|charset\\=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\\\s*,)/gi, ''));\n                });\n            }\n\n            if (str.match(/<img/i)) {\n                str = str.replace(/<img\\\\s+([^>]*?)(\\\\s?\\/?>|$)/gi, function(m, attributes, end_tag) {\n                    attributes = filter_attributes(attributes.replace('<','').replace('>',''));\n                    return m.replace(attributes, attributes.replace(/src=.*?(alert\\(|alert&\\#40;|javascript\\:|charset\\=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\\\s*,)/gi, ''));\n                });\n            }\n\n            if (str.match(/script/i) || str.match(/xss/i)) {\n                str = str.replace(/<(\\/*)(script|xss)(.*?)\\>/gi, '[removed]');\n            }\n\n        } while(original != str);\n\n        //Remove JavaScript Event Handlers - Note: This code is a little blunt.  It removes the event\n        //handler and anything up to the closing >, but it's unlikely to be a problem.\n        event_handlers = ['[^a-z_\\-]on\\w*'];\n\n        //Adobe Photoshop puts XML metadata into JFIF images, including namespacing,\n        //so we have to allow this for images\n        if (!is_image) {\n            event_handlers.push('xmlns');\n        }\n\n        str = str.replace(new RegExp(\"<([^><]+?)(\"+event_handlers.join('|')+\")(\\\\s*=\\\\s*[^><]*)([><]*)\", 'i'), '<$1$4');\n\n        //Sanitize naughty HTML elements\n        //If a tag containing any of the words in the list\n        //below is found, the tag gets converted to EntitiesApi.\n        //So this: <blink>\n        //Becomes: &lt;blink&gt;\n        naughty = 'alert|applet|audio|basefont|base|behavior|bgsound|blink|body|embed|expression|form|frameset|frame|head|html|ilayer|iframe|input|isindex|layer|link|meta|object|plaintext|style|script|textarea|title|video|xml|xss';\n        str = str.replace(new RegExp('<(/*\\\\s*)('+naughty+')([^><]*)([><]*)', 'gi'), function(m, a, b, c, d) {\n            return '&lt;' + a + b + c + d.replace('>','&gt;').replace('<','&lt;');\n        });\n\n        //Sanitize naughty scripting elements Similar to above, only instead of looking for\n        //tags it looks for PHP and JavaScript commands that are disallowed.  Rather than removing the\n        //code, it simply converts the parenthesis to EntitiesApi rendering the code un-executable.\n        //For example:  eval('some code')\n        //Becomes:      eval&#40;'some code'&#41;\n        str = str.replace(/(alert|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\\\s*)\\((.*?)\\)/gi, '$1$2&#40;$3&#41;');\n\n        //This adds a bit of extra precaution in case something got through the above filters\n        for (var i in never_allowed_str) {\n            str = str.replace(i, never_allowed_str[i]);\n        }\n        for (var i in never_allowed_regex) {\n            str = str.replace(new RegExp(i, 'i'), never_allowed_regex[i]);\n        }\n\n        //Images are handled in a special way\n        if (is_image && str !== converted_string) {\n            throw new Error('Image may contain XSS');\n        }\n\n        return str;\n    }\n\n    function remove_invisible_characters(str) {\n        for (var i in non_displayables) {\n            str = str.replace(non_displayables[i], '');\n        }\n        return str;\n    }\n\n    function xss_hash() {\n        //TODO: Create a random hash\n        return '!*$^#(@*#&';\n    }\n\n    function convert_attribute(str) {\n        return str.replace('>','&gt;').replace('<','&lt;').replace('\\\\','\\\\\\\\');\n    }\n\n    //Filter Attributes - filters tag attributes for consistency and safety\n    function filter_attributes(str) {\n        out = '';\n\n        str.replace(/\\\\s*[a-z\\-]+\\\\s*=\\\\s*(?:\\042|\\047)(?:[^\\\\1]*?)\\\\1/gi, function(m) {\n            $out += m.replace(/\\/\\*.*?\\*\\//g, '');\n        });\n\n        return out;\n    }\n\n    var Validator = exports.Validator = function() {}\n\n    Validator.prototype.check = function(str, fail_msg) {\n        this.str = str == null || (isNaN(str) && str.length == undefined) ? '' : str+'';\n        this.msg = fail_msg;\n        this._errors = [];\n        return this;\n    }\n\n    //Create some aliases - may help code readability\n    Validator.prototype.validate = Validator.prototype.check;\n    Validator.prototype.assert = Validator.prototype.check;\n\n    Validator.prototype.error = function(msg) {\n        throw new Error(msg);\n    }\n\n    Validator.prototype.isEmail = function() {\n        if (!this.str.match(/^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/)) {\n            return this.error(this.msg || 'Invalid email');\n        }\n        return this;\n    }\n\n    //Will work against Visa, MasterCard, American Express, Discover, Diners Club, and JCB card numbering formats\n    Validator.prototype.isCreditCard = function() {\n        this.str.replace(/[^0-9]+/g, ''); //remove all dashes, spaces, etc.\n        if (!this.str.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n            return this.error(this.msg || 'Invalid credit card');\n        }\n        return this;\n    }\n\n    Validator.prototype.isUrl = function() {\n        if (!this.str.match(/^(?:(?:ht|f)tp(?:s?)\\:\\/\\/|~\\/|\\/)?(?:\\w+:\\w+@)?((?:(?:[-\\w\\d{1-3}]+\\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\\.uk|ac\\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2}))|((\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)(\\.(\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)){3}))(?::[\\d]{1,5})?(?:(?:(?:\\/(?:[-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?(?:(?:\\?(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)(?:&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*(?:#(?:[-\\w~!$ |\\/.,*:;=]|%[a-f\\d]{2})*)?$/)) {\n            return this.error(this.msg || 'Invalid URL');\n        }\n        return this;\n    }\n\n    Validator.prototype.isIP = function() {\n        if (!this.str.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)) {\n            return this.error(this.msg || 'Invalid IP');\n        }\n        return this;\n    }\n\n    Validator.prototype.isAlpha = function() {\n        if (!this.str.match(/^[a-zA-Z]+$/)) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.isAlphanumeric = function() {\n        if (!this.str.match(/^[a-zA-Z0-9]+$/)) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.isNumeric = function() {\n        if (!this.str.match(/^-?[0-9]+$/)) {\n            return this.error(this.msg || 'Invalid number');\n        }\n        return this;\n    }\n\n    Validator.prototype.isLowercase = function() {\n        if (!this.str.match(/^[a-z0-9]+$/)) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.isUppercase = function() {\n        if (!this.str.match(/^[A-Z0-9]+$/)) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.isInt = function() {\n        if (!this.str.match(/^(?:-?(?:0|[1-9][0-9]*))$/)) {\n            return this.error(this.msg || 'Invalid integer');\n        }\n        return this;\n    }\n\n    Validator.prototype.isDecimal = function() {\n        if (!this.str.match(/^(?:-?(?:0|[1-9][0-9]*))?(?:\\.[0-9]*)?$/)) {\n            return this.error(this.msg || 'Invalid decimal');\n        }\n        return this;\n    }\n\n    Validator.prototype.isFloat = function() {\n        return this.isDecimal();\n    }\n\n    Validator.prototype.notNull = function() {\n        if (this.str === '') {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.isNull = function() {\n        if (this.str !== '') {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.notEmpty = function() {\n        if (this.str.match(/^[\\s\\t\\r\\n]*$/)) {\n            return this.error(this.msg || 'String is whitespace');\n        }\n        return this;\n    }\n\n    Validator.prototype.equals = function(equals) {\n        if (this.str != equals) {\n            return this.error(this.msg || 'Not equal');\n        }\n        return this;\n    }\n\n    Validator.prototype.isFiscalCode = function(fiscalCode) {\n\n        if(!fiscalCode || fiscalCode == \"\")\n            return this.error(this.msg || 'Not fiscal code');\n\n        var cf = fiscalCode.toUpperCase();\n\n        var cfReg = /^[A-Z]{6}\\d{2}[A-Z]\\d{2}[A-Z]\\d{3}[A-Z]$/;\n\n        if (!cfReg.test(cf))\n            return this.error(this.msg || 'Not fiscal code');\n\n        var set1 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var set2 = \"ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var setpari = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var setdisp = \"BAKPLCQDREVOSFTGUHMINJWZYX\";\n\n        var s = 0;\n\n        for( var i = 1; i <= 13; i += 2 )\n            s += setpari.indexOf( set2.charAt( set1.indexOf( cf.charAt(i) )));\n\n        for( var i = 0; i <= 14; i += 2 )\n            s += setdisp.indexOf( set2.charAt( set1.indexOf( cf.charAt(i) )));\n\n        if ( s%26 != cf.charCodeAt(15)-'A'.charCodeAt(0) )\n            return this.error(this.msg || 'Not fiscal code');\n\n        return this;\n\n    }\n\n    Validator.prototype.contains = function(str) {\n        if (this.str.indexOf(str) === -1) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.notContains = function(str) {\n        if (this.str.indexOf(str) >= 0) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.regex = Validator.prototype.is = function(pattern, modifiers) {\n        if (typeof pattern !== 'function') {\n            pattern = new RegExp(pattern, modifiers);\n        }\n        if (! this.str.match(pattern)) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.notRegex = Validator.prototype.not = function(pattern, modifiers) {\n        if (typeof pattern !== 'function') {\n            pattern = new RegExp(pattern, modifiers);\n        }\n        if (this.str.match(pattern)) {\n            this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n    Validator.prototype.len = function(min, max) {\n        if (this.str.length < min) {\n            this.error(this.msg || 'String is too small');\n        }\n        if (typeof max !== undefined && this.str.length > max) {\n            return this.error(this.msg || 'String is too large');\n        }\n        return this;\n    }\n\n    //Thanks to github.com/sreuter for the idea.\n    Validator.prototype.isUUID = function(version) {\n        if (version == 3 || version == 'v3') {\n            pattern = /[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\n        } else if (version == 4 || version == 'v4') {\n            pattern = /[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\n        } else {\n            pattern = /[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\n        }\n        if (!this.str.match(pattern)) {\n            return this.error(this.msg || 'Not a UUID');\n        }\n        return this;\n    }\n\n    Validator.prototype.isDate = function() {\n        var intDate = Date.parse(this.str);\n        if (isNaN(intDate)) {\n            return this.error(this.msg || 'Not a date');\n        }\n        return this;\n    }\n\n    Validator.prototype.in = function(options) {\n        if (options && typeof options.indexOf === 'function') {\n            if (!~options.indexOf(this.str)) {\n                return this.error(this.msg || 'Unexpected value');\n            }\n            return this;\n        } else {\n            return this.error(this.msg || 'Invalid in() argument');\n        }\n    }\n\n    Validator.prototype.notIn = function(options) {\n        if (options && typeof options.indexOf === 'function') {\n            if (options.indexOf(this.str) !== -1) {\n                return this.error(this.msg || 'Unexpected value');\n            }\n            return this;\n        } else {\n            return this.error(this.msg || 'Invalid notIn() argument');\n        }\n    }\n\n    Validator.prototype.min = function(val) {\n        var number = parseFloat(this.str);\n\n        if (!isNaN(number) && number < val) {\n            return this.error(this.msg || 'Invalid number');\n        }\n\n        return this;\n    }\n\n    Validator.prototype.max = function(val) {\n        var number = parseFloat(this.str);\n        if (!isNaN(number) && number > val) {\n            return this.error(this.msg || 'Invalid number');\n        }\n        return this;\n    }\n\n    Validator.prototype.isArray = function() {\n        if (!Array.isArray(this.str)) {\n            return this.error(this.msg || 'Not an array');\n        }\n        return this;\n    }\n\n    var Filter = exports.Filter = function() {}\n\n    var whitespace = '\\\\r\\\\n\\\\t\\\\s';\n\n    Filter.prototype.modify = function(str) {\n        this.str = str;\n    }\n\n    //Create some aliases - may help code readability\n    Filter.prototype.convert = Filter.prototype.sanitize = function(str) {\n        this.str = str;\n        return this;\n    }\n\n    Filter.prototype.xss = function(is_image) {\n        this.modify(exports.xssClean(this.str, is_image));\n        return this.str;\n    }\n\n    Filter.prototype.entityDecode = function() {\n        this.modify(decode(this.str));\n        return this.str;\n    }\n\n    Filter.prototype.entityEncode = function() {\n        this.modify(encode(this.str));\n        return this.str;\n    }\n\n    Filter.prototype.ltrim = function(chars) {\n        chars = chars || whitespace;\n        this.modify(this.str.replace(new RegExp('^['+chars+']+', 'g'), ''));\n        return this.str;\n    }\n\n    Filter.prototype.rtrim = function(chars) {\n        chars = chars || whitespace;\n        this.modify(this.str.replace(new RegExp('['+chars+']+$', 'g'), ''));\n        return this.str;\n    }\n\n    Filter.prototype.trim = function(chars) {\n        if(this.str) {\n            chars = chars || whitespace;\n            this.modify(this.str.replace(new RegExp('^['+chars+']+|['+chars+']+$', 'g'), ''));\n        }\n        return this.str;\n    }\n\n    Filter.prototype.ifNull = function(replace) {\n        if (!this.str || this.str === '') {\n            this.modify(replace);\n        }\n        return this.str;\n    }\n\n    Filter.prototype.toFloat = function() {\n        this.modify(parseFloat(this.str));\n        return this.str;\n    }\n\n    Filter.prototype.toLowerCase = function() {\n        this.modify(this.str.toLowerCase());\n        return this.str;\n    }\n\n    Filter.prototype.toUpperCase = function() {\n        this.modify(this.str.toUpperCase());\n        return this.str;\n    }\n\n    Filter.prototype.toInt = function(radix) {\n        radix = radix || 10;\n        this.modify(parseInt(this.str), radix);\n        return this.str;\n    }\n\n    //Any strings with length > 0 (except for '0' and 'false') are considered true,\n    //all other strings are false\n    Filter.prototype.toBoolean = function() {\n        if (!this.str || this.str == '0' || this.str == 'false' || this.str == '') {\n            this.modify(false);\n        } else {\n            this.modify(true);\n        }\n        return this.str;\n    }\n\n    //String must be equal to '1' or 'true' to be considered true, all other strings\n    //are false\n    Filter.prototype.toBooleanStrict = function() {\n        if (this.str == '1' || this.str == 'true') {\n            this.modify(true);\n        } else {\n            this.modify(false);\n        }\n        return this.str;\n    }\n\n    //Quick access methods\n    exports.sanitize = exports.convert = function(str) {\n        var filter = new exports.Filter();\n        return filter.sanitize(str);\n    }\n\n    exports.check = exports.validate = exports.assert = function(str, fail_msg) {\n        var validator = new exports.Validator();\n        return validator.check(str, fail_msg);\n    }\n\n})(typeof(exports) === 'undefined' ? window : exports);\n","import M from \"../strings\"\n\nexport default [\n    {\n        icon: \"zmdi zmdi-shield-security\",\n        text: M(\"security\"),\n        roles: [\"admin\"],\n        children: [\n            {\n                icon: \"zmdi zmdi-accounts-alt\",\n                text: M(\"users\"),\n                href: \"/#/entities/user?grid=users\",\n                permissions: [\"user:list\"]\n            },\n            {\n                icon: \"zmdi zmdi-key\",\n                text: M(\"roles\"),\n                href: \"/#/entities/role?grid=roles\",\n                permissions: [\"role:list\"]\n            }\n            // ,{\n            //     icon: \"zmdi zmdi-accounts-alt\",\n            //     text: M(\"entityRevisionSettings\"),\n            //     href: \"/#/entities/single/revisionSettings\",\n            //     permissions: [\"entityRevisionSettings:edit\"]\n            // }\n        ]\n    }\n]","\"use strict\";\n\nrequire(\"./noConflict\");\n\nfunction _global() {\n  const data = _interopRequireDefault(require(\"core-js/library/fn/global\"));\n\n  _global = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (_global().default._babelPolyfill && typeof console !== \"undefined\" && console.warn) {\n  console.warn(\"@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended \" + \"and may have consequences if different versions of the polyfills are applied sequentially. \" + \"If you do need to load the polyfill more than once, use @babel/polyfill/noConflict \" + \"instead to bypass the warning.\");\n}\n\n_global().default._babelPolyfill = true;","\"use strict\";\n\nrequire(\"core-js/es6\");\n\nrequire(\"core-js/fn/array/includes\");\n\nrequire(\"core-js/fn/array/flat-map\");\n\nrequire(\"core-js/fn/string/pad-start\");\n\nrequire(\"core-js/fn/string/pad-end\");\n\nrequire(\"core-js/fn/string/trim-start\");\n\nrequire(\"core-js/fn/string/trim-end\");\n\nrequire(\"core-js/fn/symbol/async-iterator\");\n\nrequire(\"core-js/fn/object/get-own-property-descriptors\");\n\nrequire(\"core-js/fn/object/values\");\n\nrequire(\"core-js/fn/object/entries\");\n\nrequire(\"core-js/fn/promise/finally\");\n\nrequire(\"core-js/web\");\n\nrequire(\"regenerator-runtime/runtime\");","require('../modules/es6.symbol');\nrequire('../modules/es6.object.create');\nrequire('../modules/es6.object.define-property');\nrequire('../modules/es6.object.define-properties');\nrequire('../modules/es6.object.get-own-property-descriptor');\nrequire('../modules/es6.object.get-prototype-of');\nrequire('../modules/es6.object.keys');\nrequire('../modules/es6.object.get-own-property-names');\nrequire('../modules/es6.object.freeze');\nrequire('../modules/es6.object.seal');\nrequire('../modules/es6.object.prevent-extensions');\nrequire('../modules/es6.object.is-frozen');\nrequire('../modules/es6.object.is-sealed');\nrequire('../modules/es6.object.is-extensible');\nrequire('../modules/es6.object.assign');\nrequire('../modules/es6.object.is');\nrequire('../modules/es6.object.set-prototype-of');\nrequire('../modules/es6.object.to-string');\nrequire('../modules/es6.function.bind');\nrequire('../modules/es6.function.name');\nrequire('../modules/es6.function.has-instance');\nrequire('../modules/es6.parse-int');\nrequire('../modules/es6.parse-float');\nrequire('../modules/es6.number.constructor');\nrequire('../modules/es6.number.to-fixed');\nrequire('../modules/es6.number.to-precision');\nrequire('../modules/es6.number.epsilon');\nrequire('../modules/es6.number.is-finite');\nrequire('../modules/es6.number.is-integer');\nrequire('../modules/es6.number.is-nan');\nrequire('../modules/es6.number.is-safe-integer');\nrequire('../modules/es6.number.max-safe-integer');\nrequire('../modules/es6.number.min-safe-integer');\nrequire('../modules/es6.number.parse-float');\nrequire('../modules/es6.number.parse-int');\nrequire('../modules/es6.math.acosh');\nrequire('../modules/es6.math.asinh');\nrequire('../modules/es6.math.atanh');\nrequire('../modules/es6.math.cbrt');\nrequire('../modules/es6.math.clz32');\nrequire('../modules/es6.math.cosh');\nrequire('../modules/es6.math.expm1');\nrequire('../modules/es6.math.fround');\nrequire('../modules/es6.math.hypot');\nrequire('../modules/es6.math.imul');\nrequire('../modules/es6.math.log10');\nrequire('../modules/es6.math.log1p');\nrequire('../modules/es6.math.log2');\nrequire('../modules/es6.math.sign');\nrequire('../modules/es6.math.sinh');\nrequire('../modules/es6.math.tanh');\nrequire('../modules/es6.math.trunc');\nrequire('../modules/es6.string.from-code-point');\nrequire('../modules/es6.string.raw');\nrequire('../modules/es6.string.trim');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/es6.string.code-point-at');\nrequire('../modules/es6.string.ends-with');\nrequire('../modules/es6.string.includes');\nrequire('../modules/es6.string.repeat');\nrequire('../modules/es6.string.starts-with');\nrequire('../modules/es6.string.anchor');\nrequire('../modules/es6.string.big');\nrequire('../modules/es6.string.blink');\nrequire('../modules/es6.string.bold');\nrequire('../modules/es6.string.fixed');\nrequire('../modules/es6.string.fontcolor');\nrequire('../modules/es6.string.fontsize');\nrequire('../modules/es6.string.italics');\nrequire('../modules/es6.string.link');\nrequire('../modules/es6.string.small');\nrequire('../modules/es6.string.strike');\nrequire('../modules/es6.string.sub');\nrequire('../modules/es6.string.sup');\nrequire('../modules/es6.date.now');\nrequire('../modules/es6.date.to-json');\nrequire('../modules/es6.date.to-iso-string');\nrequire('../modules/es6.date.to-string');\nrequire('../modules/es6.date.to-primitive');\nrequire('../modules/es6.array.is-array');\nrequire('../modules/es6.array.from');\nrequire('../modules/es6.array.of');\nrequire('../modules/es6.array.join');\nrequire('../modules/es6.array.slice');\nrequire('../modules/es6.array.sort');\nrequire('../modules/es6.array.for-each');\nrequire('../modules/es6.array.map');\nrequire('../modules/es6.array.filter');\nrequire('../modules/es6.array.some');\nrequire('../modules/es6.array.every');\nrequire('../modules/es6.array.reduce');\nrequire('../modules/es6.array.reduce-right');\nrequire('../modules/es6.array.index-of');\nrequire('../modules/es6.array.last-index-of');\nrequire('../modules/es6.array.copy-within');\nrequire('../modules/es6.array.fill');\nrequire('../modules/es6.array.find');\nrequire('../modules/es6.array.find-index');\nrequire('../modules/es6.array.species');\nrequire('../modules/es6.array.iterator');\nrequire('../modules/es6.regexp.constructor');\nrequire('../modules/es6.regexp.exec');\nrequire('../modules/es6.regexp.to-string');\nrequire('../modules/es6.regexp.flags');\nrequire('../modules/es6.regexp.match');\nrequire('../modules/es6.regexp.replace');\nrequire('../modules/es6.regexp.search');\nrequire('../modules/es6.regexp.split');\nrequire('../modules/es6.promise');\nrequire('../modules/es6.map');\nrequire('../modules/es6.set');\nrequire('../modules/es6.weak-map');\nrequire('../modules/es6.weak-set');\nrequire('../modules/es6.typed.array-buffer');\nrequire('../modules/es6.typed.data-view');\nrequire('../modules/es6.typed.int8-array');\nrequire('../modules/es6.typed.uint8-array');\nrequire('../modules/es6.typed.uint8-clamped-array');\nrequire('../modules/es6.typed.int16-array');\nrequire('../modules/es6.typed.uint16-array');\nrequire('../modules/es6.typed.int32-array');\nrequire('../modules/es6.typed.uint32-array');\nrequire('../modules/es6.typed.float32-array');\nrequire('../modules/es6.typed.float64-array');\nrequire('../modules/es6.reflect.apply');\nrequire('../modules/es6.reflect.construct');\nrequire('../modules/es6.reflect.define-property');\nrequire('../modules/es6.reflect.delete-property');\nrequire('../modules/es6.reflect.enumerate');\nrequire('../modules/es6.reflect.get');\nrequire('../modules/es6.reflect.get-own-property-descriptor');\nrequire('../modules/es6.reflect.get-prototype-of');\nrequire('../modules/es6.reflect.has');\nrequire('../modules/es6.reflect.is-extensible');\nrequire('../modules/es6.reflect.own-keys');\nrequire('../modules/es6.reflect.prevent-extensions');\nrequire('../modules/es6.reflect.set');\nrequire('../modules/es6.reflect.set-prototype-of');\nmodule.exports = require('../modules/_core');\n","require('../../modules/es7.array.flat-map');\nmodule.exports = require('../../modules/_core').Array.flatMap;\n","require('../../modules/es7.array.includes');\nmodule.exports = require('../../modules/_core').Array.includes;\n","require('../../modules/es7.object.entries');\nmodule.exports = require('../../modules/_core').Object.entries;\n","require('../../modules/es7.object.get-own-property-descriptors');\nmodule.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;\n","require('../../modules/es7.object.values');\nmodule.exports = require('../../modules/_core').Object.values;\n","'use strict';\nrequire('../../modules/es6.promise');\nrequire('../../modules/es7.promise.finally');\nmodule.exports = require('../../modules/_core').Promise['finally'];\n","require('../../modules/es7.string.pad-end');\nmodule.exports = require('../../modules/_core').String.padEnd;\n","require('../../modules/es7.string.pad-start');\nmodule.exports = require('../../modules/_core').String.padStart;\n","require('../../modules/es7.string.trim-right');\nmodule.exports = require('../../modules/_core').String.trimRight;\n","require('../../modules/es7.string.trim-left');\nmodule.exports = require('../../modules/_core').String.trimLeft;\n","require('../../modules/es7.symbol.async-iterator');\nmodule.exports = require('../../modules/_wks-ext').f('asyncIterator');\n","require('../modules/es7.global');\nmodule.exports = require('../modules/_core').global;\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var core = module.exports = { version: '2.6.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.G, { global: require('./_global') });\n","var cof = require('./_cof');\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","'use strict';\nvar at = require('./_string-at')(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","'use strict';\nvar redefineAll = require('./_redefine-all');\nvar getWeak = require('./_meta').getWeak;\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar createArrayMethod = require('./_array-methods');\nvar $has = require('./_has');\nvar validate = require('./_validate-collection');\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = require('./_fails');\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n","'use strict';\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = require('./_is-array');\nvar isObject = require('./_is-object');\nvar toLength = require('./_to-length');\nvar ctx = require('./_ctx');\nvar IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","'use strict';\n\nvar classof = require('./_classof');\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n","'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n","'use strict';\nvar $export = require('./_export');\nvar $every = require('./_array-methods')(4);\n\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar html = require('./_html');\nvar cof = require('./_cof');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = new Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","require('./_set-species')('Array');\n","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = require('./_export');\nvar toISOString = require('./_date-to-iso-string');\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","var TO_PRIMITIVE = require('./_wks')('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require('./_export');\n\n$export($export.P, 'Function', { bind: require('./_bind') });\n","'use strict';\nvar isObject = require('./_is-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar HAS_INSTANCE = require('./_wks')('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n","// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export');\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export');\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n","// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export');\nvar sign = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n","// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export');\nvar $expm1 = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n","// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { log1p: require('./_math-log1p') });\n","// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n","// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","// 20.1.2.2 Number.isFinite(number)\nvar $export = require('./_export');\nvar _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = require('./_export');\nvar isInteger = require('./_is-integer');\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","'use strict';\nvar $export = require('./_export');\nvar toInteger = require('./_to-integer');\nvar aNumberValue = require('./_a-number-value');\nvar repeat = require('./_string-repeat');\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !require('./_fails')(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $fails = require('./_fails');\nvar aNumberValue = require('./_a-number-value');\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = require('./_object-dp');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = require('./_export');\nvar gOPD = require('./_object-gopd').f;\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n","'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\nrequire('./_iter-create')(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = require('./_object-gopd');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = require('./_export');\nvar getProto = require('./_object-gpo');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n","// 26.1.10 Reflect.isExtensible(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });\n","// 26.1.12 Reflect.preventExtensions(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = require('./_export');\nvar setProto = require('./_set-proto');\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = require('./_object-dp');\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar createDesc = require('./_property-desc');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      dP.f(receiver, propertyKey, existingDescriptor);\n    } else dP.f(receiver, propertyKey, createDesc(0, V));\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","'use strict';\nvar regexpExec = require('./_regexp-exec');\nrequire('./_export')({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar sameValue = require('./_same-value');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative($search, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n","'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n","'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire('./_string-html')('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n","'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire('./_string-html')('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n","'use strict';\nvar $export = require('./_export');\nvar $at = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire('./_string-html')('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n","'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire('./_string-html')('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire('./_string-html')('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire('./_string-html')('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire('./_string-html')('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","'use strict';\nvar $export = require('./_export');\nvar $typed = require('./_typed');\nvar buffer = require('./_typed-buffer');\nvar anObject = require('./_an-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar isObject = require('./_is-object');\nvar ArrayBuffer = require('./_global').ArrayBuffer;\nvar speciesConstructor = require('./_species-constructor');\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","'use strict';\nvar global = require('./_global');\nvar each = require('./_array-methods')(0);\nvar redefine = require('./_redefine');\nvar meta = require('./_meta');\nvar assign = require('./_object-assign');\nvar weak = require('./_collection-weak');\nvar isObject = require('./_is-object');\nvar validate = require('./_validate-collection');\nvar NATIVE_WEAK_MAP = require('./_validate-collection');\nvar IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (NATIVE_WEAK_MAP && IS_IE11) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n","'use strict';\nvar weak = require('./_collection-weak');\nvar validate = require('./_validate-collection');\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\nrequire('./_collection')(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar aFunction = require('./_a-function');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatMap');\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimLeft', function ($trim) {\n  return function trimLeft() {\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimRight', function ($trim) {\n  return function trimRight() {\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n","require('./_wks-define')('asyncIterator');\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","// ie9- setTimeout & setInterval additional parameters fix\nvar global = require('./_global');\nvar $export = require('./_export');\nvar userAgent = require('./_user-agent');\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n","require('../modules/web.timers');\nrequire('../modules/web.immediate');\nrequire('../modules/web.dom.iterable');\nmodule.exports = require('../modules/_core');\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if (typeof exports != 'undefined' && !exports.nodeType) {\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define == 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}());\n","\"use strict\"\n\nimport * as aj from \"./aj\";\n\nlet loaderCounter = 0\nlet unobstrusiveLoaderCounter = 0\n\nexport function alert(title, message, type) {\n    return aj.exec(\"Alert\", \"alert\", {title, message, type}, function() {}).then(() => {}).catch(() => {})\n}\n\nexport function confirm() {\n    return new Promise((resolve, reject) => {\n        let callback = (confirmed) => {\n            if (confirmed) {\n                resolve()\n            } else {\n                reject()\n            }\n        }\n\n        aj.exec(\"Alert\", \"confirm\", {}, callback).then(() => {}).catch(() => reject())\n    })\n}\n\nexport function showLoader(message = \"\") {\n    if (loaderCounter <= 0) {\n        aj.exec(\"Loader\", \"show\", {message}, function() {}).then(() => {}).catch(() => {})\n    }\n\n    loaderCounter++\n}\n\nexport function hideLoader() {\n    loaderCounter--\n\n    if (loaderCounter <= 0) {\n        aj.exec(\"Loader\", \"hide\", {}, function () {}).then(() => {}).catch(() => {})\n    }\n\n}\n\nexport function showUnobtrusiveLoader(message = \"\") {\n    if (unobstrusiveLoaderCounter <= 0) {\n        aj.exec(\"Loader\", \"showUnobtrusive\", {message}, function() {}).then(() => {}).catch(() => {})\n    }\n\n    unobstrusiveLoaderCounter++\n}\n\nexport function hideUnobtrusiveLoader() {\n    unobstrusiveLoaderCounter--\n\n    if (unobstrusiveLoaderCounter <= 0) {\n        aj.exec(\"Loader\", \"hideUnobtrusive\", {}, function () {}).then(() => {}).catch(() => {})\n    }\n\n}\n\nexport function toast(message) {\n    aj.exec(\"Toast\", \"show\", {message}, function() {}).then(() => {}).catch(() => {})\n}","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {completed, failed} from \"../utils/ajex\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {ACCOUNT} from \"./types\";\n\n\nexport const AccountStore = aj.createStore(ACCOUNT, (state = {activationCode: \"\"}, action) => {\n\n    switch (action.type) {\n        case actions.REGISTER:\n            return _.assign(state, { registered: false, error: false });\n\n        case completed(actions.REGISTER):\n            return _.assign(state, { registered: true, error: false, name: action.name, mail: action.mail, message: action.message });\n\n        case failed(actions.REGISTER):\n            return _.assign(state, { registered: false, error: true, message: action.message });\n\n        case actions.SET_ACTIVATION_CODE:\n            return _.assign(state, { activationCode: action.activationCode });\n\n        case actions.CONFIRM_ACCOUNT:\n            return _.assign(state, { confirmed: false, error: false });\n\n        case completed(actions.CONFIRM_ACCOUNT):\n            return _.assign(state, { confirmed: true, error: false });\n\n        case failed(actions.CONFIRM_ACCOUNT):\n            return _.assign(state, { confirmed: false, error: true, message: action.message });\n\n        case actions.RECOVER_ACCOUNT:\n            return _.assign(state, { recovered: false, error: false });\n\n        case completed(actions.RECOVER_ACCOUNT):\n            return _.assign(state, { recovered: true, error: false });\n\n        case failed(actions.RECOVER_ACCOUNT):\n            return _.assign(state, { recovered: false, error: true });\n    }\n\n});\n","import * as aj from \"../aj/index\";\nimport {completed, discriminate, failed} from \"../utils/ajex\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {ENTITIES, GRIDS, LOOKUP, MULTIVALUE_SETTINGS, SELECT} from \"./types\";\n\n\nexport const GridsStore = aj.createStore(GRIDS, (state = {grid: null}, action) => {\n\n    switch (action.type) {\n        case actions.GET_GRID:\n            return _.assign(state, { error: false, grid: null })\n\n        case completed(actions.GET_GRID):\n            return _.assign(state, { error: false, grid: action.grid })\n\n        case failed(actions.GET_GRID):\n            return _.assign(state, { error: true, grid: null })\n    }\n\n})\n\nexport const EntitiesStore = aj.createStore(ENTITIES, (state = {}, action) => {\n\n    switch (action.type) {\n        case completed(actions.LOAD_ENTITIES):\n            return discriminate(state, action.discriminator, {error: false, result: action.result})\n\n        case failed(actions.LOAD_ENTITIES):\n            return discriminate(state, action.discriminator, {error: true, result: null})\n\n        case completed(actions.DELETE_ENTITIES):\n            return discriminate(state, action.discriminator, {error: false, result: action.result})\n\n        case failed(actions.DELETE_ENTITIES):\n            return discriminate(state, action.discriminator, {error: true, result: null})\n\n        case actions.NEW_ENTITY:\n            return discriminate(state, action.discriminator, {error: false, data: {}, saved: false})\n\n        case actions.GET_ENTITY:\n            return discriminate(state, action.discriminator, {error: false, data: null, saved: false})\n\n        case completed(actions.GET_ENTITY):\n            return discriminate(state, action.discriminator, {error: false, data: action.data})\n\n        case completed(actions.CHECK_REVISION_ENABLE_STATUS):\n            return discriminate(state, action.discriminator, {revisionEnabled: action.revisionEnabled})\n\n        case failed(actions.CHECK_REVISION_ENABLE_STATUS):\n            return discriminate(state, action.discriminator, {\n                revisionEnabled: false\n            });\n\n        case failed(actions.GET_ENTITY):\n            return discriminate(state, action.discriminator, {\n                error: true,\n                data: null,\n                validationError: false,\n                validationResult: null\n            })\n\n        case actions.FREE_ENTITIES:\n            return _.omit(state, action.discriminator)\n\n        case actions.SAVE_ENTITY:\n            return discriminate(state, action.discriminator, {\n                error: false,\n                getCompleted: false,\n                validationError: false,\n                validationResult: null,\n                saved: false})\n\n        case completed(actions.SAVE_ENTITY):\n            return discriminate(state, action.discriminator, {\n                error: false,\n                data: action.data,\n                saved: true,\n                validationError: false,\n                validationResult: null\n            })\n\n        case failed(actions.SAVE_ENTITY):\n            return discriminate(state, action.discriminator, {\n                error: true,\n                data: action.data,\n                saved: false,\n                validationError: action.validationError,\n                validationResult: action.validationResult\n            })\n\n    }\n\n})\n\nexport const LookupStore = aj.createStore(LOOKUP, (state = {}, action) => {\n\n    switch (action.type) {\n        case completed(actions.GET_LOOKUP_RESULT):\n            return discriminate(state, action.discriminator, { error: false, result: action.result })\n\n        case failed(actions.GET_LOOKUP_RESULT):\n            return discriminate(state, action.discriminator, { error: true, result: null })\n\n        case completed(actions.GET_LOOKUP_VALUES):\n            return discriminate(state, action.discriminator, { error: false, values: action.values })\n\n        case failed(actions.GET_LOOKUP_VALUES):\n            return discriminate(state, action.discriminator, { error: true, values: null })\n\n        case actions.FREE_LOOKUP:\n            return _.omit(state, action.discriminator)\n\n    }\n})\n\nexport const SelectStore = aj.createStore(SELECT, (state = {}, action) => {\n\n    switch (action.type) {\n\n        case actions.GET_SELECT_VALUES:\n            return discriminate(state, action.discriminator, { error: false, loading: true })\n\n        case completed(actions.GET_SELECT_VALUES):\n            return discriminate(state, action.discriminator, { error: false, loading: false, values: action.values })\n\n        case failed(actions.GET_SELECT_VALUES):\n            return discriminate(state, action.discriminator, { error: true, loading: false, values: null })\n\n        case actions.GET_SELECT_ENTITIES:\n            return discriminate(state, action.discriminator, { error: false, loading: true })\n\n        case completed(actions.GET_SELECT_ENTITIES):\n            return discriminate(state, action.discriminator, { error: false, loading: false, values: action.entities })\n\n        case failed(actions.GET_SELECT_ENTITIES):\n            return discriminate(state, action.discriminator, { error: true, loading: false, values: null })\n\n        case actions.FREE_SELECT:\n            return _.omit(state, action.discriminator)\n\n    }\n})\n\n\nexport const MultiValueSettingsStore = aj.createStore(MULTIVALUE_SETTINGS, (state = {}, action) => {\n\n    let list = []\n    switch (action.type) {\n\ncase actions.SET_MULTIVALUE_SETTINGS:\n    debugger\n    return discriminate(state, action.discriminator, {items: action.items})\ncase actions.UPDATE_MULTIVALUE_SETTINGS:\n    list = updatedList(\n        discriminated(state, action.discriminator).items,\n        r => r.itemType  === action.itemType,\n        r => _.assign({}, r, {enabled: action.enabled}),\n        true\n)\n    return discriminate(state, action.discriminator, {items: list})\n\ncase actions.FREE_SETTINGS_VALUES:\n    return _.omit(state, action.discriminator)\n}\n\n});\n\n\n\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {walk} from \"../utils/lang\";\nimport {MENU} from \"./types\";\nimport {hasPermission} from \"../api/session\";\n\nexport const MenuStore = aj.createStore(MENU, (state = {}, action) => {\n\n    switch(action.type)\n{\ncase\n    actions.SETUP_MENU:\n        let menu = JSON.parse(JSON.stringify(action.menu))\n\n    //Clear childrens menu if user hasn't permission\n    _.each(menu, m => {\n        m.children = _.filter(m.children, c => _.isEmpty(c.permissions) || hasPermission(c.permissions)\n)\n})\n\n    //Clear item menu if are empty\n    return _.assign(state, {\n        menu: _.filter(menu, m => (!_.isEmpty(m.children) && m.href === undefined) || (_.isEmpty(m.children) && m.href !== undefined && hasPermission(m.permissions)))\n})\n\n\ncase\n    actions.SET_ACTIVE_MENU_ITEM\n:\n    return _.assign(state, {menu: walk(state.menu, \"children\", i => {i.active = (i == action.item)})\n})\n\ncase\n    actions.EXPAND_MENU_ITEM\n:\n    return _.assign(state, {\n        menu: walk(state.menu, \"children\", i => {\n            if(i == action.item)\n    {\n        i.expanded = !(action.item.expanded || false)\n    }\n})\n})\n}\n\n})\n\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {completed, failed} from \"../utils/ajex\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {PASSWORD_RECOVERY} from \"./types\";\n\nexport function passwordRecoveryDefaultState () {\n    return {\n        recoveryStep: 1,\n        mail: undefined,\n        code: undefined,\n    }\n}\n\nexport const PasswordRecoveryStore = aj.createStore(PASSWORD_RECOVERY, (state = passwordRecoveryDefaultState(), action) => {\n\n    switch (action.type) {\n\n        case completed(actions.REQUEST_RECOVERY_CODE):\n            return _.assign(state, {error: false, mail: action.mail, recoveryStep: 2});\n        case failed(actions.REQUEST_RECOVERY_CODE):\n            return _.assign(state, {error: true});\n\n        case completed(actions.VALIDATE_RECOVERY_CODE):\n            return _.assign(state, {error: false, mail: action.mail, code: action.code, recoveryStep: 3});\n        case failed (actions.VALIDATE_RECOVERY_CODE):\n            return _.assign(state, {error: true});\n            \n        case completed(actions.RESET_PASSWORD):\n            return _.assign(state, {error: false, recoveryStep: 4});\n        case failed(actions.RESET_PASSWORD):\n            return _.assign(state, {error: true});\n    }\n\n});","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {completed, failed} from \"../utils/ajex\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {SESSION} from \"./types\";\n\n\nexport const SessionStore = aj.createStore(SESSION, (state = {}, action) => {\n\n    switch (action.type) {\n        case actions.LOGIN:\n            return _.assign(state, { isLoggedIn: false });\n\n        case completed(actions.LOGIN):\n            return _.assign(state, { isLoggedIn: true, user: action.user, error: false });\n\n        case failed(actions.LOGIN):\n            return _.assign(state, { isLoggedIn: false, error: true });\n\n        case actions.RESUME_SESSION:\n            return _.assign(state, { isLoggedIn: false, resumeComplete: false });\n\n        case completed(actions.RESUME_SESSION):\n            return _.assign(state, { isLoggedIn: true, user: action.user, error: false, resumeComplete: true });\n\n        case failed(actions.RESUME_SESSION):\n            return _.assign(state, { isLoggedIn: false, error: true, resumeComplete: true });\n\n        case actions.LOGOUT:\n            return _.assign(state, {isLoggedIn: false, user: null, error: false, resumeComplete: false})\n        case actions.CHANGE_PASSWORD:\n            return _.assign(state, {action: actions.CHANGE_PASSWORD,  error:null });\n        case completed(actions.CHANGE_PASSWORD):\n            return _.assign(state, {action: actions.CHANGE_PASSWORD, firstLogin: action.firstLogin, user: action.user, error: false });\n        case failed(actions.CHANGE_PASSWORD):\n            return _.assign(state, {action: actions.CHANGE_PASSWORD, error:true });\n    }\n\n});\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {SYSTEM} from \"./types\";\nimport {completed} from \"../utils/ajex\";\n\nexport const SystemStore = aj.createStore(SYSTEM, (state = {}, action) => {\n\n    switch (action.type) {\n        case completed(actions.SYSTEM_INFORMATIONS):\n            return _.assign(state, { apiVersion: action.apiVersion, backendVersion: action.backendVersion, copyrightInfos: action.copyrightInfos});\n\n    }\n\n});\n","\"use strict\"\n\nexport const UI = \"UI\";\nexport const SESSION = \"SESSION\";\nexport const ACCOUNT = \"ACCOUNT\";\nexport const GRIDS = \"GRIDS\"\nexport const ENTITIES = \"ENTITIES\"\nexport const LOOKUP = \"LOOKUP\"\nexport const MENU = \"MENU\"\nexport const SELECT = \"SELECT\"\nexport const MULTIVALUE_SETTINGS = \"MULTIVALUE_SETTINGS\"\nexport const SYSTEM = \"SYSTEM\"\n","\"use strict\"\n\nimport * as aj from \"../aj/index\";\nimport {completed, failed} from \"../utils/ajex\";\nimport * as actions from \"../actions/types\";\nimport _ from \"underscore\";\nimport {UI} from \"./types\";\n\nexport const UIStore = aj.createStore(UI, (state = {}, action) => {\n\n    switch (action.type) {\n        case actions.GET_USER_COVER_IMAGE:\n            return _.assign(state, {error: false});\n\n        case completed(actions.GET_USER_COVER_IMAGE):\n            return _.assign(state, {error: false, cover: action.data});\n\n        case failed(actions.GET_USER_COVER_IMAGE):\n            return _.assign(state, {error: true});\n\n        case actions.GET_USER_PROFILE_IMAGE:\n            return _.assign(state, {error: false});\n\n        case completed(actions.GET_USER_PROFILE_IMAGE):\n            return _.assign(state, {error: false, profileImage: action.data});\n\n        case failed(actions.GET_USER_PROFILE_IMAGE):\n            return _.assign(state, {error: true});\n    }\n\n});","let language = \"it\"\n\nlet strings = {}\nstrings[\"en\"] = {\n    appName: \"_APPNAME_\",\n    registering: \"Registering...\",\n    ooops: \"Ooops...\",\n    badLogin: \"Cannot login! Please check your email address or password!\",\n    welcome: \"Welcome\",\n    congratulations: \"Congratulations\",\n    welcomeMessage: \"Hi {0}, your registration is complete.\\nA confirmation link was sent to {1}.\\nPlease confirm before login\",\n    continue: \"Continue\",\n    register: \"Register\",\n    forgotPassword: \"Forgot password\",\n    signIn: \"Sign in\",\n    mailAddress: \"Mail Address\",\n    name: \"Name\",\n    password: \"Password\",\n    accountConfirmText: \"Insert activation code that we sent to your mailbox to confirm your account\",\n    accountConfirmed: \"Your account is confirmed. You can login now\",\n    mailAndPasswordRequired: \"Email and password are required\",\n    nameMailAndPasswordRequired: \"Name, email and password are required\",\n    mailRequired: \"Email is required\",\n    activationCodeRequired: \"Activation code required\",\n    accountRecoverText: \"Please insert your email address to recover password. We will send a new password in your mailbox!\",\n    problemOccoured: \"There is a problem\",\n    accountRecovered: \"A new password was sent to {0}\",\n    pleaseSpecifyId: \"Please specify an ID\",\n    pleaseSpecifyQuery: \"Please specify a query\",\n    pleaseSpecifyEntity: \"Please specify the entity\",\n    search: \"Search\",\n    close: \"Close\",\n    selectFilterType: \"Select filter type\",\n    filterType: \"Filter type\",\n    typeValueToSearch: \"Type value to search\",\n    value: \"Value\",\n    filters: \"Filters\",\n    pagination: \"Showing {0} to {1} of {2}\",\n    noResults: \"there are no results with the specified criteria\",\n    selectAll: \"Select all\",\n    delete: \"Delete\",\n    create: \"Create\",\n    refresh: \"Refresh\",\n    confirm: \"Confirm\",\n    entityDeleteConfirm: \"Are you sure to delete {0} entities?\",\n    submit: \"Submit\",\n    cancel: \"Cancel\",\n    add: \"Add\",\n    pleaseSpecifyData: \"Please specify data\",\n    ok: \"OK\",\n    security: \"Security\",\n    users: \"Users\",\n    roles: \"Roles\",\n    setup: \"Setup\",\n    categories: \"Categories\",\n    nElementsSelected: \"{0} elements selected\",\n    oneElementSelected: \"1 element selected\",\n    nothingSelected: \"Nothing selected\",\n    usersListDescription: \"Create, edit or delete system users\",\n    mail: \"Email\",\n    active: \"Active\",\n    editUser: \"Edit user\",\n    editUserDescription: \"Use this form to edit user informations\",\n    generalInformations: \"General informations\",\n    rolesListDescription: \"A role is an entity that gives to user authorization to do something\",\n    nameOfRole: \"Name of role\",\n    role: \"Role\",\n    permissions: \"Permissions\",\n    selectPermissions: \"Select permissions for role\",\n    back: \"Back\",\n    save: \"Save\",\n    saveAndGoBack: \"Save and go back\",\n    revisions: \"Revisions\",\n    image: \"Image\",\n    cover: \"Cover\",\n    saveComplete: \"Save complete\",\n    articles: \"Articles\",\n    articlesListDescription: \"Articles must exists in Gamma system. Commodo only extends Gamma articles\",\n    company: \"Company\",\n    id: \"ID\",\n    description: \"Description\",\n    companies: \"Companies\",\n    companiesListDescription: \"List of companies, read only!\",\n    components: \"Components\",\n    componentsListDescription: \"Components are base elements of a \\\"bill of materials\\\"\",\n    characteristic: \"Characteristic\",\n    characteristics: \"Characteristics\",\n    nameOfComponent: \"Name of component\",\n    editComponent: \"Edit component\",\n    editComponentDescription: \"Use this form to edit component informations\",\n    optionValue: \"Option value\",\n    nameOfCharacteristic: \"Name of characteristic\",\n    addCharacteristic: \"Add characteristic\",\n    newOption: \"New option\",\n    areYouSureToRemoveCharacteristic: \"Are you sure to remove characteristic '{0}'?\",\n    editArticle: \"Edit article\",\n    editArticleDescription: \"Not all article informations are editable in Commodo because is connected to TeamSystem Gamma\",\n    article: \"Article\",\n    select: \"Select\",\n    component: \"Component\",\n    pleaseSpecifyComponentId: \"Please specify component id\",\n    pleaseSelectComponent: \"Please select component\",\n    characteristicValues: \"Characteristic values\",\n    selectedComponent: \"Selected component\",\n    noComponentSelected: \"No component selected\",\n    versions: \"Versions\",\n    version: \"Version\",\n    versionsListDescription: \"Use versions to create configurable associations with models\",\n    editVersion: \"Edit version\",\n    editVersionDescription: \"Use this form to edit version informations\",\n    nameOfVersion: \"Name of version\",\n    collections: \"Collections\",\n    collection: \"Collection\",\n    collectionsListDescription: \"Collections are used in models\",\n    editCollection: \"Edit collection\",\n    editCollectionDescription: \"Use this form to edit collection informations\",\n    nameOfCollection: \"Name of collection\",\n    countries: \"Countries\",\n    country: \"Country\",\n    countriesListDescription: \"Countries are used in models\",\n    editCountry: \"Edit country\",\n    editCountryDescription: \"Use this form to edit country informations\",\n    nameOfCountry: \"Name of country\",\n    design: \"Design\",\n    state: \"State\",\n    model: \"Model\",\n    models: \"Models\",\n    nameOfModel: \"Name of model\",\n    modelsListDescription: \"Models are base entities to create a sofa\",\n    editModel: \"Edit model\",\n    editModelDescription: \"Use this form to edit model informations\",\n    code: \"Code\",\n    extraSize: \"Extra size\",\n    destinationCountry: \"Destination country\",\n    revision: \"Revision\",\n    lastUpdate: \"Last update\",\n    editedBy: \"Edited by\",\n    yes: \"Yes\",\n    no: \"No\",\n    notes: \"Notes\",\n    makeACopy: \"Make a copy\",\n    associateVersion: \"Associate version\",\n    pleaseSpecifyVersion: \"Please specify version\",\n    versionAlreadyAssociated: \"Version already associated\",\n    areYouSureToRemoveVersion: \"Are you sure to remove version '{0}'?\",\n    duplicate: \"Duplicate\",\n    edit: \"Edit\",\n    pleaseSaveTheModel: \"Please save the model to continue\",\n    configurables: \"Configurables\",\n    configurablesListDescription: \"List of versions associated to models. Use Models registry to make new associations\",\n    nameOfConfigurable: \"Name of configurable\",\n    addComponent: \"Add component\",\n    editRole: \"Edit role\",\n    editRoleDescription: \"Use role to manage what an user can do in system\",\n    unableToExcludeDefaultArticle: \"Unable to exclude an article marked as default\",\n    addArticleToComponent: \"Add article to component {0}\",\n    selectByArticle: \"Select by article\",\n    removeThisComponent: \"Remove this component\",\n    addArticle: \"Add article\",\n    confirmRemoveConfigurableComponent: \"Do you want to remove {0}?\",\n    editConfigurable: \"Edit configurable\",\n    editConfigurableDescription: \"A configurable is the base object for a sofa customization. Use this area to design a model-version in all of its parts\",\n    noArticlesSelected: \"No articles selected for component {0}\",\n    pleaseSelectDefaultArticleForComponent: \"Please select default article for component {0}\",\n    invalidDefaultArticleSelectedForComponent: \"Invalid default article selected for component {0}\",\n    accessories: \"Accessories\",\n    accessoriesListDescription: \"Accessories list\",\n    editAccessory: \"Edit accessory\",\n    editAccessoryDescription: \"Use this form to edit accessory informations\",\n    nameOfAccessory: \"Name of accessory\",\n    unitOfMeasurements: \"Unit of measurements\",\n    unitOfMeasurementsListDescription: \"Unit of measurements list\",\n    shortName: \"Short name\",\n    conversionFactor: \"Conversion factor\",\n    status: \"Status\",\n    quantity: \"Quantity\",\n    remove: \"Remove\",\n    unitOfMeasurement: \"Unit of measurements\",\n    parts: \"Parts\",\n    partsListDescription: \"Represents a coverable part of a sofa\",\n    editPart: \"Edit part\",\n    editPartDescription: \"Use this form to edit part informations\",\n    nameOfPart: \"Name of part\",\n    covers: \"Covers\",\n    addPart: \"Add part\",\n    type: \"Type\",\n    coverTypes: \"Cover types\",\n    coverTypesListDescription: \"Types of coverings used for cover sofa\",\n    nameOfCoverType: \"Name of cover type\",\n    editCoverType: \"Edit cover type\",\n    editCoverTypeDescription: \"Use this form to edit cover type informations\",\n    colors: \"Colors\",\n    colorsListDescription: \"List of colors used in your systems\",\n    nameOfColor: \"Name of color\",\n    editColor: \"Edit color\",\n    editColorDescription: \"Use this form to edit color informations\",\n    removeThisPart: \"Remove this part\",\n    coverOptions: \"Cover options\",\n    addCoverOption: \"Add cover option\",\n    removeThisCoverOption: \"Remove this cover option\",\n    analogousColorArticles: \"Analogous articles\",\n    complementaryColorArticles: \"Complementary articles\",\n    addComplementaryArticleToCoverOption: \"Add complementary article to cover option {0}\",\n    addAnalogousArticleToCoverOption: \"Add analogous article to cover option {0}\",\n    coverType: \"Cover type\",\n    color: \"Color\",\n    characteristicsDisabledForCoverOptions: \"Characteristics disabled for cover options\",\n    compositions: \"Compositions\",\n    customers: \"Customers\",\n    customersListDescription: \"Create system customers\",\n    paymentCode: \"Payment code\",\n    fiscalCode: \"Fiscal code\",\n    editCustomer: \"Edit customer\",\n    firstName: \"First name\",\n    lastName: \"Last name\",\n    companyName: \"Company name\",\n    cityCode: \"City code\",\n    countryCode: \"Country code\",\n    tel1: \"Telephonic number 1\",\n    tel2: \"Telephonic number 2\",\n    fax: \"Fax\",\n    cellNumber: \"Cellular number\",\n    pec: \"Pec\",\n    vatCode: \"Vat\",\n    componentsAccessoriesCovers: \"Components accessories covers\",\n    removeThisPhase: \"Remove this phase\",\n    phases: \"Phases\",\n    addPhase: \"Add phase\",\n    addComponentToPhase: \"Add component to phase\",\n    workingTime: \"Working time\",\n    address: \"Address\",\n    phasesListDescription: \"Phases list description\",\n    defaultTime: \"default time\",\n    editPhase: \"Edit phase\",\n    editPhaseDescription: \"Edit phase description\",\n    nameOfPhase: \"Name of phase\",\n    production: \"Production\",\n    customer: \"Customer\",\n    coverings: \"Coverings\",\n    allCoverings: \"All coverings\",\n    allAccessories: \"All accessories\",\n    confirmRemoveConfigurablePhase: \"Confirm remove configurable phase\",\n    addArticleToPart: \"Add article to part\",\n    email: \"Email\",\n    website: \"Web site\",\n    zipCode: \"Zip code\",\n    city: \"City\",\n    coverOptionColorConfiguration: \"Cover option color configuration\",\n    addComplementaryArticleForColor: \"Add complementary article for {0}\",\n    addAnalogousArticleForColor: \"Add analogous article for {0}\"\n}\n\nstrings[\"it\"] = {\n    appName: \"_APPNAME_\",\n    registering: \"Registrazione...\",\n    ooops: \"Ooops...\",\n    badLogin: \"Non riesco ad accedere! Per favore controlla il tuo indirizzo email o password!\",\n    welcome: \"Benvenuto\",\n    congratulations: \"Congratulazioni\",\n    welcomeMessage: \"Ciao {0}, la tua registrazione è completa.\\nUn link per la conferma è stato inviato a {1}.\\nPer favore conferma prima di effettuare l'accesso\",\n    continue: \"Continuare\",\n    register: \"Registrati\",\n    forgotPassword: \"Dimenticato la password\",\n    signIn: \"Rgistrati\",\n    mailAddress: \"Indirizzo mail\",\n    name: \"Nome\",\n    password: \"Password\",\n    accountConfirmText: \"Inserisci il codice di attivazione che abbiamo inviato alla tua casella mail per confermare il tuo account\",\n    accountConfirmed: \"Il tuo account è confermato. Puoi effettuare l'accesso ora\",\n    mailAndPasswordRequired: \"Email e password sono richieste\",\n    nameMailAndPasswordRequired: \"Nome, email e password sono richieste\",\n    mailRequired: \"Email è richiesta\",\n    activationCodeRequired: \"Codice di attivazione richiesto\",\n    accountRecoverText: \"Per favore inserisci il tuo indirizzo email per recuperare la password. Ti invieremo una nuova password al tuo indirizzo mail!\",\n    problemOccoured: \"C'è un problema\",\n    accountRecovered: \"Una nuova password è stata inviata a {0}\",\n    pleaseSpecifyId: \"Per favore specifica il tuo ID\",\n    pleaseSpecifyQuery: \"Per favore specifica la domanda\",\n    pleaseSpecifyEntity: \"Per favore specifica l'entità\",\n    search: \"Ricerca\",\n    close: \"Chiudi\",\n    selectFilterType: \"Seleziona il tipo di filtro\",\n    filterType: \"Tipo di filtro\",\n    typeValueToSearch: \"Tipo di valore da cercare\",\n    value: \"Valore\",\n    filters: \"Filtri\",\n    pagination: \"Record da {0} a {1} di {2} totali\",\n    noResults: \"Non ci sono risultati con i criteri specificati\",\n    selectAll: \"Seleziona tutto\",\n    delete: \"Rimuovi\",\n    create: \"Crea\",\n    refresh: \"Ricarica\",\n    confirm: \"Conferma\",\n    entityDeleteConfirm: \"Sei sicuro di voler eliminare {0} entità?\",\n    submit: \"Invia\",\n    cancel: \"Annulla\",\n    add: \"Aggiungi\",\n    pleaseSpecifyData: \"Per favore specifica la data\",\n    ok: \"OK\",\n    security: \"Securezza\",\n    users: \"Utenti\",\n    roles: \"Ruoli\",\n    setup: \"Setup\",\n    categories: \"Categorie\",\n    nElementsSelected: \"{0} elementi selezionati\",\n    oneElementSelected: \"1 elemento selezionato\",\n    nothingSelected: \"Niente selezionato\",\n    usersListDescription: \"Creare, modificare o eliminare gli utenti di sistema\",\n    mail: \"Email\",\n    active: \"Attivo\",\n    editUser: \"Modifica utente\",\n    editUserDescription: \"Usa questo modulo per modificare le informazioni dell'utente\",\n    generalInformations: \"Informazioni generali\",\n    rolesListDescription: \"Un ruolo è un'entità che da all'utente l'autorizzazione per fare qualcosa\",\n    nameOfRole: \"Nome del ruolo\",\n    role: \"Ruolo\",\n    permissions: \"Permessi\",\n    selectPermissions: \"Seleziona i premessi per il ruolo\",\n    back: \"Indietro\",\n    save: \"Salva\",\n    saveAndGoBack: \"Salva e torna alla lista\",\n    revisions: \"Revisioni\",\n    image: \"Immagine\",\n    cover: \"Rivestimenti\",\n    saveComplete: \"Salvataggio completato\",\n    articles: \"Articoli\",\n    articlesListDescription: \"Gli articoli devono essere presenti sul sistema Gamma. In commodo gli articoli vengono estesi per aggiungere funzionalità richiesta solo a Commodo\",\n    company: \"Azienda\",\n    id: \"ID\",\n    description: \"Descrizione\",\n    companies: \"Aziende\",\n    companiesListDescription: \"Lista delle aziende, sola lettura!\",\n    components: \"Componenti\",\n    componentsListDescription: \"I componenti sono elementi base di una \\\"distinta di materiali\\\"\",\n    characteristic: \"Caratteritica\",\n    characteristics: \"Caratteristiche\",\n    nameOfComponent: \"Nome del componente\",\n    editComponent: \"Modifica componente\",\n    editComponentDescription: \"Usa questo modulo per modificare le informazioni del componente\",\n    optionValue: \"Valore di opzione\",\n    nameOfCharacteristic: \"Nome della caratteristica\",\n    addCharacteristic: \"Aggiungi caratteristica\",\n    newOption: \"Nuova opzione\",\n    areYouSureToRemoveCharacteristic: \"Sei sicuro di voler rimuovere la caratteristica '{0}'?\",\n    editArticle: \"Modifica articolo\",\n    editArticleDescription: \"Non tutte le informazini dell'articolo sono modificabili in Commodo perchè è connesso a TeamSystem Gamma\",\n    article: \"Articolo\",\n    select: \"Seleziona\",\n    component: \"Componente\",\n    pleaseSpecifyComponentId: \"Per favore specifica l'id del componente\",\n    pleaseSelectComponent: \"Per favore seleziona il componente\",\n    characteristicValues: \"Valori della caratteristica\",\n    selectedComponent: \"Componente selezionato\",\n    noComponentSelected: \"Nessun componente selezionato\",\n    versions: \"Versioni\",\n    version: \"Versione\",\n    versionsListDescription: \"Usa le versioni per creare associazioni configurabili con i modelli\",\n    editVersion: \"Modifica la versione\",\n    editVersionDescription: \"Usa questo modulo per modificare le informazioni della versione\",\n    nameOfVersion: \"Nome della versione\",\n    collections: \"Collezioni\",\n    collection: \"Collezione\",\n    collectionsListDescription: \"Le collezioni sono usate nei modelli\",\n    editCollection: \"Modifica collezioni\",\n    editCollectionDescription: \"Usa questo modulo per modificare le informazioni delle collezioni\",\n    nameOfCollection: \"Nome delle collezioni\",\n    countries: \"Paesi\",\n    country: \"Paese\",\n    countriesListDescription: \"I paesi sono usati nei modelli\",\n    editCountry: \"Modifica il paese\",\n    editCountryDescription: \"Usa questo modulo per modificare le informazioni del paese\",\n    nameOfCountry: \"Nome del paese\",\n    design: \"Design\",\n    state: \"Stato\",\n    model: \"Modello\",\n    models: \"Modelli\",\n    nameOfModel: \"Nome del modello\",\n    modelsListDescription: \"I modelli sono entità base per creare un divano\",\n    editModel: \"Modifica modello\",\n    editModelDescription: \"Usa questo modulo per modificare le informazioni del modello\",\n    code: \"Codice\",\n    extraSize: \"Extra size\",\n    destinationCountry: \"Paese di destinazione\",\n    revision: \"Revisione\",\n    lastUpdate: \"Ultimo aggiornamento\",\n    editedBy: \"Modificato da\",\n    yes: \"Si\",\n    no: \"No\",\n    notes: \"Appunti\",\n    makeACopy: \"Crea una copia\",\n    associateVersion: \"Associa versione\",\n    pleaseSpecifyVersion: \"Per favore specifica la versione\",\n    versionAlreadyAssociated: \"Versione già associata\",\n    areYouSureToRemoveVersion: \"Sei sicuro di voler rimuovere la versione '{0}'?\",\n    duplicate: \"Duplica\",\n    edit: \"Modifica\",\n    pleaseSaveTheModel: \"Per favore salva il modello per continuare\",\n    configurables: \"Configurabili\",\n    configurablesListDescription: \"Lista delle versioni associate ai modelli. Usa il registro dei modelli per creare nuove associazioni\",\n    nameOfConfigurable: \"Nome del configurabile\",\n    addComponent: \"Aggiungi componente\",\n    editRole: \"Modifica ruolo\",\n    editRoleDescription: \"Usa un ruolo per gestire cosa può fare un utente nel sistema\",\n    unableToExcludeDefaultArticle: \"Incapace di escludere un articolo contrassegnato come predefinito\",\n    addArticleToComponent: \"Aggiungi articolo al componente {0}\",\n    selectByArticle: \"Selezionare dall'articolo\",\n    removeThisComponent: \"Rimuovi questo componente\",\n    addArticle: \"Aggiungi articolo\",\n    confirmRemoveConfigurableComponent: \"Desideri rimuovere {0}?\",\n    editConfigurable: \"Modifica configurabile\",\n    editConfigurableDescription: \"Un configurabile è l'oggetto base per la personalizzazione del divano. Usa quest'area per progettare un modello-versione in tutte le sue parti\",\n    noArticlesSelected: \"Nessun artivolo selezionato per il componente {0}\",\n    pleaseSelectDefaultArticleForComponent: \"Per favore seleziona l'articolo di default per il componente {0}\",\n    invalidDefaultArticleSelectedForComponent: \"L'articolo di default invalido selezionato per il componente {0}\",\n    accessories: \"Accessori\",\n    accessoriesListDescription: \"Lista accessori\",\n    editAccessory: \"Modifica accessori\",\n    editAccessoryDescription: \"Usa questo modulo per modificare le informationi dell'accessorio\",\n    nameOfAccessory: \"Nome dell'accessorio\",\n    unitOfMeasurements: \"Unità di misura\",\n    unitOfMeasurementsListDescription: \"Lista della unità di misura\",\n    shortName: \"Nome breve\",\n    conversionFactor: \"Fattore di conversione\",\n    status: \"Stato\",\n    quantity: \"Quantità\",\n    remove: \"Rimuovi\",\n    unitOfMeasurement: \"Unità di misura\",\n    parts: \"Parti\",\n    partsListDescription: \"Rappresenta una parte rivestibile di un divano\",\n    editPart: \"Modifica parte\",\n    editPartDescription: \"Usa questo modulo per modificare le informazioni della parte\",\n    nameOfPart: \"Nome della parte\",\n    covers: \"Rivestimenti\",\n    addPart: \"Aggiungi parte\",\n    type: \"Tipo\",\n    coverTypes: \"Tipi di rivestimento\",\n    coverTypesListDescription: \"Tipi di rivestimenti usati per rivestire il divano\",\n    nameOfCoverType: \"Nome del tipo di rivestimento\",\n    editCoverType: \"Modifica il tipo di rivestimento\",\n    editCoverTypeDescription: \"Usa questo modulo per modificare il tipo di informazioni del rivestimento\",\n    colors: \"Colori\",\n    colorsListDescription: \"Lista dei colori utilizzati per i tuoi sistemi\",\n    nameOfColor: \"Nome del colore\",\n    editColor: \"Modifica colore\",\n    editColorDescription: \"Usa questo modulo per modificare le informazioni del colore\",\n    removeThisPart: \"Rimuovi questa parte\",\n    coverOptions: \"Opzioni del rivestimento\",\n    addCoverOption: \"Aggiungi opzione del rivestimento\",\n    removeThisCoverOption: \"Rimuovi questa opzione del rivestimento\",\n    noArticlesSelected: \"Nessun articolo selezionato\",\n    analogousColorArticles: \"Articoli analoghi\",\n    complementaryColorArticles: \"Articoli complementari\",\n    addComplementaryArticleToCoverOption: \"Aggiungi articoli complementari per l'opzione del rivestimento {0}\",\n    addAnalogousArticleToCoverOption: \"Aggiungi articoli analoghi per l'opzione del rivestimento {0}\",\n    coverType: \"Tipo di rivestimento\",\n    color: \"Colore\",\n    characteristicsDisabledForCoverOptions: \"Caratteristiche disabilitate per le opzioni del rivestimento\",\n    compositions: \"Composizioni\",\n    customers: \"Clienti\",\n    customersListDescription: \"Creare clienti del sistema\",\n    companyName: \"Nome dell'Azienda\",\n    paymentCode: \"Codice di pagamento\",\n    zipCode: \"CAP\",\n    fiscalCode: \"Codice fiscale\",\n    vatCode: \"I.V.A.\",\n    componentsAccessoriesCovers: \"Componenti dei rivestimenti degli accessori\",\n    removeThisPhase: \"Rimuovi questa fase\",\n    phases: \"Fasi\",\n    addPhase: \"Aggiungi fase\",\n    addComponentToPhase: \"Aggiungi componente alla fase\",\n    workingTime: \"Tempo di lavoro\",\n    address: \"Indirizzo\",\n    city: \"Città\",\n    phasesListDescription: \"Lista delle descrizioni della fase\",\n    defaultTime: \"Tempo predefinito\",\n    editPhase: \"Modifica fase\",\n    editPhaseDescription: \"Modifica la descrizione della fase\",\n    nameOfPhase: \"Nome della fase\",\n    production: \"Produzione\",\n    customer: \"Cliente\",\n    coverings: \"Rivestimenti\",\n    allCoverings: \"Tutti i rivestimenti\",\n    allAccessories: \"Tutti gli accessori\",\n    confirmRemoveConfigurablePhase: \"Conferma la rimozione della fase configurabile\",\n    coverOptionColorConfiguration: \"Configurazione i colori dell'opzione rivestimento\",\n    addComplementaryArticleForColor: \"Aggiungi articolo a contrasto a {0}\",\n    addAnalogousArticleForColor: \"Aggiungi articolo a {0}\",\n    usersList: \"Lista utenti\",\n    rolesList: \"Lista ruoli\"\n}\n\n\nexport function setLanguage(language_) {\n    language = language_\n}\n\nexport function getLanguage() {\n    return language\n}\n\nexport default function M(key) {\n    if (strings[language] && strings[language][key]) {\n        return strings[language][key]\n    } else {\n        logger.w(\"String not found for language \" + language + \":\", key)\n        return key\n    }\n}","\"use strict\"\n\nimport _ from \"underscore\";\nimport * as aj from \"../aj\";\n\nexport function completed(action) {\n    return action + \"_COMPLETE\"\n}\n\nexport function failed(action) {\n    return action + \"_FAIL\"\n}\n\nexport function createAsyncAction(type, action) {\n    let normal = aj.createAction(type, action)\n    normal.complete = aj.createAction(completed(type), (data) => {\n        aj.dispatch(_.assign({type: completed(type), error: false}, data))\n    })\n    normal.fail = aj.createAction(failed(type), (data) => {\n        aj.dispatch(_.assign({type: failed(type), error: true}, data))\n    })\n    return normal\n}\n\nexport function discriminate(state, discriminator, newValues) {\n    let ds = state[discriminator] = state[discriminator] || {}\n    _.assign(ds, newValues)\n    return state\n}\n\nexport function discriminated(state, discriminator) {\n    return state[discriminator] || {}\n}","\"use strict\"\n\nimport {Observable} from \"../aj/events\";\nimport _ from \"underscore\";\n\nfunction normalizeData(data) {\n\tlet result = null\n\tif (data) {\n\t\tif (_.isArray(data)) {\n\t\t\tresult = {rows: data, totalRows: data.length}\n\t\t} else if (_.isObject(data)) {\n\t\t\tresult = data\n\t\t}\n\t}\n\treturn result\n}\n\nexport class DataSource extends Observable {\n\t\n\tconstructor(initialData) {\n\t\tsuper()\n\n\t\tthis.data = normalizeData(initialData)\t\t\n\t}\n\n\tnotifyChanged() {\n\t\tthis.invoke(\"change\", this.data)\n\t}\n\n\tsetData(data) {\n\t\tthis.data = normalizeData(data)\n\t\tthis.notifyChanged()\n\t}\n\n}\n\nexport function fixed(data) {\n\treturn new DataSource(data)\n}\n\nexport function promised(promiseFn) {\n\tlet dataSource = new DataSource()\n\n\tnew Promise(promiseFn)\n\t\t.then(data => {\n\t\t\tdataSource.setData(data)\n\t\t})\n\t\t.catch(r => { logger.e(r) })\n\n\treturn dataSource\n}\n\nexport function create() {\n\treturn new DataSource()\n}\n\nexport function fromEnum(Enum) {\n    return new DataSource(_.map(_.keys(Enum), k => { return {label: M(k), value: Enum[k]}}))\n}","import _ from \"underscore\";\n\n/**\n * Format a string message (es: format(\"My name is {0}\", \"Bruno\") returns \"My name is Brnuo\")\n * @param fmt\n * @param values\n * @returns {void|XML|string|*}\n */\nexport function format(fmt, ...values) {\n    let args = values;\n    return fmt.replace(/{(\\d+)}/g, function(match, number) {\n        return typeof args[number] != 'undefined'\n            ? args[number]\n            : match\n            ;\n    });\n}\n\n/**\n * Gets checked value (check for null or undefined) and gets the default value in case of fail\n * @param val Value of function to check\n * @param def Default value or function\n */\nexport function optional(val, def) {\n    let v;\n\n    try {\n        v = _.isFunction(val) ? val() : val\n    } catch(e) {}\n\n    if (v == undefined || v == null) {\n        v = _.isFunction(def) ? def() : def\n    }\n\n    return v\n}\n\n/**\n * safely get a property from object, returning default if not present)\n */\nexport function safeGet(target, prop, def = null) {\n    if (target === undefined || target === null) {\n        return null\n    } else {\n        return optional(target[prop], def)\n    }\n}\n\n\n/**\n * Gets a boolean value casting from val if is not null or undefined\n */\nexport function parseBoolean(val) {\n    if (val == null) { return null }\n    if (val == undefined) { return undefined }\n\n    return (val == true || parseInt(val) > 0 || val == \"true\")\n}\n\n/**\n * Gets a forced boolean value casting also if is null or undefined (false in this case)\n */\nexport function forceBoolean(val) {\n    if (val == null) { return false }\n    if (val == undefined) { return false }\n\n    return (val == true || parseInt(val) > 0 || val == \"true\")\n}\n\n/**\n * Walk in a composite object\n * @param tree\n * @param property\n * @param action\n */\nexport function walk(tree, property = \"children\", action) {\n    if (_.isArray(tree)) {\n        _.each(tree, i => {\n            action(i)\n\n            if (_.isArray(i[property])) {\n                _.each(i[property], t => walk(t, property, action))\n            }\n        })\n    } else {\n        action(tree)\n\n        if (_.isArray(tree[property])) {\n            _.each(tree[property], t => walk(t, property, action))\n        }\n    }\n\n    return tree\n}\n\nclass ObjectUser {\n    constructor(o) {\n        this.o = o\n    }\n\n    run(fn) {\n        fn(this.o)\n        return this.o\n    }\n\n    get() {\n        return this.o\n    }\n}\n\n/**\n * A strategy to do something with an object and get it\n */\nexport function use(o) {\n    return new ObjectUser(o)\n}\n\n/**\n * Make a flatten object from plain object\n */\n\nexport function flatten(target) {\n    if (!_.isObject(target)) {\n        return {}\n    }\n\n    const delimiter = \".\"\n    let output = {}\n\n    function step(obj, prev, currentKey) {\n        let keys = _.keys(obj)\n        _.each(keys, k => {\n            let newKey = prev ? currentKey + delimiter + k : k\n            if (_.isArray(obj)) {\n                newKey = currentKey + \"[\" + k + \"]\"\n            }\n\n            let value = obj[k]\n            if (value != null && value != undefined) {\n                if (_.isObject(value)) {\n                    step(value, obj, newKey)\n                } else {\n                    output[newKey] = value\n                }\n            }\n        })\n    }\n\n    step(target, null, \"\")\n\n    return output\n}\n\n/**\n * Generates unique identifier\n * @returns {string}\n */\nexport function uuid() {\n    var d = new Date().getTime();\n    if(window.performance && typeof window.performance.now === \"function\"){\n        d += performance.now(); //use high-precision timer if available\n    }\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n/**\n * Updates list element found with predicate and return an updated copy of the list\n * @param list\n * @param predicate\n * @param updater\n */\nexport function updatedList(list, predicate, updater, addIfNotFound = false) {\n    if (_.isArray(list) && _.isFunction(predicate) && _.isFunction(updater)) {\n        let result = new Array(list.length)\n        let found = false\n        for (let i = 0; i < list.length; i++) {\n            let v = list[i]\n            if (predicate(v)) {\n                result[i] = _.assign({}, v, updater(v))\n                found = true\n            } else {\n                result[i] = v\n            }\n        }\n\n        if (addIfNotFound && !found) {\n            result.push(updater(null))\n        }\n\n        return result;\n    } else {\n        logger.w(\"Bad parameters in updater. Returning an empty list\")\n        return []\n    }\n\n}\n\n/**\n * List on each list element and assign returned updater object to current element.\n * Each element will be a new element and list will be a new list, using immutability\n * @param list\n * @param updater\n */\nexport function peek(list, updater) {\n    let newList = []\n\n    _.each(list, i => {\n        let obj = updater(i)\n        if (obj === undefined && obj === null) {\n            obj = {}\n        }        \n\n        newList.push(_.assign({}, i, obj))\n    })\n\n    return newList\n}\n\n\n/**\n * Gets object differences\n * @param o1\n * @param o2\n */\n export function diff(o1, o2) {\n    let fo1 = flatten(o1)\n    let fo2 = flatten(o2)\n\n    let diff = []\n    _.each(_.keys(fo1), k => {\n        let v1 = fo1[k]\n        if (!_.has(fo2, k)) {\n            diff.push({property: k, type: \"add\", value: v1})\n        } else {\n            let v2 = fo2[k]\n            if (v1 !== v2) {\n                diff.push({property: k, type: \"change\", value: v1, oldValue: v2})\n            }\n        }\n    })\n\n    _.each(_.keys(fo2), k => {\n        if (!_.has(fo1, k)) {\n            diff.push({property: k, type: \"remove\", value: fo2[k]})\n        }\n    })\n\n    return diff\n }\n \n/**\n * Return true if object tree is different\n * @param o1\n * @param o2\n */\n export function isDifferent(o1, o2) {\n    let fo1 = flatten(o1)\n    let fo2 = flatten(o2)\n\n    try {\n        _.each(_.keys(fo1), k => {\n            let v1 = fo1[k]\n            if (!_.has(fo2, k)) {\n                throw true\n            } else {\n                let v2 = fo2[k]\n                if (v1 !== v2) {\n                    throw true\n                }\n            }\n        })\n\n        _.each(_.keys(fo2), k => {\n            if (!_.has(fo1, k)) {\n                throw true\n            }\n        })\n    } catch (e) {\n        return true\n    }\n\n    return false\n }\n\n\n/**\n * Gets matchings characters positions of s1 in s2, inspired to sublime text commands palette search mode\n */\nexport function stringMatches(s1, s2, caseSensitive = false) {\n    let matches = []\n\n    if (!caseSensitive) {\n        s1 = s1.toLowerCase()\n        s2 = s2.toLowerCase()\n    }\n\n    if (s1 && s1.length > 0 && s2 && s2.length > 0) {\n        let i1 = 0\n        let i2 = 0\n\n        while(i1 < s1.length) {\n            let c1 = s1.charAt(i1++)\n            let i2 = s2.indexOf(c1, i2 + 1)\n            if (i2 != -1) {\n                matches.push({index: i2, char: c1})\n            } else {\n                break\n            }\n        }\n    }\n\n    return matches\n}\n\n\nwindow.stringMatches = stringMatches\n\n\n\n","\"use strict\"\n\nimport {optional} from \"../../utils/lang\";\nimport {isEnter} from \"../utils/keyboard\";\nimport * as ui from \"../utils/ui\";\nimport * as _ from \"underscore\";\nimport {hasPermission} from \"../../api/session\";\n\nexport class DropdownActionButton extends React.Component {\n    componentDidMount() {\n        let button = this.refs.button\n        $(button).dropdown()\n    }\n\n    onItemClick(item) {\n        if (_.isFunction(item.action)) {\n            item.action.apply(this, this.props.arguments)\n        }\n    }\n\n    render() {\n        let index = 0\n        let dropdownItems = _.map(this.props.action.items, i =>             \n            <li key={index++}>\n                <a role=\"menuitem\" tabIndex=\"-1\" href=\"javascript:;\" onClick={this.onItemClick.bind(this, i)}>\n                    {!_.isEmpty(i.icon) &&\n                        <i className={i.icon} />\n                    }\n\n                    {i.label}\n                </a>\n            </li>            \n        )\n\n        let dropdownMenuClass = \"dropdown-menu pull-left\"\n        let align = optional(this.props.action.align, \"left\")\n        if (align === \"right\") {\n            dropdownMenuClass = \"dropdown-menu pull-right\"\n        }\n\n        return (\n            <div className=\"dropdown\">\n                <a  \n                    ref=\"button\"\n                    href=\"javascript:;\"\n                    className={this.props.className}\n                    data-toggle=\"dropdown\"\n                    data-placement=\"bottom\"\n                    title={this.props.action.tooltip}>\n\n                    <i className={this.props.action.icon}></i>\n                </a>\n                <ul className={dropdownMenuClass}>\n                    {dropdownItems}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport class ActionButton extends React.Component {\n    onClick() {\n        let action = this.props.action\n        if (_.isFunction(action.action)) {\n            action.action.apply(this, this.props.arguments)\n        }\n    }\n\n    componentDidMount() {\n        $(this.refs.button).tooltip({trigger: \"hover\"});\n    }\n\n    componentWillUnmount() {\n        $(this.refs.button).tooltip(\"dispose\");\n    }\n\n    render() {\n        let className = \"actions__item\"\n        if (this.props.className) {\n            className += \" \" + this.props.className\n        }\n\n        return (\n            <a  \n                ref=\"button\" \n                href=\"javascript:;\" \n                className={className}\n                data-toggle=\"tooltip\" \n                data-placement=\"bottom\" \n                title={this.props.action.tooltip} \n                onClick={this.onClick.bind(this)}>\n                <i className={this.props.action.icon}></i>\n            </a>\n        )\n    }\n}\nexport class Actions extends React.Component {\n\n    getPermittedActions() {\n        return _.filter(this.props.actions, a => hasPermission(a.permissions) === true)\n    }\n\n    render() {\n        let actionKey = 1\n        let actions = this.getPermittedActions()\n\n        return (\n            !_.isEmpty(actions) &&\n            <div className=\"actions\">\n                {actions.map(a => React.createElement(Actions.getButtonClass(a), {key: actionKey++, action: a}))}\n            </div>\n\n        )\n    }\n}\n\nActions.getButtonClass = function(action) {\n    switch (action.type) {\n        case \"dropdown\":\n            return DropdownActionButton\n        default:\n            return ActionButton\n    }\n}\n\nexport class HeaderBlock extends React.Component {\n    render() {\n        return (\n            <header className=\"content__title\">\n                {(!_.isEmpty(this.props.title)) &&\n                    <h1>{this.props.title}</h1>\n                }\n\n                {!_.isEmpty(this.props.subtitle) &&\n                    <small>{this.props.subtitle}</small>\n                }\n\n                {(!_.isEmpty(this.props.actions)) &&\n                    <Actions actions={this.props.actions} />\n                }\n            </header>\n        )\n    }\n}\n\nexport class Card extends React.Component {\n    render() {\n        let actionKey = 1\n        let cardClass = optional(this.props.className, \"card\")\n        let bodyClass = \"card-body\"\n        if (this.props.padding) {\n            bodyClass += \" card-padding\"\n        }\n        let titleClass = \"card-title\"\n        if (this.props.inverseHeader) {\n            titleClass += \" card-title-inverse\"\n        }\n        let subtitleClass = \"card-title\"\n        if (this.props.inverseHeader) {\n            subtitleClass += \" card-title-inverse\"\n        }\n        return (\n            <div className={cardClass}>\n                <div className={bodyClass}>\n                    {!_.isEmpty(this.props.title) &&\n                        <h4 className={titleClass}>{this.props.title}</h4>\n                    }\n\n                    {!_.isEmpty(this.props.subtitle) &&\n                        <h6 className={headerClass}>{this.props.subtitle}</h6>\n                    }\n\n                    {!_.isEmpty(this.props.actions) && \n                        <Actions actions={this.props.actions} />\n                    }\n\n                    {this.props.children}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class FloatingButton extends React.Component {\n    onClick() {\n        if (_.isFunction(this.props.onClick)) {\n            this.props.onClick()\n        }\n    }\n\n    render() {\n        return (\n            <button type=\"button\" className=\"btn btn--action btn-danger\" onClick={this.onClick.bind(this)}><i className={this.props.icon}></i></button>\n        )\n    }\n}\n\n\nexport class ActionsMatcher {\n    constructor(defaultActions) {\n        this.defaultActions = defaultActions\n    }\n\n    match(userActions) {\n        let actions = []\n\n        if (userActions) {\n            if (!_.isArray(userActions)) {\n                throw new Error(\"grid.actions must be an array but is \" + userActions)\n            }\n\n            _.each(userActions, a => {\n                if (_.isObject(a)) {\n                    actions.push(a)\n                } else if (typeof a === \"string\") {\n                    let defaultAction = _.find(this.defaultActions, d => d.id === a)\n                    if (!_.isEmpty(defaultAction)) {\n                        actions.push(defaultAction)\n                    } else {\n                        logger.w(\"Default action not found: \" + a)\n                    }\n                }\n            })\n        } else {\n            actions = this.defaultActions\n        }\n\n        return actions;\n    }\n}\n\n\nexport class EditableText extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            editing: _.isEmpty(props.value),\n            value: props.value\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.setState({\n            editing: _.isEmpty(newProps.value),\n            value: newProps.value\n        })\n    }\n\n    onBlur() {\n        this.setState({editing: false, value: this.state.lastValue})\n    }\n\n    onValueChange(e) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        this.setState(_.assign(this.state, {editing: true, value: e.target.value}))\n    }\n\n    onKeyDown(e) {\n        if (isEnter(e.which)) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            this.setState(_.assign(this.state, {editing: false, lastValue: this.state.value}))\n\n            if (_.isFunction(this.props.onChange)) {\n                this.props.onChange(this.state.value)\n            }\n        }\n    }\n\n    edit() {\n        this.setState(_.assign(this.state, {editing: true, lastValue: this.state.value}))\n    }\n\n    render() {\n        let className = this.props.className\n        return (\n            (this.state.editing || _.isEmpty(this.state.value))  ?\n                <div className={\"fg-line editable-text \" + optional(className, \"\")}>\n                    <input\n                        ref=\"name\"\n                        type=\"text\"\n                        className=\"form-control\"\n                        onKeyDown={this.onKeyDown.bind(this)}\n                        onChange={this.onValueChange.bind(this)}\n                        value={optional(this.state.value, \"\")}\n                        placeholder={this.props.placeholder}\n                        autoFocus=\"autoFocus\"\n                        onBlur={this.onBlur.bind(this)}/>\n                </div>\n                :\n                <span className={optional(className, \"\")} onClick={this.edit.bind(this)}>{this.state.value}</span>\n        )\n    }\n}\n\n\nexport class HeaderBlockWithBreadcrumbs extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        let title;\n        if (_.isArray(this.props.title)) {\n            title = this.props.title.map((item, i) => <BreadcrumbItem key={Math.random()} title={item.title} url={item.url} first={i == 0} last={i < this.props.title.length -1} />);\n\n        } else {\n            title = this.props.title\n        }\n\n        return (\n            <header className=\"content__title\">\n                {(!_.isEmpty(title)) &&\n                    <h1>{title}</h1>\n                }\n\n                {!_.isEmpty(this.props.subtitle) &&\n                    <small>{this.props.subtitle}</small>\n                }\n\n                {(!_.isEmpty(this.props.actions)) &&\n                    <Actions actions={this.props.actions} />\n                }\n            </header>\n        )\n    }\n}\n\nclass BreadcrumbItem extends React.Component {\n    constructor(props) {\n        super(props)\n        this.title = this.props.title;\n        this.url = this.props.url;\n        this.last = optional(this.props.last, false);\n        this.first = optional(this.props.first, false);\n    }\n\n    onClick() {\n        if (this.url) {\n            ui.navigate(this.url)\n        }\n    }\n\n    render() {\n\n\n        let style = { marginLeft:  !this.first? \"10px\" : \"px\"}\n        if (this.url)\n            style.cursor = \"pointer\";\n\n        let iconStyle= {\n            marginLeft: \"10px\"\n        }\n        return (\n            <span onClick={this.onClick.bind(this)} style={style}>\n                {this.title}\n                {this.last && <i style={iconStyle} className=\"zmdi zmdi-caret-right\"/>}\n            </span>\n        )\n    }\n\n\n}\n","\"use strict\"\n\nimport * as datasource from \"../../utils/datasource\";\nimport {LookupStore, MultiValueSettingsStore, SelectStore} from \"../../stores/entities\";\nimport {\n    freeLookup,\n    freeSelect,\n    getLookupResult,\n    getLookupValues,\n    getSelectEntities,\n    getSelectValues,\n    setMultivalueSettings,\n    updateMultivalueSettings\n} from \"../../actions/entities\";\nimport {discriminated} from \"../../utils/ajex\";\nimport * as query from \"../../api/query\";\nimport {Control, Lookup, MultiCheckbox, Select} from \"./forms\";\nimport {optional} from \"../../utils/lang\";\n\nlet LOOKUP_DISCRIMINATOR = 1\nfunction nextLookupDiscriminator() {\n    return \"lookup_\" + LOOKUP_DISCRIMINATOR++\n}\n\nexport class MultiCheckboxByValue extends Control {\n    constructor(props) {\n        super(props)\n        this.state = {}\n        this.discriminator = props.field.property;\n    }\n\n    componentDidMount() {\n\n        let model = this.props.model\n        let field = this.props.field\n\n        model.once(\"load\", () => {\n            let items = optional(model.get(field.property), [])\n            setMultivalueSettings({discriminator: this.discriminator, items})\n        })\n\n        MultiValueSettingsStore.subscribe(this,  state => {\n            this.state.items = discriminated(state, this.discriminator).items\n            this.forceUpdate()\n        })\n\n    }\n\n    componentWillUnmount() {\n\n        MultiValueSettingsStore.unsubscribe(this);\n\n\n        freeSettingValues({discriminator: this.discriminator});\n\n    }\n\n    onValueChange(elem, e) {\n        updateMultivalueSettings({\n            discriminator: this.discriminator,\n            itemType: elem.itemType,\n            enabled: e.target.checked\n        })\n    }\n\n\n    render() {\n\n\n        let model = this.props.model;\n        let field = this.props.field;\n\n        let items = optional(this.state.items, [])\n\n        model.set(field.property, items)\n\n        let checks = _.map(items, (elem, i) => {\n            let type = elem.itemType;\n            let description = _.isFunction(this.props.formatter) ? this.props.formatter(elem) : M(type);\n\n            let key = i + \"_\" + type;\n            let enabled = elem.enabled;\n\n            return (\n                <div key={key} className=\"col-xs-12 zero-padding\">\n                    <div className=\"row\">\n                        <div className=\"col-xs-10 zero-padding\">\n                            <p className=\"margin-top-20 text-evaluation-description\">{description}</p>\n                        </div>\n                        <div className=\"col-xs-2 zero-padding\">\n                            <div className=\"toggle-switch yesno\">\n\n                                <input\n                                    type=\"checkbox\"\n                                    hidden=\"hidden\"\n                                    onChange={this.onValueChange.bind(this, elem)}\n                                    name={key}\n                                    id={key}\n                                    data-property={key}\n                                    checked={optional(enabled, false)}/>\n\n                                <label htmlFor={key} className=\"ts-helper\"></label>\n                                <label htmlFor={key} className=\"ts-label\">{field.placeholder}</label>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            )\n        });\n\n        return (\n            <div className={\"col-xs-12 zero-padding\"}>\n\n                {checks}\n\n            </div>\n        );\n\n    }\n\n}\n\nexport class EntitiesLookupContainer extends Control  {\n    constructor(props) {\n        super(props)\n\n        this.discriminator = props.id\n        if (_.isEmpty(this.discriminator)) {\n            throw new Error(\"Please specify an id of this lookup\")\n        }\n\n        this.query = query.create()\n        this.query.setPage(1)\n        this.query.setRowsPerPage(20)\n        this.__queryOnChange = () => {\n            getLookupResult({discriminator: this.discriminator, entity: this.props.entity, query: this.query})\n        }\n\n        this.datasource = datasource.create()\n\n        this.state = {result: {}}\n    }\n\n    componentDidMount() {\n        LookupStore.subscribe(this, state => {\n        \tthis.datasource.setData(discriminated(state, this.discriminator).result)\n        })\n\n        this.query.on(\"change\", this.__queryOnChange)\n    }\n\n    componentWillUnmount() {\n    \tLookupStore.unsubscribe(this)\n\n        this.query.off(\"change\", this.__queryOnChange)\n\n        freeLookup({discriminator: this.discriminator})\n    }\n\n    render() {\n        return React.createElement(Lookup, _.assign({}, this.props, {query: this.query, datasource: this.datasource}))\n    }\n}\n\nexport class ValuesLookupContainer extends Control {\n\n    constructor(props) {\n\n        super(props)\n\n        this.discriminator = props.id\n\n        if (_.isEmpty(this.discriminator)) {\n            throw new Error(\"Please specify an id for lookup\")\n        }\n\n        let collection = this.getCollection()\n        if (_.isEmpty(collection)) {\n            throw new Error(\"Please specify a collection for lookup\")\n        }\n\n        this.__queryOnChange = () => {\n            collection = this.getCollection()\n            getLookupValues(\n                {\n                    discriminator: this.discriminator,\n                    collection: collection,\n                    keyword: this.query.keyword,\n                    page: this.query.page,\n                    rowsPerPage: this.query.rowsPerPage,\n                })\n        }\n\n        this.query = query.create()\n        this.query.setPage(1)\n        this.query.setRowsPerPage(15)\n        this.datasource = datasource.create()\n\n        this.state = {values: {}}\n    }\n\n    getCollection() {\n        let collection = this.props.collection\n        if (_.isFunction(this.props.getCollection)) {\n            collection = this.props.getCollection(this.props.model)\n        }\n        return collection;\n    }\n\n    componentDidMount() {\n        LookupStore.subscribe(this, state => {\n            this.datasource.setData(discriminated(state, this.discriminator).values)\n        })\n\n        this.query.on(\"change\", this.__queryOnChange)\n    }\n\n    componentWillUnmount() {\n        LookupStore.unsubscribe(this)\n\n        this.query.off(\"change\", this.__queryOnChange)\n\n        freeLookup({discriminator: this.discriminator})\n    }\n\n    render() {\n        return React.createElement(Lookup, _.assign({}, this.props, {query: this.query, datasource: this.datasource}))\n    }\n\n}\n\n\n\nexport class ValuesSelectContainer extends Control {\n\n    constructor(props) {\n        super(props)\n\n        this.discriminator = props.id\n\n        if (_.isEmpty(this.discriminator)) {\n            throw new Error(\"Please specify an id for select\")\n        }\n\n        if (_.isEmpty(this.props.collection)) {\n            throw new Error(\"Please specify a collection for select\")\n        }\n\n        this.datasource = datasource.create()\n    }\n\n    reload() {\n        getSelectValues({discriminator: this.discriminator, collection: this.props.collection, params: this.getParams()})\n    }\n\n    componentDidMount() {\n        SelectStore.subscribe(this,  state => {\n            this.datasource.setData(discriminated(state, this.discriminator).values)\n        })\n\n        this.reload()\n    }\n\n    getParams() {\n        return optional(this.props.params, {})\n    }\n\n    componentWillUnmount() {\n        SelectStore.unsubscribe(this)\n\n        freeSelect({discriminator: this.discriminator})\n    }\n\n    render() {\n        return React.createElement(Select, _.assign({}, this.props, {datasource: this.datasource}))\n    }\n\n}\n\nexport class EntitiesSelectContainer extends Control {\n\n    constructor(props) {\n        super(props)\n\n        if (_.isEmpty(this.props.entity)) {\n            throw new Error(\"Please specify an entity for select\")\n        }\n\n        this.discriminator = `entity_select_${this.props.entity}`\n        this.datasource = datasource.create()\n        this.query = null\n    }\n\n    componentDidMount() {\n        SelectStore.subscribe(this,  state => {\n            this.datasource.setData(discriminated(state, this.discriminator).values)\n        })\n\n        let model = this.props.model\n\n        this.query = null\n        if (this.props.query) {\n            if (_.isFunction(this.props.query)) {\n                this.query = this.props.query(model)\n            } else {\n                this.query = this.props.query\n            }\n        }\n\n        if (!_.isEmpty(this.query)) {\n            this.__onQueryChange = () => {\n                getSelectEntities({discriminator: this.discriminator, entity: this.props.entity, query: this.query})\n            }\n\n            this.query.on(\"change\", this.__onQueryChange)\n        }\n\n        getSelectEntities({discriminator: this.discriminator, entity: this.props.entity, query: this.query})\n    }\n\n    componentWillUnmount() {\n        SelectStore.unsubscribe(this)\n        if (this.query) {\n            this.query.off(\"change\", this.__onQueryChange)\n        }\n        freeSelect({discriminator: this.discriminator})\n    }\n\n    render() {\n        return React.createElement(Select, _.assign({}, this.props, {datasource: this.datasource}))\n    }\n\n}\n\nexport class EntitiesMultiCheckContainer extends Control {\n\n    constructor(props) {\n\n        super(props);\n\n        this.discriminator = props.id;\n        if (_.isEmpty(this.discriminator)) {\n            throw new Error(\"Please specify an id of this lookup\")\n        }\n\n        this.query = query.create();\n\n        this.datasource = datasource.create();\n\n        this.state = {result: {}};\n\n    }\n\n    componentDidMount() {\n\n        LookupStore.subscribe(this, state => {\n            this.datasource.setData(discriminated(state, this.discriminator).result);\n        });\n\n        getLookupResult({discriminator: this.discriminator, entity: this.props.entity, query: this.query});\n\n    }\n\n    componentWillUnmount() {\n\n        LookupStore.unsubscribe(this);\n\n        this.query.off(\"change\", this.__queryOnChange);\n\n        freeLookup({discriminator: this.discriminator});\n\n    }\n\n    render() {\n        let entityDescriptor = optional(this.props.entityDescriptor, {});\n        return React.createElement(MultiCheckbox, _.assign({}, this.props, {query: this.query, datasource: this.datasource, entityDescriptor: entityDescriptor, activeColor: this.props.activeColor}));\n    }\n\n}","\"use strict\"\n\nimport M from \"../../strings\"\nimport {Actions, Card} from \"./common\"\nimport {format, optional, diff} from \"../../utils/lang\"\nimport {Observable} from \"../../aj/events\"\nimport {ActionsCell, Grid, resultToGridData} from \"./grids\"\nimport * as query from \"../../api/query\"\nimport {isCancel} from \"../utils/keyboard\"\nimport * as inputfile from \"../utils/inputfile\"\nimport * as datasource from \"../../utils/datasource\"\nimport {parseBoolean} from \"../../utils/lang\"\nimport * as _ from \"underscore\"\n\nexport const VALIDATION_ERROR = {}\n\nexport class Model extends Observable {\n    constructor(form) {\n        super()\n\n        this.descriptor = null\n        this.initialData = {}\n        this.data = {}\n        this.validationResult = {}\n        this.initialized = false\n        this.form = form\n        this.changesTrackingDisabled = false\n    }\n\n    invalidateForm() {\n        if (this.form) {\n            this.form.forceUpdate()\n        }\n    }\n\n    load(data) {\n        this.data = data ? data : {}\n        if (!this.initialized && data != null) {\n            this.invoke(\"load\", this)\n            this.initialized = true\n\n            this.initialData = _.clone(this.data)\n        }\n    }\n\n    findField(property) {\n        if (this.descriptor == null) {\n            throw new Error(\"Please specify a descriptor\")\n        }\n\n        const Break = {}\n        let field = null\n        try {\n            if (!_.isEmpty(this.descriptor.areas)) {\n                this.descriptor.areas.forEach(a => {\n                    if (!_.isEmpty(a.tabs)) {\n                        a.tabs.forEach(t => {\n                            if (!_.isEmpty(t.fields)) {\n                                t.fields.forEach(f => {\n                                    if (f.property == property) {\n                                        field = f\n                                        throw Break\n                                    }\n                                })\n                            }\n                            if (field != null) {\n                                throw Break\n                            }\n                        })\n                    }\n                    if (field != null) {\n                        return\n                    }\n                    if (!_.isEmpty(a.fields)) {\n                        a.fields.forEach(f => {\n                            if (f.property == property) {\n                                field = f\n                                throw Break\n                            }\n                        })\n                    }\n                    if (field != null) {\n                        throw Break\n                    }\n                })\n            }\n\n            if (field == null) {\n                if (!_.isEmpty(this.descriptor.tabs)) {\n                    this.descriptor.tabs.forEach(t => {\n                        if (!_.isEmpty(t.fields)) {\n                            t.fields.forEach(f => {\n                                if (f.property == property) {\n                                    field = f\n                                    throw Break\n                                }\n                            })\n                        }\n                        if (field != null) {\n                            throw Break\n                        }\n                    })\n                }\n            }\n\n            if (field == null) {\n                if (!_.isEmpty(this.descriptor.fields)) {\n                    this.descriptor.fields.forEach(f => {\n                        if (f.property == property) {\n                            field = f\n                            throw Break\n                        }\n                    })\n                }\n            }\n        } catch (e) {\n            if (e !== Break) {\n                throw e\n            }\n        }\n\n        return field\n    }\n\n    hasChanges() {\n        let d = diff(this.data, this.initialData)\n        return d.length > 0\n    }\n\n    trackChanges() {\n        this.changesTrackingDisabled = false\n    }\n\n    untrackChanges() {\n        this.changesTrackingDisabled = true\n    }\n\n    reset() {\n        this.initialized = false\n        this.data = {}\n        this.initialData = {}\n    }\n\n    set(property, value) {\n        let initialValue = this.data[property]\n        this.data[property] = value \n\n        if (!this.changesTrackingDisabled) {\n            this.invoke(\"property:change\", property, value)\n        }   \n    }\n\n    assign(property, value) {\n        let actual = optional(this.get(property), {})\n        this.set(property, _.assign(actual, value))\n    }\n\n    get(property) {\n        if (_.has(this.data, property)) {\n            return this.data[property]\n        } else {\n            return null\n        }\n    }\n\n    validateField(validationResult, field) {\n        let value = this.data[field.property]\n        try {\n            if (_.isFunction(field.validator)) {\n                field.validator(value)\n            }\n\n            validationResult[field.property] = {\n                valid: true,\n                message: null\n            }\n        } catch (e) {\n            validationResult[field.property] = {\n                valid: false,\n                message: e.message\n            }\n        }\n    }\n\n    sanitized() {\n        let sanitized = {}\n\n        _.each(_.keys(this.data), property => {\n            let value = this.data[property]\n            let field = this.findField(property)\n            if (field) {\n                if (_.isFunction(field.sanitizer)) {\n                    value = field.sanitizer(value)\n                }\n            }\n            sanitized[property] = value\n        })\n\n        return sanitized\n    }\n\n    validate() {\n        this.validationResult = {}\n        if (!_.isEmpty(this.descriptor.areas)) {\n            this.descriptor.areas.forEach(a => {\n                if (!_.isEmpty(a.tabs)) {\n                    a.tabs.forEach(t => {\n                        if (!_.isEmpty(t.fields)) {\n                            t.fields.forEach(f => {\n                                this.validateField(this.validationResult, f)\n                            })\n                        }\n                    })\n                }\n                if (!_.isEmpty(a.fields)) {\n                    a.fields.forEach(f => {\n                        this.validateField(this.validationResult, f)\n                    })\n                }\n            })\n        }\n\n        if (!_.isEmpty(this.descriptor.tabs)) {\n            this.descriptor.tabs.forEach(t => {\n                if (!_.isEmpty(t.fields)) {\n                    t.fields.forEach(f => {\n                        this.validateField(this.validationResult, f)\n                    })\n                }\n            })\n        }\n\n        if (!_.isEmpty(this.descriptor.fields)) {\n            this.descriptor.fields.forEach(f => {\n                this.validateField(this.validationResult, f)\n            })\n        }\n\n        let invalid = _.any(this.validationResult, v => !v.valid)\n        if (invalid) {\n            throw VALIDATION_ERROR\n        }\n    }\n\n    resetValidation() {\n        this.validationResult = {}\n    }\n\n    setError(property, message) {\n        this.validationResult[property] = {\n            valid: false,\n            message: message\n        }\n    }\n\n    resetError(property) {\n        this.validationResult[property] = {\n            valid: true\n        }\n    }\n}\n\nexport class Label extends React.Component {\n    render() {\n        let field = this.props.field\n        let className = optional(this.props.className, \"\")\n\n        return (\n            !_.isEmpty(field.label) && <label style={{width: \"100%\"}} htmlFor={field.property} className={className}>{field.label}</label>\n        )\n    }\n}\n\nexport class Area extends React.Component {\n\n    isFieldVisible(field) {\n        let descriptor = this.props.descriptor\n        let model = this.props.model\n\n        if (_.isFunction(descriptor.visibility)) {\n            return descriptor.visibility(field, model, descriptor)\n        }\n\n        return true\n    }\n\n    getExtra() {\n        return null\n    }\n\n    render() {\n        let descriptor = this.props.descriptor\n        let area = this.props.area\n        let inline = optional(descriptor.inline, false)\n        inline = optional(area.inline, inline)\n        let defaultFieldCass = inline ? InlineField : Field\n        let tabs = !_.isEmpty(area.tabs) && <Tabs tabs={area.tabs} model={this.props.model} descriptor={descriptor} />\n        let fields = !_.isEmpty(area.fields) && _.filter(area.fields, f => this.isFieldVisible(f)).map(f => React.createElement(optional(() => f.component, () => defaultFieldCass), {key: f.property, model: this.props.model, field: f, descriptor: descriptor}))\n\n        return (\n            <Card title={area.title} subtitle={area.subtitle} actions={area.actions}>\n                {tabs}\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        {fields}\n                    </div>\n                </div>\n                <div className=\"clearfix\"></div>\n\n                {this.getExtra()}\n            </Card>\n        )\n    }\n}\n\nexport class AreaNoCard extends React.Component {\n\n    isFieldVisible(field) {\n        let descriptor = this.props.descriptor\n        let model = this.props.model\n\n        if (_.isFunction(descriptor.visibility)) {\n            return descriptor.visibility(field, model, descriptor)\n        }\n\n        return true\n    }\n\n    render() {\n        let descriptor = this.props.descriptor\n        let area = this.props.area\n        let tabs = !_.isEmpty(area.tabs) && <Tabs tabs={area.tabs} model={this.props.model} />\n        let fields = !_.isEmpty(area.fields) && _.filter(area.fields, f => this.isFieldVisible(f)).map(f => React.createElement(optional(() => f.component, () => Field), {key: f.property, model: this.props.model, field: f,  descriptor: descriptor}))\n        let actionKey = 1\n\n        return (\n            <div className=\"area-no-card\">\n                <div className=\"area-no-card-header\">\n                    {area.title &&\n                        <h2>{area.title} {area.subtitle && <small>{area.subtitle}</small>}</h2>\n                    }\n\n                    <Actions actions={area.actions} />\n                </div>\n                <div className=\"area-no-card-body\">\n                    {tabs}\n                    <div className=\"row\">{fields}</div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport class Tabs extends React.Component {\n\n    componentDidMount() {\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\".tab-button\").click((e) => {\n            e.preventDefault()\n            $(this).tab(\"show\")\n        })\n    }\n\n    isFieldVisible(field) {\n        let descriptor = this.props.descriptor\n        let model = this.props.model\n\n        if (_.isFunction(descriptor.visibility)) {\n            return descriptor.visibility(field, model, descriptor)\n        }\n\n        return true\n    }\n\n    render() {\n        let descriptor = this.props.descriptor\n        let first = true\n        let tabs = this.props.tabs\n        let nav = tabs.map(n => {\n            let el = (\n                <li key={\"nav_\" + n.key} className={first ? \"active\" : \"\"}><a className=\"tab-button\" role=\"tab\" data-toggle=\"tab\" href={`#${n.key}`}>{n.title}</a></li>\n            )\n            first = false\n            return el\n        })\n        first = true\n        let panes = tabs.map(c => {\n            let inline = optional(descriptor.inline, false)\n            inline = optional(c.inline, inline)\n            let defaultFieldClass = inline ? InlineField : Field\n            let fields = !_.isEmpty(c.fields) && _.filter(c.fields, f => this.isFieldVisible(f)).map(f => React.createElement(optional(() => f.component, () => defaultFieldClass), {key: f.property, model: this.props.model, field: f, onCancel: this.props.onCancel, canSave: this.props.canSave}))\n            return (\n                <div key={key} role=\"tabpanel\" className={\"tab-pane \" + (this.getTabClass(selectedTab, c.id, firstTabId))} id={`${c.key}`}>\n                    <div className=\"row\">{fields}</div>\n                    <div className=\"clearfix\"></div>\n                </div>\n            )\n            first = false\n            return el\n        })\n\n\n\n        return (\n            <div>\n                <ul className=\"tab-nav\" style={{textAlign: \"center\"}} role=\"tablist\">\n                    {nav}\n                </ul>\n\n                <div className=\"tab-content\">\n                    {panes}\n                </div>\n            </div>\n        )\n    }\n}\n\nlet AREA_KEY = 1\nlet TAB_KEY = 1\n\nfunction generateKeys(descriptor) {\n    if (!descriptor.hasKeys) {\n        if (!_.isEmpty(descriptor.areas)) {\n            descriptor.areas.forEach(a => {\n                if (_.isEmpty(a.key)) {\n                    a.key = \"area\" + AREA_KEY++\n                }\n\n                if (!_.isEmpty(a.tabs)) {\n                    a.tabs.forEach(t => {\n                        if (_.isEmpty(t.key)) {\n                            t.key = \"tab\" + TAB_KEY++\n                        }\n                    })\n                }\n            })\n        }\n\n        if (!_.isEmpty(descriptor.tabs)) {\n            descriptor.tabs.forEach(t => {\n                if (_.isEmpty(t.key)) {\n                    t.key = \"tab\" + TAB_KEY++\n                }\n            })\n        }\n\n        descriptor.hasKeys = true\n    }\n}\n\nexport class FormSubmitEvent {\n    constructor(form, model) {\n        this.form = form\n        this.model = model\n        this.stopped = false\n    }\n\n    stop() {\n        this.stopped = true\n    }\n\n    forceSubmit() {\n        this.form.forceSubmit()\n    }\n}\n\nexport class FormBody extends React.Component {\n\n    isFieldVisible(field) {\n        let descriptor = this.props.descriptor\n        let model = this.props.model\n\n        if (_.isFunction(descriptor.visibility)) {\n            return descriptor.visibility(field, model, descriptor)\n        }\n\n        return true\n    }\n\n    render() {\n        let descriptor = this.props.descriptor\n        generateKeys(descriptor)\n        let model = this.props.model\n        let inline = optional(descriptor.inline, false)\n        let defaultFieldCass = inline ? InlineField : Field\n        let areas = !_.isEmpty(descriptor.areas) && descriptor.areas.map(a => React.createElement(optional(() => a.component, () => Area), {key: a.key, model: model, area: a, descriptor}))\n        let tabs = !_.isEmpty(descriptor.tabs) && <Tabs tabs={descriptor.tabs} model={model} descriptor={descriptor} />\n        let fields = !_.isEmpty(descriptor.fields) && _.filter(descriptor.fields, f => this.isFieldVisible(f)).map(f => React.createElement(optional(() => f.component, () => defaultFieldCass), {key: f.property, model: model, field: f, descriptor: descriptor, params : this.props.params, onCancel: this.props.onCancel}))\n        let showInCard = optional(descriptor.showInCard, true)\n\n        return (\n            <div className=\"form-body\">\n                {areas}\n                {(tabs.length > 0 || fields.length > 0) &&\n                    (showInCard\n                        ?\n                        <Card padding=\"false\">\n                            {tabs}\n                            <div className=\"p-l-30 p-r-30\">\n                                {fields}\n                            </div>                            \n                            <div className=\"clearfix\"></div>\n                        </Card> \n                        :\n                        <div className=\"form-body-content\">\n                            {tabs}\n                            {fields}\n                            <div className=\"clearfix\"></div>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport class Form extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.model = new Model(this);\n        this.model.once(\"load\", () => {\n            let descriptor = this.props.descriptor;\n            if (_.isFunction(descriptor.onModelLoadFirstTime)) {\n                descriptor.onModelLoadFirstTime(this.model)\n            }\n        })\n\n        this.model.on(\"load\", () => {\n            let descriptor = this.props.descriptor\n            if (_.isFunction(descriptor.onModelLoad)) {\n                descriptor.onModelLoad(this.model)\n            }\n        })\n\n\n    }\n\n    submit() {\n        this.onSubmit()\n    }\n\n    forceSubmit() {\n        if (_.isFunction(this.props.onSubmit)) {\n            this.props.onSubmit(this.model.sanitized())\n        }\n    }\n\n    onSubmit(e) {\n        if (e) {\n            e.preventDefault()\n        }\n\n        let event = new FormSubmitEvent(this, this.model)\n\n        try {\n            let descriptor = this.props.descriptor\n            if (_.isFunction(descriptor.beforeSubmit)) {\n                descriptor.beforeSubmit(event)\n\n                if (event.stopped) {\n                    return\n                }\n            }\n        } catch (e) {\n            if (e === VALIDATION_ERROR) {\n                this.forceUpdate()\n                return\n            } else {\n                throw e\n            }\n        }\n\n        try {\n            this.model.validate()\n            if (_.isFunction(this.props.onSubmit)) {\n                this.props.onSubmit(this.model.sanitized())\n            }\n        } catch (e) {\n            if (e === VALIDATION_ERROR) {\n                this.forceUpdate()\n            } else {\n                throw e\n            }\n        }\n    }\n\n    onCancel(e) {\n        if (_.isFunction(this.props.onCancel)) {\n            this.props.onCancel()\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.model.descriptor = nextProps.descriptor\n        this.model.load(nextProps.data)\n    }\n\n    isFieldVisible(field) {\n        let descriptor = this.props.descriptor\n        let model = this.model\n\n        if (_.isFunction(descriptor.visibility)) {\n            return descriptor.visibility(field, model, descriptor)\n        }\n\n        return true\n    }\n\n    getExtra() {\n        return null\n    }\n\n    showFormFooter() {\n        return optional(this.props.descriptor.showFormFooter, true)\n    }\n\n\n    render() {\n        let descriptor = this.props.descriptor\n        let model = this.model\n\n        let inline = optional(descriptor.inline, false)\n        let className = inline ? \"form-horizontal\" : \"\"\n        let canSave = this.props.canSave\n        let canCancel = this.props.canCancel\n        let showFormFooter = this.showFormFooter();\n\n\n        return (\n            <div className=\"form\">\n                <form action=\"javascript:;\" className={className} role=\"form\" onSubmit={this.onSubmit.bind(this)}>\n                    <FormBody descriptor={descriptor} model={model} />\n\n                    {showFormFooter &&\n                    <FormFooter descriptor={descriptor}  model={model} onCancel={this.onCancel.bind(this)}/>\n                    }\n                    <div className=\"clearfix\"></div>\n                    {this.getExtra()}\n                </form>\n            </div>\n        )\n    }\n}\nclass FormFooter extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n\n    onCancel() {\n        if(_.isFunction(this.props.onCancel)) {\n            this.props.onCancel();\n        }\n    }\n\n    canSave() {\n        let descriptor = this.props.descriptor;\n        return _.isFunction(descriptor.canSave) ? descriptor.canSave(this.props.model) : true\n    }\n\n    canCancel() {\n        let descriptor = this.props.descriptor;\n        return _.isFunction(descriptor.canCancel) ? descriptor.canCancel(this.props.model) : true\n    }\n\n    render() {\n        const descriptor = this.props.descriptor;\n\n        let submitText = M(\"save\");\n        let cancelText = M(\"back\");\n        if(descriptor) {\n            if(descriptor.submitText) {\n                submitText = descriptor.submitText;\n            }\n            if(descriptor.cancelText) {\n                cancelText = descriptor.cancelText;\n            }\n        }\n\n        const style = {marginBottom: \"30px\"}\n\n        const canSave = this.canSave();\n        const canCancel = this.canCancel();\n\n        return (\n\n            <div className=\"btn-actions-bar\" style={style}>\n                {canCancel &&\n                <button type=\"button\" className=\"btn btn-dark\" onClick={this.onCancel.bind(this)}><i className=\"zmdi zmdi-arrow-back\" /> {cancelText}</button>\n                }\n                {canSave && <button type=\"submit\" className=\"btn btn-primary\"><i className=\"zmdi zmdi-save\" /> {submitText}</button>}\n            </div>\n\n        );\n    }\n\n}\n\n/************************\n    Controls and Fields\n ************************/\nexport const FORM_FOOTER = \"actionsButtons\"\nexport class Field extends React.Component {\n    render() {\n\n        if(this.props.field.property == FORM_FOOTER) {\n\n            return (\n\n                <FormFooter descriptor={this.props.descriptor}  model={this.props.model} onCancel={this.onCancel.bind(this)} />\n\n            );\n\n        }\n\n        let model = this.props.model\n        let className = \"form-group \" + (this.props.field.size ? this.props.field.size : \"col-sm-12\")\n        let control = React.createElement(_.isFunction(this.props.field.getControl) ? this.props.field.getControl(model) : this.props.field.control, _.assign({\n            field: this.props.field,\n            model: this.props.model\n        }, this.props.field.props));\n        let hasLabel = this.props.field.label != undefined && this.props.field.label != null\n        let validationResult = optional(model.validationResult[this.props.field.property], {valid: true})\n        if (!validationResult.valid) {\n            className += \" has-error\"\n        }\n        if (!_.isEmpty(this.props.field.className)) {\n            className += \" \" + this.props.field.className\n        }\n        return (\n            <div className={className} style={{minHeight: 58}}>\n                {hasLabel &&\n                    <Label field={this.props.field}/>\n                }\n                {control}\n                {!validationResult.valid && !_.isEmpty(validationResult.message) &&\n                    <small className=\"help-block\">{validationResult.message}</small>\n                }\n                <i className=\"form-group__bar\"></i>\n            </div>\n        )\n    }\n}\n\nexport class InlineField extends React.Component {\n    render() {\n        if(this.props.field.property == FORM_FOOTER) {\n            return (\n                <FormFooter descriptor={this.props.descriptor} model={this.props.model}  onCancel={this.onCancel.bind(this)} />\n            );\n\n        }\n\n        let model = this.props.model\n        let className = \"form-group \" + (this.props.field.size ? this.props.field.size : \"col-sm-12\")\n        let control = React.createElement(this.props.field.control, _.assign({field: this.props.field, model: this.props.model}, this.props.field.props))\n        let hasLabel = this.props.field.label != undefined && this.props.field.label != null\n        let inline = optional(this.props.inline, false)\n        let controlSize = hasLabel ? \"col-sm-10\" : \"col-sm-12\"\n        let validationResult = optional(model.validationResult[this.props.field.property], {valid: true})\n        if (!validationResult.valid) {\n            className += \" has-error\"\n        }\n        if (!_.isEmpty(this.props.field.className)) {\n            className += \" \" + this.props.field.className\n        }\n        return (\n\n            <div className={className}>\n                {hasLabel &&\n                <div className=\"col-sm-2\">\n                    <Label field={this.props.field} className=\"control-label\"/>\n                </div>\n                }\n                <div className={controlSize}>\n                    {control}\n                    {!validationResult.valid && !_.isEmpty(validationResult.message) &&\n                        <small className=\"help-block\">{validationResult.message}</small>\n                    }\n                </div>\n                <i className=\"form-group__bar\"></i>\n            </div>\n        )\n    }\n}\n\n\nexport class Control extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    onValueChange(e) {\n        let value = e.target.value\n        let model = this.props.model\n        let field = this.props.field\n        model.set(field.property, value)\n        this.forceUpdate()\n    }\n}\n\nexport class Text extends Control {\n    render() {\n        let field = this.props.field\n\n        return (\n            <input\n                type=\"text\"\n                className=\"form-control input-sm\"\n                id={field.property}\n                data-property={field.property}\n                placeholder={field.placeholder}\n                value={optional(this.props.model.get(field.property), \"\")}\n                onChange={this.onValueChange.bind(this)} />\n        )\n    }\n}\n\nexport class TextArea extends Control {\n    render() {\n        let field = this.props.field\n        let style = {\n            height: optional(this.props.height, \"150px\")\n        }\n        return (\n            <textarea\n                style={style}\n                className=\"form-control\"\n                id={field.property}\n                data-property={field.property}\n                placeholder={field.placeholder}\n                value={optional(this.props.model.get(field.property), \"\")}\n                onChange={this.onValueChange.bind(this)} />\n        )\n    }\n}\n\nexport class ReadOnlyText extends Control {\n\n    getText() {\n        let field = this.props.field\n        let model = this.props.model\n        let formatter = optional(() => this.props.formatter, () => { return v => v })\n        return optional(formatter(model.get(field.property)), \"\")\n    }\n\n    render() {\n        let field = this.props.field\n        \n\n        return (\n            <input\n                disabled=\"disabled\"\n                readOnly=\"readOnly\"\n                type=\"text\"\n                className=\"form-control input-sm\"\n                id={field.property}\n                data-property={field.property}\n                placeholder={field.placeholder}\n                value={this.getText()}\n                onChange={this.onValueChange.bind(this)} />\n        )\n    }\n}\n\nexport class Color extends Control {\n\n    componentDidMount() {\n        let field = this.props.field\n        let model = this.props.model\n        let me = ReactDOM.findDOMNode(this)\n        let input = $(me).find(\"#\" + field.property)\n        $(me).find(\".color-picker\").farbtastic(v => {\n            model.set(field.property, v)\n            this.forceUpdate()\n        })\n    }\n\n    render() {\n        let field = this.props.field\n        let value = this.props.model.get(field.property)\n        let colorStyle = {backgroundColor: `${optional(value, \"#000000\")}`}\n\n        return (\n            <div className=\"cp-container\">\n                <div className=\"\">\n                    <div className=\"dropdown\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control cp-value\"\n                            data-toggle=\"dropdown\"\n                            aria-expanded=\"false\"\n                            id={field.property}\n                            data-property={field.property}\n                            placeholder={field.placeholder}\n                            value={optional(this.props.model.get(field.property), \"\")}\n                            onChange={this.onValueChange.bind(this)} />\n\n                        <div className=\"dropdown-menu\">\n                            <div className=\"color-picker\" data-cp-default=\"#000000\"></div>\n                        </div>\n\n                        <i className=\"cp-value\" style={colorStyle} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class Spacer extends Control {\n    render() {\n        return (\n            <div className=\"form-spacer-control\"></div>\n        )\n    }\n}\n\nexport class Mail extends Control {\n    render() {\n        let field = this.props.field\n\n        return (\n            <input\n                type=\"email\"\n                className=\"form-control input-sm\"\n                id={field.property}\n                data-property={field.property}\n                placeholder={field.placeholder}\n                value={optional(this.props.model.get(field.property), \"\")}\n                onChange={this.onValueChange.bind(this)} />\n        )\n    }\n}\n\n\nexport class DateTime extends Control {\n\n    getDefaultFormat() {\n        return \"DD/MM/YYYY\";\n    }\n\n    componentDidMount() {\n\n        let self = this;\n\n        let me = ReactDOM.findDOMNode(this)\n\n        let field = this.props.field\n        let model = this.props.model\n\n        $(me).on(\"dp.change\", (e) => {\n            if (e.date) {\n                let date = e.date.toDate()\n                let time = date.getTime()\n                model.set(field.property, time)\n            }else {\n                model.set(field.property, null)\n            }\n        });\n    }\n\n    componentWillUpdate(props,state) {\n        if (props.model){\n            this.setData()\n        }\n    }\n\n    setData(){\n        let self = this;\n        let options = {\n            locale: this.props.locale,\n            format: this.props.format ? this.props.format : self.getDefaultFormat()\n        };\n\n        let minDate = this.props.getMinDate && this.props.getMinDate(this.props.model);\n        let maxDate = this.props.getMaxDate && this.props.getMaxDate(this.props.model);\n        let disabledDates = this.props.getDisabledDates && this.props.getDisabledDates(this.props.model);\n\n        if(minDate) {\n            options[\"minDate\"] = minDate\n        }\n\n        if(maxDate) {\n            options[\"maxDate\"] = maxDate\n        }\n\n        if(disabledDates) {\n            options[\"disabledDates\"] = disabledDates\n        }\n        let field = this.props.field;\n        let model = this.props.model;\n        let me = ReactDOM.findDOMNode(this);\n        let value = model.get(field.property);\n\n        if ($(me).data('DateTimePicker'))\n            $(me).data('DateTimePicker').destroy()\n        $(me).datetimepicker(options);\n        $(me).data(\"DateTimePicker\").date(value ? new Date(value) : null)\n    }\n\n\n    isDisabled() {\n        return _.isFunction(this.props.isDisabled) ?  this.props.isDisabled(this.props.model) : false\n    }\n\n    render() {\n        let disabled = this.isDisabled();\n        let field = this.props.field\n\n        return (\n            <div className=\"input-group\">\n                <input\n                    disabled={disabled}\n                    type=\"text\"\n                    className=\"form-control input-sm\"\n                    id={field.property}\n                    data-property={field.property}\n                    placeholder={field.placeholder} />\n                <div className=\"input-group-addon\">\n                    <span className=\"zmdi zmdi-calendar\" />\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport class YesNo extends Control {\n    onValueChange(e) {\n        let value = parseBoolean(e.target.value)\n        let model = this.props.model\n        let field = this.props.field\n        model.set(field.property, value)\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        let model = this.props.model\n        let field = this.props.field\n        let fn = () => {\n            let value = parseBoolean(model.get(field.property))\n            if (value === null || value === undefined) {\n                value = false\n            }\n            model.untrackChanges()\n            model.set(field.property, value)\n            model.trackChanges()\n        }\n\n        model.once(\"load\", fn)\n        fn()\n    }\n\n    render() {\n        const field = this.props.field\n        const yesText = optional(this.props.yesText, \"Yes\")\n        const noText = optional(this.props.noText, \"No\")\n        const yesId = `__yesno-${field.property}-yes`\n        const noId = `__yesno-${field.property}-no`\n        return (\n            <div className=\"yesno\">\n            <div className=\"radio radio--inline\">\n                <input id={yesId} type=\"radio\" name={field.property} value=\"true\" checked={optional(this.props.model.get(field.property), false)} onChange={this.onValueChange.bind(this)} />\n                <label htmlFor={yesId} className=\"radio__label\">{yesText}</label>\n            </div>\n            <div className=\"radio radio--inline\">\n                <input id={noId} type=\"radio\" name={field.property} value=\"false\" checked={!(optional(this.props.model.get(field.property), false))} onChange={this.onValueChange.bind(this)} />\n                <label htmlFor={noId} className=\"radio__label\">{noText}</label>\n            </div>\n        </div>\n        )\n    }\n}\n\n\nexport class Switch extends Control {\n    onValueChange(e) {\n        let value = e.target.checked\n        let model = this.props.model\n        let field = this.props.field\n        model.set(field.property, value)\n        this.forceUpdate()\n    }\n\n    render() {\n        let field = this.props.field\n\n        return (\n            <div className=\"toggle-switch\">\n                <input\n                    type=\"checkbox\"\n                    hidden=\"hidden\"\n                    name={field.property}\n                    id={field.property}\n                    data-property={field.property}\n                    checked={optional(this.props.model.get(field.property), false)}\n                    onChange={this.onValueChange.bind(this)} />\n\n                <label htmlFor={field.property} className=\"ts-helper\"></label>\n                <label htmlFor={field.property} className=\"ts-label\">{field.placeholder}</label>\n            </div>\n        )\n    }\n}\n\nexport class Number extends Control {\n    constructor(props) {\n        super(props)\n\n        this.setState({})\n    }\n\n    // getMinValue() {\n    //     return _.isFunction(this.props.getMinValue) ? this.props.getMinValue(this.props.model) : 0;\n    // }\n\n\n    onValueChange(e) {\n        let value = e.target.value\n        let model = this.props.model\n        let field = this.props.field\n\n        if (value == \"\" || value == \"-\" || (this.props.onlyInteger ? value.match(/^\\d+$/) : value.match(/^-?(\\d+\\.?\\d{0,9}|\\.\\d{1,9})$/))) {\n\n            model.set(field.property, value)\n            this.forceUpdate()\n            if (_.isFunction(this.props.performOnChange)) {\n                this.props.performOnChange(this.props.model, value);\n            }\n        }\n\n    }\n\n\n    render() {\n        let field = this.props.field\n\n        return (\n            <input\n                ref=\"text\"\n                type=\"text\"\n                className=\"form-control input-sm\"\n                id={field.property}\n                data-property={field.property}\n                placeholder={field.placeholder}\n                value={optional(this.props.model.get(field.property), \"\")}\n                onChange={this.onValueChange.bind(this)}/>\n        )\n    }\n}\n\n\n\nexport class Select extends Control {\n\n    constructor(props) {\n        super(props)\n\n        this.__dataSourceOnChange = (data) => {\n            this.forceUpdate()\n        }\n    }\n\n    onValueChange(e) {\n        let multiple = optional(this.props.multiple, false)\n        let value = $(e.target).val()\n        let model = this.props.model\n        let field = this.props.field\n\n        if (multiple) {\n            if (value == null) {\n                value = []\n            }\n        }\n\n        model.set(field.property, value)\n\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        if (!_.isEmpty(this.props.datasource)) {\n            this.props.datasource.on(\"change\", this.__dataSourceOnChange)\n        }\n\n        let me = ReactDOM.findDOMNode(this)\n        let model = this.props.model\n        let field = this.props.field\n        let multiple = optional(this.props.multiple, false)\n\n        $(me)\n            .focus(() => {\n                $(me).addClass(\"fg-toggled\")\n            })\n            .blur(() => {\n                $(me).removeClass(\"fg-toggled\")\n            })\n\n        $(me).find(\"select\")\n            .select2({\n                liveSearch: optional(this.props.searchEnabled, false)\n            })\n            .on(\"loaded.bs.select\", function() {\n                if (_.isEmpty(model.get(field.property))) {\n                    let value = $(this).val()\n\n                    if (multiple) {\n                        if (_.isEmpty(value)) {\n                            value = []\n                        }\n                    }\n\n                    model.untrackChanges()\n                    model.set(field.property, value)\n                    model.trackChanges()\n                }\n            })\n    }\n\n    componentDidUpdate() {\n        let model = this.props.model\n        let field = this.props.field\n        let me = ReactDOM.findDOMNode(this)\n        let multiple = optional(this.props.multiple, false)\n\n        $(me).find(\"select\").select2()\n    }\n\n    componentWillUnmount() {\n        if (!_.isEmpty(this.props.datasource)) {\n            this.props.datasource.off(\"change\", this.__dataSourceOnChange)\n        }\n    }\n\n    render() {\n        let model = this.props.model\n        let field = this.props.field\n        let datasource = this.props.datasource\n        let options = optional(() => datasource.data.rows, []).map(o => <option key={o.value} value={o.value}>{o.label}</option>)\n        let multiple = optional(this.props.multiple, false)\n\n        return (\n            <select\n                id={field.property}\n                className=\"form-control\"\n                data-property={field.property}\n                onChange={this.onValueChange.bind(this)}\n                title={field.placeholder}\n                value={optional(model.get(field.property), multiple ? [] : \"\")}\n                multiple={multiple}>\n                {this.props.allowNull &&\n                    <option key=\"empty\" value=\"\" style={{color: \"#999999\"}}>{optional(this.props.nullText, \"(none)\")}</option>\n                }\n                {options}\n            </select>\n        )\n    }\n}\n\n\nexport class Lookup extends Control {\n    constructor(props) {\n        super(props)\n\n        this.datasource = this.props.datasource || datasource.create()\n        this.query = this.props.query || query.create()\n        \n        this.__dataSourceOnChange = (data) => {\n            this.forceUpdate()\n        }\n\n        this.__queryChange = () => {\n            if (_.isFunction(this.props.loader)) {\n                this.props.loader(this.query, this.datasource)\n            }\n        }\n    }\n\n    componentDidMount() {        \n        this.datasource.on(\"change\", this.__dataSourceOnChange)\n        this.query.on(\"change\", this.__queryChange)\n\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\".selection-row\")\n            .mouseenter(function() {\n                $(this).find(\".action\").stop().fadeIn(250)\n            })\n            .mouseleave(function() {\n                $(this).find(\".action\").stop().fadeOut(250)\n            })\n            .find(\".action\").hide()\n\n        $(me)\n            .focus(() => {\n                $(me).addClass(\"fg-toggled\")\n            })\n            .blur(() => {\n                $(me).removeClass(\"fg-toggled\")\n            })\n\n        $(me).find(\".lookup-grid\").modal({show: false})\n\n        if (_.isFunction(this.props.loader)) {\n            this.props.loader(this.query, this.datasource)\n        }\n    }\n\n    componentWillUnmount() {\n        this.datasource.off(\"change\", this.__dataSourceOnChange)\n        this.query.off(\"change\", this.__queryChange)\n    }\n\n    showEntities(e) {\n        e.stopPropagation()\n\n        if (!this.dialogAlreadyOpened) {\n            if (this.props.query) {\n                this.props.query.invokeChange()\n            }\n        }\n        this.dialogAlreadyOpened = true\n\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\".lookup-grid\").modal(\"show\")\n    }\n\n    select() {\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\".lookup-grid\").modal(\"hide\")\n\n        let model = this.props.model\n        let field = this.props.field\n        let grid = this.refs.searchGrid\n        let current = optional(model.get(field.property), [])\n        let selection = optional(grid.getSelection(), [])\n        let mode = this.checkedMode()\n        let result = null\n        if (mode == \"single\") {\n            if (selection.length == 0) {\n                return\n            }\n\n            result = selection[0]\n        } else if (mode == \"multiple\") {\n            result = _.union(current, [])\n            selection.forEach(s => {\n                let comparer = r => {\n                    if (_.has(s, \"id\")) {\n                        return s.id == r.id\n                    } else {\n                        return _.isEqual(s, r)\n                    }\n                }\n                if (!_.any(result, comparer)) {\n                    result.push(s)\n                }\n            })\n        }\n\n        model.set(field.property, result)\n\n        this.forceUpdate()\n    }\n\n    remove(e) {\n        e.stopPropagation()\n\n        let mode = this.checkedMode()\n        if (mode == \"single\") {\n            this.removeAll()\n        } else if (mode == \"multiple\") {\n            this.removeSelection()\n        }\n    }\n\n    removeRow(row) {\n        let model = this.props.model\n        let field = this.props.field\n        let current = optional(model.get(field.property), [])\n        let result = _.filter(current, r => {\n            if (_.has(row, \"id\")) {\n                return row.id != r.id\n            } else {\n                return !_.isEqual(row, r)\n            }\n        })\n        model.set(field.property, result)\n\n        this.forceUpdate()\n    }\n\n    removeSelection() {\n        let model = this.props.model\n        let field = this.props.field\n        let grid = this.refs.selectionGrid\n        let selection = grid.getSelection()\n        let current = optional(model.get(field.property), [])\n        let result = _.filter(current, (c) => {\n            return !_.any(selection, r => {\n                if (_.has(c, \"id\")) {\n                    return c.id == r.id\n                } else {\n                    return _.isEqual(c, r)\n                }\n            })\n        })\n        model.set(field.property, result)\n\n        this.forceUpdate()\n    }\n\n    removeAll() {\n        let mode = this.checkedMode()\n        let model = this.props.model\n        let field = this.props.field\n        let v = null\n        if (mode == \"single\") {\n            v = null\n        } else if (mode == \"multiple\") {\n            v = []\n        }\n        model.set(field.property, v)\n\n        this.forceUpdate()\n    }\n\n    checkedMode() {\n        let mode = this.props.mode\n        if (\"multiple\" != mode && \"single\" != mode) {\n            throw new Error(\"Please specify a mode for lookup: [single|multiple]\")\n        }\n        return mode\n    }\n\n    getHeaderText() {\n        let field = this.props.field\n        let mode = this.checkedMode()\n        let model = this.props.model\n        let value = model.get(field.property)\n\n        if (_.isEmpty(value)) {\n            return <span className=\"placeholder\">{this.getPlaceholderText()}</span>\n        } else {\n            return this.getCurrentValueDescription()\n        }\n    }\n\n    getCurrentValueDescription() {\n        let model = this.props.model\n        let field = this.props.field\n        let mode = this.checkedMode()\n\n        if (mode == \"multiple\") {\n            let rows = model.get(field.property)\n            return rows.length == 1 ? M(\"oneElementSelected\") : format(M(\"nElementsSelected\"), rows.length)\n        } else if (mode == \"single\") {\n            let row = model.get(field.property)\n            if (row == null) {\n                return \"\"\n            }\n\n            let customFormatter = field.formatter || this.props.formatter\n            let formatter = _.isFunction(customFormatter) ? customFormatter : (row) => {\n                if (_.has(row, \"name\")) {\n                    return row[\"name\"]\n                } else if (_.has(row, \"description\")) {\n                    return row[\"description\"]\n                } else {\n                    return JSON.stringify(row)\n                }\n            }\n\n            return formatter(row)\n        }\n    }\n\n    onGridKeyDown(e) {\n        if (isCancel(e.which)) {\n            this.remove(e)\n            e.preventDefault()\n        }\n    }\n\n    getPlaceholderText() {\n        let field = this.props.field\n\n        if (field.placeholder) {\n            return field.placeholder\n        } else {\n            return M(\"nothingSelected\")\n        }\n    }\n\n    render() {\n        let mode = this.checkedMode()\n        let model = this.props.model\n        let field = this.props.field\n        let rows = model.get(field.property) || []\n        let selectionGrid = mode == \"multiple\" ? _.assign({}, this.props.selectionGrid, {columns: _.union(this.props.selectionGrid.columns, [{\n            cell: ActionsCell,\n            tdClassName: \"grid-actions\",\n            actions: [\n                {icon: \"zmdi zmdi-delete\", action: (row) => this.removeRow(row)}\n            ]\n        }])}) : null\n        let addClassName\n        if (mode == \"single\") {\n            addClassName = \"zmdi zmdi-more\"\n        } else if (mode == \"multiple\") {\n            addClassName = \"zmdi zmdi-plus\"\n        }\n\n        return (\n            <div className=\"fg-line\" tabIndex=\"0\">\n                <div className=\"lookup\">\n                    <div className=\"lookup-header\" onClick={this.showEntities.bind(this)}>\n                        <div className=\"actions\">\n                            <a href=\"javascript:;\" className=\"actions__item\" title={M(\"remove\")} onClick={this.remove.bind(this)}><i className=\"zmdi zmdi-close\" /></a>\n                            <a href=\"javascript:;\" className=\"actions__item\" title={M(\"add\")} onClick={this.showEntities.bind(this)}><i className={addClassName} /></a>\n                        </div>\n                        <span className=\"lookup-current-value\">{this.getHeaderText()}</span>\n                        <div className=\"clearfix\"></div>\n                    </div>\n\n                    {mode == \"multiple\" &&\n                        <Grid\n                            ref=\"selectionGrid\"\n                            descriptor={selectionGrid}\n                            data={resultToGridData({rows: rows, totalRows: rows.length})}\n                            showInCard=\"false\"\n                            quickSearchEnabled=\"false\"\n                            headerVisible=\"false\"\n                            footerVisible=\"false\"\n                            summaryVisible=\"false\"\n                            noResultsVisible=\"false\"\n                            paginationEnabled=\"false\"\n                            tableClassName=\"table table-condensed table-hover\"\n                            onKeyDown={this.onGridKeyDown.bind(this)}\n                        />\n                    }\n                </div>\n\n                <div className=\"lookup-grid modal fade\" id=\"myModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\n                    <div className=\"modal-dialog modal-lg\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"myModalLabel\">{field.label}</h5>\n                            </div>\n                            <div className=\"modal-body\">\n                                <Grid \n                                    ref=\"searchGrid\" \n                                    descriptor={this.props.popupGrid}\n                                    data={resultToGridData(this.datasource.data)}\n                                    query={this.props.query}\n                                    showInCard=\"false\" \n                                    quickSearchEnabled=\"true\"\n                                    footerVisible=\"true\"\n                                    summaryVisible=\"true\"\n                                    paginationEnabled=\"true\"\n                                    tableClassName=\"table table-condensed table-striped table-hover\"\n                                    onRowDoubleClick={this.select.bind(this)}\n                                />\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-link\" onClick={this.select.bind(this)}>{M(\"ok\")}</button>\n                                <button type=\"button\" className=\"btn btn-link\" data-dismiss=\"modal\">{M(\"cancel\")}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class File extends Control {\n    constructor(props) {\n        super(props)\n\n        this.state = {filename: null}\n    }\n\n    onFileSelected(e) {\n        let model = this.props.model\n        let field = this.props.field\n        let file = e.target.files[0]\n        inputfile.readDataUrl(file).then(result => {\n            model.set(field.property, result)\n            this.setState({filename: file.name})\n        })\n    }\n\n    remove(e) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        let model = this.props.model\n        let field = this.props.field\n        model.set(field.property, null)\n        this.setState({filename: null})\n    }\n\n    search(e) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\"input[type=file]\").click()\n    }\n\n    render() {\n        let model = this.props.model\n        let field = this.props.field\n        let value = model.get(field.property)\n        let hasValue = !_.isEmpty(value)\n\n        return (\n            <div className=\"input-file fg-line\" tabIndex=\"0\">\n                <div onClick={this.search.bind(this)}>\n                    {!hasValue ?\n                        <div>\n                            <div className=\"actions pull-right\">\n                                <a href=\"javascript:;\" title={M(\"search\")} onClick={this.search.bind(this)} className=\"m-r-0\"><i className=\"zmdi zmdi-search\" /></a>\n                            </div>\n                            <span className=\"placeholder\">{field.placeholder}</span>\n                        </div>\n                    : \n                        <div>\n                            <div className=\"actions pull-right\">\n                                <a href=\"javascript:;\" title={M(\"remove\")} onClick={this.remove.bind(this)} className=\"m-r-0\"><i className=\"zmdi zmdi-close\" /></a>\n                            </div>\n                            <span className=\"input-file-name\"><span className=\"zmdi zmdi-file\"></span> {this.state.filename}</span>\n                        </div>\n                    }\n                </div>\n\n                <input type=\"file\" accept={field.accept} onChange={this.onFileSelected.bind(this)} />\n            </div>\n        )\n    }\n}\n\nexport class Image extends Control {\n    constructor(props) {\n        super(props)\n    }\n\n    onFileSelected(e) {\n        let model = this.props.model\n        let field = this.props.field\n        let file = e.target.files[0]\n        inputfile.readDataUrl(file).then(result => {\n            model.set(field.property, result)\n            this.forceUpdate()\n        })\n    }\n\n    delete(e) {\n        e.stopPropagation()\n        e.preventDefault()\n\n        let model = this.props.model\n        let field = this.props.field\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\"input[type=file]\").val(null)\n\n        model.set(field.property, null)\n        this.forceUpdate()\n    }\n\n    search(e) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\"input[type=file]\").click()\n    }\n\n    render() {\n        let model = this.props.model\n        let field = this.props.field\n        let accept = field.accept || \".jpg,.png,.jpeg,.gif,.bmp\"\n\n        let imgStyle = {\n            \"backgroundRepeat\": \"no-repeat\",\n            \"backgroundSize\": \"contain\",\n            \"backgroundPosition\": \"center\",\n            \"height\": \"150px\",\n            \"backgroundColor\": \"#F2F2F2\"\n        }\n        if (this.props.width) {\n            imgStyle.width = this.props.width\n        }\n        if (this.props.height) {\n            imgStyle.height = this.props.height\n        }\n\n        let imageData = model.get(field.property)\n\n        return (\n            <div className=\"input-image\">\n                <div onClick={this.search.bind(this)}>\n                    {!_.isEmpty(imageData) ?\n                        <div className=\"input-image-container\">\n                            <div className=\"actions\">\n                                <a href=\"javascript:;\" onClick={this.delete.bind(this)} className=\"delete-button\"><i className=\"zmdi zmdi-close\"></i></a>\n                            </div>\n                            <div className=\"input-image\" style={_.assign(imgStyle, {\"backgroundImage\": `url(\"${imageData}\")`})}></div>\n                        </div>\n                    :\n                        <div className=\"input-image\" style={_.assign(imgStyle, {\"backgroundImage\": `url(\"resources/images/noimage.png\")`})}></div>\n                    }\n                </div>\n                <input type=\"file\" accept={accept} onChange={this.onFileSelected.bind(this)} />\n            </div>\n        )\n    }\n}\n\nexport class Gallery extends Control {\n    constructor(props) {\n        super(props)\n        this.state = {images: []};\n        this.model = this.props.model;\n        this.field = this.props.field;\n        this.counter = 0;\n\n    }\n\n    componentDidMount() {\n\n\n        this.model.once(\"load\", () => {\n\n            let value = optional(this.model.get(this.field.property), []);\n            _.assign(this.state, {images: value});\n            this.forceUpdate()\n        })\n    }\n\n\n    onImageAdd(newImage) {\n\n        let images = optional(this.state.images, []);\n\n        if (!_.any(images, i => i === newImage)) {\n            images.push(newImage);\n            _.assign(this.state, {images: images})\n\n            this.model.set(this.field.property, images)\n            this.forceUpdate()\n            return true;\n        }\n\n        return false;\n    }\n\n    onImageDelete(imageToRemove) {\n        let images = optional(this.state.images, []);\n\n        images = _.filter(images, i => i !== imageToRemove)\n        _.assign(this.state, {images: images})\n        this.model.set(this.field.property, images)\n        this.forceUpdate()\n\n    }\n\n\n    createSingleImageComponent(imageData) {\n        this.counter++;\n\n        return <SingleImage key={this.field.property+ \"_\" + this.counter}\n                            imageData={imageData}\n                            onImageAdd={this.onImageAdd.bind(this)}\n                            onImageDelete={this.onImageDelete.bind(this)}\n        />\n    }\n\n    render() {\n        let images = optional(this.state.images, []);\n        let fields = [];\n        let actions = [];\n\n        if (images.length > 0) {\n            _.forEach(images, (e) => {\n                fields.push(this.createSingleImageComponent(e))\n            })\n\n        }\n\n        fields.push(this.createSingleImageComponent())\n\n        return (\n            <div>\n                {fields}\n\n            </div>\n\n\n        )\n    }\n}\n\nexport class MultiFile extends Control {\n    constructor(props) {\n        super(props)\n        this.state = {files: []};\n        this.model = this.props.model;\n        this.field = this.props.field;\n        this.counter = 0;\n        this.fileTypes = this.field.fileTypes || \"*\";\n    }\n\n    componentDidMount() {\n\n        this.model.once(\"load\", () => {\n\n            let value = optional(this.model.get(this.field.property), []);\n            _.assign(this.state, {files: value});\n            this.forceUpdate()\n        })\n    }\n\n\n    onAdd(newFile) {\n        let files = optional(this.state.files, []);\n\n        if (!_.any(files, i => i.data === newFile.data)) {\n            files.push(newFile);\n            _.assign(this.state, {files: files})\n\n            this.model.set(this.field.property, files)\n            this.forceUpdate()\n            return true;\n        }\n\n        return false;\n    }\n\n    onDelete(toRemove) {\n        let files = optional(this.state.files, []);\n        files = _.filter(files, i => i.data !== toRemove.data)\n        _.assign(this.state, {files: files})\n        this.model.set(this.field.property, files)\n        this.forceUpdate()\n\n    }\n\n\n    createSingleFileComponent(data) {\n        this.counter++;\n\n        return <SingleFile key={this.field.property+ \"_\" + this.counter}\n                           file={data? data : {}}\n                           fileTypes={this.fileTypes}\n                           onAdd={this.onAdd.bind(this)}\n                           onDelete={this.onDelete.bind(this)}\n        />\n    }\n\n    render() {\n        let files = optional(this.state.files, []);\n        let fields = [];\n        let actions = [];\n        let title = optional(this.props.field.title, M(\"attachments\"))\n\n        if (files.length > 0) {\n            _.forEach(files, (e) => {\n                fields.push(this.createSingleFileComponent(e))\n            })\n\n        }\n\n        fields.push(this.createSingleFileComponent())\n\n        return (\n            <div>\n                <HeaderBlock title={title} label={this.props.field.label} actions={actions}/>\n                {fields}\n\n            </div>\n\n\n        )\n    }\n}\n\nexport class SingleImage extends Control {\n    constructor(props) {\n        super(props)\n\n\n        this.state = {data: props.data}\n    }\n\n    onFileSelected(e) {\n        let file = e.target.files[0]\n        inputfile.readDataUrl(file).then(result => {\n            if (_.isFunction(this.props.onImageAdd)) {\n                if (this.props.onImageAdd(result)) {\n                    _.assign(this.state, {imageData: result})\n                    this.forceUpdate()\n                }\n            }\n\n        })\n    }\n\n    delete(e) {\n        e.stopPropagation()\n        e.preventDefault()\n\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\"input[type=file]\").val(null)\n\n        let image = this.state.imageData;\n        _.assign(this.state, {imageData: null})\n        this.forceUpdate()\n        if (_.isFunction(this.props.onImageDelete)) {\n            this.props.onImageDelete(image)\n        }\n\n    }\n\n    search(e) {\n\n        e.preventDefault()\n        e.stopPropagation()\n\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\"input[type=file]\").click()\n    }\n\n    render() {\n        let accept = \".jpg,.png,.jpeg,.gif,.bmp\"\n\n        let imgStyle = {\n            \"backgroundRepeat\": \"no-repeat\",\n            \"backgroundSize\": \"contain\",\n            \"backgroundPosition\": \"center\",\n            \"height\": \"150px\",\n            \"backgroundColor\": \"#F2F2F2\"\n        }\n        if (this.props.width) {\n            imgStyle.width = this.props.width\n        }\n        if (this.props.height) {\n            imgStyle.height = this.props.height\n        }\n\n        let imageData = optional(this.state.imageData, null)\n\n        return (\n            <div className=\"input-image col-sm-4 col-ms-6\" style={{marginBottom: '5px'}}>\n                <div onClick={this.search.bind(this)}>\n                    {!_.isEmpty(imageData) ?\n                        <div className=\"input-image-container\">\n                            <div className=\"actions\">\n                                <a href=\"javascript:;\" onClick={this.delete.bind(this)} className=\"delete-button\"><i\n                                    className=\"zmdi zmdi-close\"></i></a>\n                            </div>\n                            <div className=\"input-image\"\n                                 style={_.assign(imgStyle, {\"backgroundImage\": `url(\"${imageData}\")`})}></div>\n                        </div>\n                        :\n                        <div className=\"input-image\"\n                             style={_.assign(imgStyle, {\"backgroundImage\": `url(\"resources/images/noimage.png\")`})}></div>\n                    }\n                </div>\n                <input type=\"file\" accept={accept} onChange={this.onFileSelected.bind(this)}/>\n            </div>\n        )\n    }\n}\n\nexport class PasswordText extends Control {\n    render() {\n        let field = this.props.field\n\n        return (\n            <div className=\"fg-line\">\n                <input\n                    type=\"password\"\n                    className=\"form-control input-sm\"\n                    id={field.property}\n                    data-property={field.property}\n                    placeholder={field.placeholder}\n                    value={optional(this.props.model.get(field.property), \"\")}\n                    onChange={this.onValueChange.bind(this)}/>\n            </div>\n        )\n    }\n}\n\nexport class SingleFile extends Control {\n    constructor(props) {\n        super(props)\n\n        let filename = optional(props.file.filename, null);\n        let data = optional(props.file.data, null);\n        let base64 = optional(props.file.base64, null);\n\n        this.state = {filename: filename, data: data, base64: base64}\n    }\n\n    onFileSelected(e) {\n        let file = e.target.files[0]\n        showLoader()\n        inputfile.readDataUrl(file).then(result => {\n            if (_.isFunction(this.props.onAdd)) {\n                this.props.onAdd({data: result, filename: file.name, base64: true})\n            }\n            hideLoader()\n        })\n    }\n\n    remove(e) {\n        e.stopPropagation()\n        e.preventDefault()\n\n\n        if (_.isFunction(this.props.onDelete)) {\n            this.props.onDelete({data: this.state.data, filename: this.state.filename})\n        }\n    }\n\n    download(e) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        let value = optional(this.state.data, null)\n\n        let url = config.get(\"service.url\") + value\n        window.open(url)\n    }\n\n\n    search(e) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        let me = ReactDOM.findDOMNode(this)\n\n        //Serve per invocare il change se si seleziona un file uguale al precedente\n        $(me).find(\"input[type=file]\").val(\"\")\n        $(me).find(\"input[type=file]\").click()\n    }\n\n    render() {\n\n        let value = optional(this.state.data, null)\n        //let fileName = optional(this.state.filename, null)\n        let hasValue = !_.isEmpty(value)\n        let readOnly =  optional(this.props.readOnly, false)\n        let canDownload = hasValue && !value.includes(\"base64\");\n        let component = null\n        let fileTypes = optional(this.props.fileTypes, \"*\")\n\n        if (!hasValue) {\n            component = (\n                <div>\n                    <div className=\"actions pull-right\">\n                        <a href=\"javascript:;\" title={M(\"search\")} onClick={this.search.bind(this)} className=\"m-r-0\"><i\n                            className=\"zmdi zmdi-search\"/></a>\n                    </div>\n                    <span className=\"placeholder\"></span>\n                </div>\n            )\n        } else {\n            component = (\n                <div>\n                    <div className=\"actions pull-right\">\n                        {readOnly && <a href=\"javascript:;\" title={M(\"remove\")} onClick={this.remove.bind(this)} className=\"m-r-0\"><i\n                            className=\"zmdi zmdi-close\"/></a>}\n                        {canDownload && <a href=\"javascript:;\" title={M(\"download\")} onClick={this.download.bind(this)}\n                                           className=\"m-r-0\"><i className=\"zmdi zmdi-download\"/></a>}\n                    </div>\n                    <span className=\"input-file-name\"><span className=\"zmdi zmdi-file\"/> {this.state.filename} </span>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"col-sm-4 col-ms-6\" style={{marginBottom: '5px'}}>\n                <div className=\"input-file fg-line\" tabIndex=\"0\">\n                    <div onClick={this.search.bind(this)}>\n                        {component}\n                    </div>\n\n                    <input type=\"file\" accept={fileTypes} onChange={this.onFileSelected.bind(this)}/>\n                </div>\n            </div>\n\n        )\n    }\n}","\"use strict\"\n\nimport * as query from \"../../api/query\";\nimport M from \"../../strings\";\nimport {Actions, Card} from \"./common\";\nimport {format, optional, parseBoolean} from \"../../utils/lang\";\nimport {Observable} from \"../../aj/events\";\nimport {isControl, isDown, isEnter, isEsc, isShift, isUp} from \"../utils/keyboard\";\nimport * as mobile from \"../utils/mobile\";\nimport * as datasource from \"../../utils/datasource\";\n\nconst EXPAND_ANIMATION_TIME = 250\nconst CELL_PADDING_TOP = 15\nconst CELL_PADDING_BOTTOM = 15\n\n/* \n * hack to load forms when is useful but prevent circular references of modules. forms.jsx uses grids.jsx \n */\n\nlet _forms = null\nfunction forms() {\n    if (_forms == null) {\n        //from this, the url is not absolute\n        _forms = require(\"./forms\")\n    }\n\n    return _forms\n}\n\n\n\nfunction eachChildren(root, action) {\n    if (_.isArray(root)) {\n        root.forEach(c => {\n            action(c)\n\n            eachChildren(c.children, action)\n        })\n    }\n}\n\n\nfunction clearSelection() {\n    if(document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if(window.getSelection) {\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n    }\n}\n\nfunction childrenData(children, index, childrenProp) {\n    if (_.isArray(children)) {\n        return children.map(r => {\n            return {\n                data: r,\n                index: index.value++,\n                children: childrenData(r[childrenProp], index, childrenProp),\n                selected: false\n            }\n        })\n    }\n\n    return null\n}\n\nexport function arrayResult(arr) {\n    let narr = optional(arr, [])\n    return {\n        rows: narr,\n        totalRows: narr.length\n    }\n}\n\nexport function resultToGridData(result, childrenProp = \"children\") {\n    if (!result || !result.rows) {\n        return {rows: [], totalRows: 0}\n    }\n\n    let index = {value: 0}\n    return {\n        totalRows: result.totalRows,\n        rows: result.rows.map(r => {\n            return {\n                data: r,\n                index: index.value++,\n                children: childrenData(r[childrenProp], index, childrenProp),\n                selected: false\n            }\n        })\n    }\n}\n\nclass Selection extends Observable {\n    constructor(rows) {\n        super()\n\n        this.rows = rows\n        this.shiftPressed = false\n        this.controlPressed = false\n        this.lastSelected = null\n        this.rangeStartRow = null\n        this.allSelected = false\n        this.single = false\n    }\n\n    flatRows() {\n        let flatRows = []\n\n        let addRows = (children) => {\n            if (!children) {\n                return\n            }\n            children.forEach(c => {\n                flatRows.push(c)\n\n                if (c.expanded) {\n                    addRows(c.children)\n                }\n            })\n        }\n\n        addRows(this.rows)\n\n        return flatRows\n    }\n\n    handle(row) {\n        let flatRows = this.flatRows()\n        \n        if (this.shiftPressed && !this.single) {\n            flatRows.forEach(r => r.selected = false)\n            if (this.rangeStartRow == null) {\n                this.rangeStartRow = this.lastSelected\n                if (this.rangeStartRow == null) {\n                    this.rangeStartRow = row\n                }\n                this.lastSelected = row\n                row.selected = true\n            } else {\n                let startIndex = Math.min(this.rangeStartRow.index, row.index)\n                let endIndex = Math.max(this.rangeStartRow.index, row.index)\n                flatRows.forEach(r => {\n                    if (r.index >= startIndex && r.index <= endIndex) {\n                        r.selected = true\n                    }\n                })\n                this.lastSelected = row\n            }\n        } else if (this.controlPressed && !this.single) {\n            row.selected = !row.selected\n            this.rangeStartRow = row\n            this.lastSelected = row\n        } else {\n            flatRows.forEach(r => r.selected = false)\n            row.selected = true\n            this.rangeStartRow = row\n            this.lastSelected = row\n        }\n\n        this.invoke(\"change\")\n    }\n\n    getSelectedData() {\n        return _.map(_.filter(this.flatRows(), r => r.selected), r => r.data)\n    }\n\n    toggleAll() {\n        this.flatRows().forEach(r => r.selected = !this.allSelected)\n        this.allSelected = !this.allSelected\n        this.lastSelected = null\n        this.rangeStartRow = null\n\n        this.invoke(\"change\")\n    }\n\n    clear() {\n        this.flatRows().forEach(r => r.selected = false)\n        this.allSelected = false\n        this.lastSelected = null\n        this.rangeStartRow = null\n\n        this.invoke(\"change\")\n    }\n\n    down() {\n        let flatRows = this.flatRows()\n        \n        if (!flatRows || flatRows.length == 0) {\n            return\n        }\n\n        let index = -1\n        if (this.lastSelected != null) {\n            index = flatRows.indexOf(this.lastSelected)\n        }\n\n        index++\n        if (index >= flatRows.length) {\n            index = 0\n        }\n        let newRow = flatRows[index]\n        this.handle(newRow)\n    }\n\n    up() {\n        let flatRows = this.flatRows()\n        \n        if (!flatRows || flatRows.length == 0) {\n            return\n        }\n\n        let index = -1\n        if (this.lastSelected != null) {\n            index = flatRows.indexOf(this.lastSelected)\n        }\n\n        index--\n        if (index < 0) {\n            index = flatRows.length - 1\n        }\n        let newRow = flatRows[index]\n        this.handle(newRow)\n    }\n}\n\nconst STANDARD_SEARCH_FORM_DESCRIPTOR = (column) => _.assign({}, {\n    showInCard: false,\n    fields: [\n        {\n            property: column.property,\n            label: M(\"value\"),\n            placeholder: M(\"value\"),\n            control: forms().Text\n        },\n        {\n            property: \"_filterType\",\n            label: M(\"filterType\"),\n            control: forms().Select,\n            props: {\n                allowNull: false,\n                datasource: datasource.fixed([\n                    {label: \"Equals\", value: \"eq\"},\n                    {label: \"Like\", value: \"like\"}\n                ])\n            }\n        }\n    ]\n})\n\n\n\nexport class SearchDialog extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.model = new (forms().Model)()\n    }\n\n    componentDidMount() {\n    }\n\n    onChangeValue(e) {\n        let value = e.target.value\n        this.setState(_.assign(this.state, {value}))\n    }\n\n    onTypeChange(e) {\n        let type = e.target.value\n        this.setState(_.assign(this.state, {type}))\n    }\n\n    close() {\n        let me = ReactDOM.findDOMNode(this)\n        $(me).modal(\"hide\")\n    }\n\n    getFieldFilterType(property) {\n        let filterType = this.props.column.filterType;\n        if (!filterType) {\n            const field = this.model.findField(property)\n            if (field) {\n                return field.filterType\n            }\n        } else\n            return filterType\n    }\n\n\n    filter() {\n        if (this.props.query && this.props.column && this.props.column.property) {\n            const manualFilterType = optional(this.model.get(\"_filterType\"), \"eq\")\n            const data = this.model.sanitized()\n            this.props.query.die();\n            _.each(_.keys(data), k => {\n                if (k !== \"_filterType\") {\n                    const filterType = optional(this.getFieldFilterType(k), manualFilterType)\n                    this.props.query.filter(filterType, k, data[k])\n                }\n            })\n            this.props.query.page = 1\n            this.props.query.live();\n            this.props.query.invokeChange();\n\n            this.close()\n        }\n    }\n\n    render() {\n        let column = this.props.column\n        let searchForm = STANDARD_SEARCH_FORM_DESCRIPTOR(column)\n        if (!_.isEmpty(column.searchForm)) {\n            searchForm = column.searchForm\n        }\n        this.model.descriptor = searchForm\n\n        const FormBody = forms().FormBody\n\n        return (\n            <div className=\"search-dialog modal fade\" role=\"dialog\" tabIndex=\"-1\" style={{display: \"none\", zIndex: 1500}}>\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h4 className=\"modal-title\">{this.props.column.header}</h4>\n                        </div>\n                        <div className=\"modal-body\">\n                            <div className=\"row\">\n                                <FormBody model={this.model} descriptor={searchForm} />\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-link waves-effect\" onClick={this.filter.bind(this)}>{M(\"search\")}</button>\n                            <button type=\"button\" className=\"btn btn-link waves-effect\" data-dismiss=\"modal\">{M(\"close\")}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport class HeaderCell extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {sorting: false, sortDescending: false}\n    }\n\n    componentDidMount() {\n        let me = $(ReactDOM.findDOMNode(this))\n        let button = $(this.refs.search)\n\n        me.mouseenter(() => {\n            button\n                .css({opacity: 0})\n                .show()\n                .stop()\n                .animate({opacity: 1}, 250)\n        }).mouseleave(() => {\n            button\n                .stop()\n                .animate({opacity: 0}, 250)\n        })\n    }\n\n    changeSort() {\n        if (!this.props.column.sortable) {\n            return\n        }\n\n        let newState = null\n\n        if (this.state.sorting == false) {\n            newState = {sorting: true, sortDescending: false}\n        } else if (this.state.sortDescending == false) {\n            newState = {sorting: true, sortDescending: true}\n        } else {\n            newState = {sorting: false, sortDescending: false}\n        }\n\n        if (this.props.query) {\n            if (newState.sorting) {\n                this.props.query.sort(this.props.column.property, newState.sortDescending)\n            } else {\n                this.props.query.unsort(this.props.column.property)\n            }\n        }\n\n        this.setState(newState)\n    }\n\n    search() {\n        let me = ReactDOM.findDOMNode(this)\n        $(me).find(\".search-dialog\").modal()\n    }\n\n    render() {\n        let sortClass = \"\"\n        if (this.state.sorting && this.state.sortDescending) {\n            sortClass = \"sorting_desc\"\n        } else if (this.state.sorting && !this.state.sortDescending) {\n            sortClass = \"sorting_asc\"\n        }\n\n        let searchButtonRight = 10\n        if (sortClass != \"\") {\n            searchButtonRight += 25\n        }\n\n        return (\n            <th className={\"hover \" + sortClass} style={{position: \"relative\"}}>\n                <span onClick={this.changeSort.bind(this)} className=\"pointer-cursor\">{this.props.column.header}</span>\n\n                {this.props.column.searchable &&\n                    <a ref=\"search\" className=\"btn btn-sm btn-light\" href=\"javascript:;\" onClick={this.search.bind(this)} style={{display: \"none\", marginTop: \"-3px\", position: \"absolute\", right: searchButtonRight}}><i className=\"zmdi zmdi-search\"/></a>\n                }\n\n                {this.props.column.searchable &&\n                    <SearchDialog column={this.props.column} query={this.props.query}/>\n                }\n            </th>\n        )\n    }\n}\n\nexport class GridHeader extends React.Component {\n    render() {\n        if (_.isEmpty(this.props.descriptor)) {\n            return null\n        }\n\n        let id = 1\n        let headerCells = this.props.descriptor.columns.map(c => <HeaderCell key={id++} column={c} query={this.props.query} />)\n\n        return (\n            <thead>\n                <tr>{headerCells}</tr>\n            </thead>\n        )\n    }\n}\n\nexport class Row extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    doubleClick(e) {\n        if (_.isFunction(this.props.onDoubleClick)) {\n            this.props.onDoubleClick(this.props.row)\n            e.stopPropagation()\n            e.preventDefault()\n            clearSelection()\n        }\n    }\n\n    onMouseDown(e) {\n        if (_.isFunction(this.props.onMouseDown)) {\n            this.props.onMouseDown(this.props.row)\n            e.stopPropagation()\n        }\n    }\n\n    componentDidMount() {\n        let expandedNow = this.props.row.expandedNow || false\n        if (expandedNow) {\n            let me = ReactDOM.findDOMNode(this)\n            this.props.row.expandedNow = undefined\n            $(me)\n                .find(\"td\")\n                .css({paddingTop: 0, paddingBottom: 0})\n                .stop()\n                .animate({paddingTop: CELL_PADDING_TOP, paddingBottom: CELL_PADDING_BOTTOM}, EXPAND_ANIMATION_TIME)\n                .end()\n                .find(\".grid-cell-container\")\n                .hide()\n                .slideDown(EXPAND_ANIMATION_TIME)\n\n        }\n    }\n\n    componentDidUpdate() {\n        let collapsedNow = this.props.row.collapsedNow || false\n        if (collapsedNow) {\n            let me = ReactDOM.findDOMNode(this)\n            this.props.row.collapsedNow = undefined\n            $(me)\n                .find(\"td\")\n                .stop()\n                .animate({paddingTop: 0, paddingBottom: 0}, EXPAND_ANIMATION_TIME)\n                .end()\n                .find(\".grid-cell-container\")\n                .slideUp(EXPAND_ANIMATION_TIME)\n        }\n    }\n\n    render() {\n        if (_.isEmpty(this.props.descriptor)) {\n            return null\n        }\n\n        let onExpand = (row) => {\n            if (_.isFunction(this.props.onExpand)) {\n                this.props.onExpand(row)\n            }\n        }\n\n        let firstElement = true\n        let key = 1\n        let cells = this.props.descriptor.columns.map(c => {\n            let cell = createCell(c, this.props.row, firstElement, onExpand, c.props)\n            firstElement = false\n            return <td key={key++} className={c.tdClassName}><div className=\"grid-cell-container\">{cell}</div></td>\n        })\n        let className = `level-${this.props.row.level} ` + (this.props.row.selected ? \"selected\" : \"\")\n        let rowClassName = this.props.descriptor.rowClassName\n        if (rowClassName) {\n            if (_.isFunction(rowClassName)) {\n                className += \" \" + rowClassName(this.props.row.data)\n            } else {\n                className += \" \" + rowClassName\n            }\n        }\n\n        return (\n            <tr onMouseDown={this.onMouseDown.bind(this)} onDoubleClick={this.doubleClick.bind(this)} className={className}>{cells}</tr>\n        )\n    }\n}\n\nexport class GridBody extends React.Component {\n    onRowMouseDown(row) {\n        if (_.isFunction(this.props.onRowMouseDown)) {\n            this.props.onRowMouseDown(row)\n        }\n    }\n\n    onRowDoubleClick(row) {\n        if (_.isFunction(this.props.onRowDoubleClick)) {\n            this.props.onRowDoubleClick(row)\n        }\n    }\n\n    onRowExpand(row) {\n        if (_.isFunction(this.props.onRowExpand)) {\n            this.props.onRowExpand(row)\n        }\n    }\n\n    render() {\n        if (_.isEmpty(this.props.descriptor)) {\n            return null\n        }\n\n        let rows = this.props.data.rows || []\n        let rowElements = []\n        let level = this.props.level || 0\n        let index = 0\n        let addElements = (children, level, parentKey) => {\n            let key = 1\n            children.forEach(r => {\n                r.index = index++\n                r.level = level\n                let element = (\n                    <Row\n                        key={parentKey + \"_\" + key++}\n                        descriptor={this.props.descriptor}\n                        row={r}\n                        query={this.props.query}\n                        onMouseDown={this.onRowMouseDown.bind(this)}\n                        onDoubleClick={this.onRowDoubleClick.bind(this)}\n                        onExpand={this.onRowExpand.bind(this)}/>\n                )\n\n                rowElements.push(element)\n\n                if (!_.isEmpty(r.children)) {\n                    if (r.expanded) {\n                        addElements(r.children, level + 1, parentKey + \"_\" + key)\n                    }\n                }\n            })\n        }\n\n        addElements(rows, level, \"root\")\n\n        return (\n            <tbody>\n                {rowElements}\n            </tbody>\n        )\n    }\n}\n\nexport class FooterCell extends React.Component {\n    render() {\n        return (\n            <th>\n                {this.props.column.header}\n            </th>\n        )\n    }\n}\n\nexport class GridFooter extends React.Component {\n    render() {\n        if (_.isEmpty(this.props.descriptor)) {\n            return null\n        }\n\n        let id = 1\n        let footerCells = this.props.descriptor.columns.map(c => <FooterCell key={id++} column={c} query={this.props.query} />)\n\n        return (\n            <tfoot>\n            <tr>{footerCells}</tr>\n            </tfoot>\n        )\n    }\n}\n\nexport class Cell extends React.Component {\n    getValue() {\n        let column = this.props.column\n        let property = this.props.property\n        let row = this.props.row\n\n        return row.data[property]\n    }\n}\n\nexport class EditTextCell extends Cell {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {value: \"\"}\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.value != nextState.value) {\n            this.setState({value: nextProps.value})\n        }\n    }\n\n    componentDidMount() {\n        this.setState({value: this.props.value})\n    }\n\n    onValueChange(e) {\n        let newValue = e.target.value\n        this.setState({value: newValue})\n\n        if (_.isFunction(this.props.onValueChange)) {\n            let column = this.props.column\n            let property = this.props.property\n            let row = this.props.row\n            this.props.onValueChange(column, row.data, newValue)\n        }\n    }\n\n    render() {\n        let column = this.props.column\n        let property = this.props.property\n        let row = this.props.row\n\n        return (\n            <div className=\"edit-text-cell\">\n                <input\n                    type={optional(this.props.type, \"text\")}\n                    className=\"form-control input-sm\"\n                    data-property={property}\n                    placeholder={this.props.placeholder}\n                    value={optional(this.state.value, \"\")}\n                    onChange={this.onValueChange.bind(this)} />\n            </div>\n        )\n    }\n}\n\nexport class TextCell extends Cell {\n    toggleExpand(e) {\n        if (_.isFunction(this.props.onExpand)) {\n            this.props.onExpand(this.props.row)\n            e.preventDefault()\n            e.stopPropagation()\n            e.nativeEvent.stopImmediatePropagation()\n        }\n    }\n\n    render() {\n        let marginLeft = 30 * (this.props.row.level || 0)\n        let icon = \"zmdi \"\n        if (!this.props.row.expanded) {\n            icon += \" zmdi-plus\"\n        } else {\n            icon += \" zmdi-minus\"\n        }\n        \n        let formatter = _.isFunction(this.props.formatter) ? this.props.formatter : v => v\n\n        let caret = !_.isEmpty(this.props.row.children) && this.props.firstElement ?\n            <a style={{marginLeft: marginLeft, marginRight: 20}} href=\"javascript:;\" className=\"expand-button\" onClick={this.toggleExpand.bind(this)} onMouseDown={(e) => e.stopPropagation()}>\n                <i className={\"c-black \" + icon} />\n            </a> : null\n\n        let style = {}\n        if (caret == null && this.props.row.level > 0 && this.props.firstElement) {\n            style.marginLeft = marginLeft + 20\n        }\n\n        return (\n            <div>{caret}<span style={style}>{formatter(this.props.value)}</span></div>\n        )\n    }\n}\n\nexport class CheckCell extends Cell {\n    render() {\n        let checked = this.props.value === true || this.props.value === \"true\" || parseInt(this.props.value) > 0\n        let icon = checked ? \"zmdi zmdi-check\" : \"zmdi zmdi-square-o\"\n\n        return (\n            <i className={icon} />\n        )\n    }\n}\n    \nexport class ActionsCell extends Cell {\n    componentDidMount() {\n        let me = ReactDOM.findDOMNode(this)\n        let showAlways = parseBoolean(this.props.showAlways)\n        if (!showAlways) {\n            $(me).closest(\"tr\")\n                .mouseenter(() => {\n                    $(me).find(\".grid-action\").stop().fadeIn(250)\n                })\n                .mouseleave(() => {\n                    $(me).find(\".grid-action\").stop().fadeOut(250)\n                })\n                .find(\".grid-action\").hide()\n        }\n\n    }\n\n    render() {\n        let actionKey = 1\n        let actions = this.props.column.actions.map(a => \n            React.createElement(Actions.getButtonClass(a), {key: actionKey++, action: a, arguments: [this.props.row.data], className: \"grid-action\"})\n        )\n\n        return (\n            <div className=\"grid-actions-container\">\n                {actions}\n            </div>\n        )\n    }\n}\n\nexport class SelectCell extends Cell {\n\n    constructor(props) {\n        super(props)\n\n        if (_.isEmpty(props.datasource)) {\n            throw new Error(\"Datasource is null\")\n        }\n    }\n\n    componentDidMount() {\n        this.onDataSourceChange = this.props.datasource.on(\"change\", () => {\n            this.forceUpdate()\n        })\n    }\n\n    componentWillUnmount() {\n        this.props.datasource.off(\"change\", this.onDataSourceChange);\n    }\n\n    onChange(e) {\n        const value = e.target.value\n        let column = this.props.column\n        let row = this.props.row\n        if (_.isFunction(this.props.onChange)) {\n            this.props.onChange(column, row.data, value)\n        }\n    }\n\n    render() {\n        let datasource = this.props.datasource\n        let options = optional(() => datasource.data.rows, []).map(o => <option key={o.value} value={o.value}>{o.label}</option>)\n        let allowNull = parseBoolean(this.props.allowNull)\n\n        return (\n            <div className=\"form-group select-cell\">\n                <div className=\"fg-line\">\n                    <div className=\"select\">\n                        <select className=\"form-control\" value={optional(this.props.value, \"\")} onChange={this.onChange.bind(this)}>\n                            {allowNull && \n                                <option value=\"\"></option>\n                            }\n                            {options}\n                            \n                        </select>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class KeywordSearch extends React.Component {\n    render() {\n        return (\n            <div className=\"col-md-offset-8 col-md-4 keyword-search\">\n                <form action=\"javascript:;\">\n                    <div className=\"input-group\">\n                        <span className=\"input-group-addon\"><i className=\"zmdi zmdi-search\"></i></span>\n                        <div className=\"fg-line\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Search...\" />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport class Filter extends React.Component {\n    unfilter() {\n        if (!this.props.query) {\n            return\n        }\n\n        this.props.query.unfilter(this.props.data.property)\n    }\n\n    render() {\n        return (\n            <button onClick={this.unfilter.bind(this)} className=\"btn btn-no-shadow btn-primary waves-effect m-r-10\" >{M(this.props.data.property)}={this.props.data.value} <i className=\"zmdi zmdi-close\"></i></button>      )\n    }\n}\n\nexport class Filters extends React.Component {\n    clearFilters() {\n        if (!this.props.query) {\n            return\n        }\n\n        this.props.query.clearFilters()\n    }\n\n    render() {\n        let filters = []\n        if (this.props.query) {\n            filters = this.props.query.filters.map(f => <Filter key={f.property + f.type + f.value} data={f} query={this.props.query} />)\n        }\n\n        let actions = [\n            {icon: \"zmdi zmdi-delete\", action: this.clearFilters.bind(this)}\n        ]\n\n        return (\n            <div className=\"filters p-30\">\n                <button type=\"button\" onClick={this.clearFilters.bind(this)} className=\"btn btn-no-shadow btn-primary waves-effect m-r-10\"><i className=\"zmdi zmdi-delete\" /></button>\n                {filters}\n            </div>\n        )\n    }\n}\n\n\nexport class Pagination extends React.Component {\n    changePage(page) {\n        this.props.query.setPage(page)\n    }\n\n    getTotalPages() {\n        if (!this.props.data || !this.props.data.rows || !this.props.query) {\n            return 1\n        }\n\n        let totalPages = parseInt(Math.ceil(this.props.data.totalRows / this.props.query.rowsPerPage))\n        return totalPages\n    }\n\n    nextPage() {\n        let totalPages = this.getTotalPages()\n        if (this.props.query.page < totalPages) {\n            this.props.query.setPage(this.props.query.page + 1)\n        }\n    }\n\n    previousPage() {\n        if (this.props.query.page > 1) {\n            this.props.query.setPage(this.props.query.page - 1)\n        }\n    }\n\n    firstPage() {\n        this.props.query.setPage(1)\n    }\n\n    lastPage() {\n        this.props.query.setPage(this.getTotalPages())\n    }\n\n    render() {\n        if (_.isEmpty(this.props.query) || _.isEmpty(this.props.data.rows)) {\n            return null\n        }\n\n        let totalPages = this.getTotalPages()\n        let visible = totalPages > 1\n        let page = parseInt(this.props.query.page || 1)\n        let pages = []\n        let visiblePages = []\n        if (totalPages > 10) {\n            if (page > 1) {\n                visiblePages.push(page - 1)\n            }\n            visiblePages.push(page)\n            if (page < totalPages) {\n                visiblePages.push(page + 1)\n            }\n\n            let range = 10\n            if (totalPages > 100) {\n                range = 100\n            } else if (totalPages > 1000) {\n                range = 1000\n            }\n\n            visiblePages = _.sortBy(_.union(visiblePages, _.range(range, totalPages, range)), i => i)\n        } else {\n            visiblePages = _.range(1, totalPages + 1)\n        }\n        visiblePages.forEach(i => {\n            let active = i === page ? \"active\" : \"\"\n            pages.push(<li key={i} className={active}><a href=\"javascript:;\" onClick={this.changePage.bind(this, i)}>{i}</a></li>)\n        })\n\n        return (\n            <ul className=\"pagination\" hidden={!visible}>\n                <li>\n                    <a href=\"javascript:;\" onClick={this.firstPage.bind(this)} aria-label=\"First\">\n                        <i className=\"zmdi zmdi-arrow-left\"></i>\n                    </a>\n                </li>\n                <li>\n                    <a href=\"javascript:;\" onClick={this.previousPage.bind(this)} aria-label=\"Previous\">\n                        <i className=\"zmdi zmdi-chevron-left\"></i>\n                    </a>\n                </li>\n                {pages}\n                <li>\n                    <a href=\"javascript:;\" onClick={this.nextPage.bind(this)} aria-label=\"Next\">\n                        <i className=\"zmdi zmdi-chevron-right\"></i>\n                    </a>\n                </li>\n                <li>\n                    <a href=\"javascript:;\" onClick={this.lastPage.bind(this)} aria-label=\"First\">\n                        <i className=\"zmdi zmdi-arrow-right\"></i>\n                    </a>\n                </li>\n            </ul>\n        )\n    }\n}\n\n\nexport class ResultSummary extends React.Component {\n    render() {\n        let totalRows = 0\n        let start = 0\n        let stop = 0\n        let rowsPerPage = 0\n        let page = 0\n        if (this.props.query && this.props.data.rows) {\n            rowsPerPage = this.props.query.rowsPerPage || 0\n            totalRows = this.props.data.totalRows\n            page = parseInt(this.props.query.page || 1)\n            start = (page - 1) * rowsPerPage + 1\n            stop = Math.min(page * rowsPerPage, totalRows)\n        }\n\n        return (\n            <p className=\"result-summary\">{format(M(\"pagination\"), start, stop, totalRows)}</p>\n        )\n    }\n}\n\nexport class NoCard extends React.Component {\n    render() {\n        return (\n            <div>{this.props.children}</div>\n        )\n    }\n}\n\nexport class QuickSearch extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this._onChange = _.debounce((keyword) => {\n            if (!_.isEmpty(this.props.query)) {\n                this.props.query.setKeyword(keyword)\n            }\n        }, 250)\n    }\n\n    componentDidMount() {\n        const me = ReactDOM.findDOMNode(this);\n\n        $(me).find(\"input[type=search]\")\n            .focus(() => {\n                $(me).find(\".quick-search\").addClass(\"quick-search__active\");    \n            })\n            .blur(() => {\n                $(me).find(\".quick-search\").removeClass(\"quick-search__active\");\n            })\n        \n    }\n\n    componentWillUnmount() {\n\n    }\n\n    onChange(e) {\n        this._onChange(e.target.value)\n    }\n\n    onKeyDown(e) {\n        if (isEnter(e.which)) {\n            e.preventDefault()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"quick-search-container\">\n                <div className=\"quick-search\">\n                    <i className=\"zmdi zmdi-search pull-left\" />\n                    <div className=\"quick-search-input-container\">\n                        <input type=\"search\" onKeyDown={this.onKeyDown.bind(this)} onChange={this.onChange.bind(this)} placeholder={M(\"search\")} />\n                        <div className=\"form-control__bar\"/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class Grid extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.selection = null\n        this.state = {rows: null}\n\n        this.initSelection(props)\n    }\n\n    getTotalRows() {\n        let totalRows = parseInt(this.props.data.totalRows)\n        return totalRows\n    }\n\n    onKeyPress(e) {\n\n    }\n\n    onBlur() {\n        if (this.selection) {\n            this.selection.shiftPressed = false\n            this.selection.controlPressed = false\n        }\n    }\n\n    onKeyDown(e) {\n        let me = ReactDOM.findDOMNode(this)\n        if (this.selection != null) {\n            if (isShift(e.which)) {\n                me.onselectstart = function() { return false }\n                this.selection.shiftPressed = true\n                e.preventDefault()\n                return\n            } else if (isControl(e.which)) {\n                this.selection.controlPressed = true\n                e.preventDefault()\n                return\n            } else if (isUp(e.which)) {\n                this.selection.up()\n                e.preventDefault()\n                return\n            } else if (isDown(e.which)) {\n                this.selection.down()\n                e.preventDefault()\n                return\n            } else if (isEsc(e.which)) {\n                this.selection.clear()\n                e.preventDefault()\n                return\n            }\n        }\n\n        if (_.isFunction(this.props.onKeyDown)) {\n            this.props.onKeyDown(e)\n        }\n    }\n\n    onKeyUp(e) {\n        let me = ReactDOM.findDOMNode(this)\n        if (this.selection != null) {\n            if (isShift(e.which)) {\n                me.onselectstart = null\n                this.selection.shiftPressed = false\n                e.preventDefault()\n                return\n            } else if (isControl(e.which)) {\n                this.selection.controlPressed = false\n                e.preventDefault()\n                return\n            }\n        }\n\n        if (_.isFunction(this.props.onKeyUp)) {\n            this.props.onKeyUp(e)\n        }\n\n    }\n\n    onRowMouseDown(row) {\n        let selectionEnabled = optional(parseBoolean(this.props.selectionEnabled), true)\n        if (!selectionEnabled) {\n            return\n        }\n\n        this.selection.handle(row)\n    }\n\n    onRowDoubleClick(row) {\n        if (_.isFunction(this.props.onRowDoubleClick)) {\n            this.props.onRowDoubleClick(row.data)\n        }\n    }\n\n    onRowExpand(row) {\n        let expanded = !row.expanded\n\n        if (expanded) {\n            eachChildren(row.children, r => r.expandedNow = true)\n        } else {\n            eachChildren(row.children, r => r.collapsedNow = true)\n        }\n        if (!expanded) {\n            this.forceUpdate()\n\n            setTimeout(() => {\n                row.expanded = expanded\n                this.forceUpdate()\n            }, EXPAND_ANIMATION_TIME)\n        } else {\n            row.expanded = expanded\n            this.forceUpdate()\n        }\n\n        if (_.isFunction(this.props.onRowExpand)) {\n            this.props.onRowExpand(row.data, expanded)\n        }\n    }\n\n    initSelection(props) {\n        let selectionEnabled = optional(parseBoolean(props.selectionEnabled), true)\n        if (!selectionEnabled) {\n            return\n        }\n\n\n        let rows = props.data && props.data.rows\n        if (rows) {\n            this.selection = new Selection(rows)\n            this.selection.single = props.selectionMode === \"single\"\n            this.selection.on(\"change\", () => {\n                this.setState(this.state)\n                if (_.isFunction(this.props.onSelectionChanged)) {\n                    this.props.onSelectionChanged(this.selection.getSelectedData())\n                }\n            })\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.initSelection(nextProps)\n\n        let rows = nextProps.data && nextProps.data.rows\n        this.setState(_.assign(this.state, {rows}))\n    }\n\n    toggleSelectAll() {\n        let selectionEnabled = optional(parseBoolean(this.props.selectionEnabled), true)\n        if (!selectionEnabled) {\n            return\n        }\n\n\n        if (this.selection) {\n            this.selection.toggleAll()\n        }\n    }\n\n    clearSelection() {\n        let selectionEnabled = optional(parseBoolean(this.props.selectionEnabled), true)\n        if (!selectionEnabled) {\n            return\n        }\n\n        if (this.selection) {\n            this.selection.clear()\n        }\n    }\n\n    getSelection() {\n        let selectionEnabled = optional(parseBoolean(this.props.selectionEnabled), true)\n        if (!selectionEnabled) {\n            return\n        }\n\n        if (this.selection) {\n            return this.selection.getSelectedData()\n        } else {\n            return null\n        }\n    }\n\n    getTotalPages() {\n        if (!this.props.data || !this.props.data.rows || !this.props.query) {\n            return 1\n        }\n\n        let totalPages = parseInt(Math.ceil(this.props.data.totalRows / this.props.query.rowsPerPage))\n        return totalPages\n    }\n\n    render() {\n        if (_.isEmpty(this.props.descriptor)) {\n            return null\n        }\n\n        //customization properties\n        let quickSearchEnabled = optional(parseBoolean(this.props.quickSearchEnabled), false)\n        let headerVisible = optional(parseBoolean(this.props.headerVisible), true)\n        let footerVisible = optional(parseBoolean(this.props.footerVisible), true)\n        let summaryVisible = optional(parseBoolean(this.props.summaryVisible), true)\n        let noResultsVisible = optional(parseBoolean(this.props.noResultsVisible), true)\n        //let selectionEnabled = optional(parseBoolean(this.props.selectionEnabled), true)\n        let paginationEnabled = optional(parseBoolean(this.props.paginationEnabled), true)\n        let tableClassName = optional(this.props.tableClassName, \"table table-striped table-hover\")\n        let noResultsText = optional(this.props.noResultsText, M(\"noResults\"))\n\n        let myQuery = optional(this.props.query, query.create())\n        let showFilters = myQuery.filters.length > 0\n        let hasResults = (this.props.data && this.props.data.rows) ? this.props.data.rows.length > 0 : false\n        let hasPagination = this.getTotalPages() > 1\n        let Container = optional(parseBoolean(this.props.showInCard), true) ? Card : NoCard\n        let descriptor = mobile.isMobile()\n            ? _.assign({}, this.props.descriptor, {columns: _.union(this.props.descriptor.columns, [{\n                cell: ActionsCell,\n                tdClassName: \"grid-actions\",\n                actions: [\n                    {icon: \"zmdi zmdi-edit\", action: (row) => {\n                        if (_.isFunction(this.props.onRowDoubleClick)) {\n                            this.props.onRowDoubleClick(row)\n                        }\n                    }}\n                ],\n                props: {\n                    showAlways: true\n                }\n            }])})\n            : this.props.descriptor\n\n        return (\n            <div className=\"grid\" tabIndex=\"0\" onBlur={this.onBlur.bind(this)} onKeyPress={this.onKeyPress.bind(this)} onKeyUp={this.onKeyUp.bind(this)} onKeyDown={this.onKeyDown.bind(this)}>\n                <Container>\n                    <div>\n                        {quickSearchEnabled &&\n                            <QuickSearch query={myQuery} />\n                        }\n\n                        {showFilters &&\n                            <Filters query={myQuery} />\n                        }\n\n                        <div className=\"clearfix\"></div>\n\n                        {hasResults ?\n                            <div className=\"with-result\">\n                                <table className={tableClassName}>\n                                    {headerVisible && \n                                        <GridHeader descriptor={descriptor} query={myQuery}/>\n                                    }\n                                    <GridBody descriptor={descriptor} data={this.props.data} query={myQuery} onRowExpand={this.onRowExpand.bind(this)} onRowMouseDown={this.onRowMouseDown.bind(this)} onRowDoubleClick={this.onRowDoubleClick.bind(this)} />\n                                    {footerVisible &&\n                                        <GridFooter descriptor={descriptor} />\n                                    }\n                                </table>\n\n                                {hasPagination && paginationEnabled &&\n                                    <div className=\"pull-right m-20\">\n                                        <Pagination data={this.props.data} query={myQuery} />\n                                    </div>\n                                }\n\n                                {summaryVisible && \n                                    <ResultSummary query={myQuery} data={this.props.data} />\n                                }\n\n                                <div className=\"clearfix\"></div>\n                            </div>\n                            : //no results\n                            noResultsVisible &&\n                            <div className=\"no-results text-center p-30\">\n                                <h1><i className=\"zmdi zmdi-info-outline\" /></h1>\n                                <h4>{noResultsText}</h4>\n                            </div>\n                        }\n                    </div>\n                </Container>\n            </div>\n        )\n    }\n}\nexport class EditCheckCell extends Cell {\n\n    constructor(props){\n        super(props)\n\n        this.state = {value: \"false\"}\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.value != nextState.value) {\n            this.setState({value: nextProps.value})\n        }\n    }\n\n    componentDidMount() {\n        this.setState({value: this.props.value})\n    }\n\n    onValueChange(e) {\n        let newValue = $(e.target).is(\":checked\")\n        this.setState({value: newValue})\n\n        if (_.isFunction(this.props.onValueChange)) {\n            let column = this.props.column\n            let property = this.props.property\n            let row = this.props.row\n            this.props.onValueChange(column, row.data, newValue)\n        }\n    }\n\n    render() {\n\n        let property = this.props.property\n        let value = optional(this.state.value, \"false\")\n        let checked = value === true || value === \"true\"\n\n        return (\n            <div className=\"checkbox\" onClick={this.onValueChange.bind(this)}>\n                <label>\n                    <input type=\"checkbox\" value={value} data-property={property} checked={checked}/>\n                    <i className=\"input-helper\"/>\n                </label>\n            </div>\n        )\n    }\n}\n\n\n\nexport function createCell(column, row, firstElement, onExpand, props = {}) {\n    let key = column.property + \"\" + row.index\n    let value = row.data[column.property]\n    let cell = _.isFunction(column.getCell) ? column.getCell(value, row) : column.cell;\n    return React.createElement(cell, _.assign({key, column, property: column.property, row, value, firstElement, onExpand}, props))\n    \n}\n\nexport class ButtonCell extends Cell {\n    onClick() {\n        if (_.isFunction(this.props.action)) {\n            this.props.action(this.props.column, this.props.row.data, this.props.value)\n        }\n    }\n\n    render() {\n        let formatter = _.isFunction(this.props.formatter) ? this.props.formatter : v => v\n        let className = optional(this.props.className, \"btn btn-link \")\n        let value = formatter(this.getValue())\n\n        return (\n            value === \"NA\" ?\n                <span>{value}</span>\n                :\n\n                <a ref=\"button\" href=\"javascript:;\" className={className} onClick={this.onClick.bind(this)}>\n                    <span>{value}</span>\n                </a>\n        )\n    }\n}","\"use strict\"\n\nimport {MenuStore} from \"../../stores/menu\";\nimport {SessionStore} from \"../../stores/session\";\nimport {UIStore} from \"../../stores/ui\";\nimport {expandMenuItem, setActiveMenuItem} from \"../../actions/menu\";\nimport {logout} from \"../../actions/session\";\nimport * as ui from \"../utils/ui\";\nimport {GlobalLoader, PageLoader, UnobtrusiveLoader} from \"./loader\";\nimport {connect} from \"../utils/aj\";\nimport {optional, parseBoolean} from \"../../utils/lang\";\nimport M from \"../../strings\";\nimport _ from \"underscore\"\nimport {SystemStore} from \"../../stores/system\";\nimport {systemInformation} from \"../../actions/system\";\n\nfunction showPageLoader() {\n    $(\".page-loader\").show()\n}\n\nfunction hidePageLoader() {\n    $(\".page-loader\").fadeOut(500)\n}\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header id=\"header\" className=\"header clearfix\">\n                <div className=\"navigation-trigger hidden-xl-up\" data-ma-action=\"aside-open\" data-ma-target=\".sidebar\">\n                    <div className=\"navigation-trigger__inner\">\n                        <i className=\"navigation-trigger__line\"></i>\n                        <i className=\"navigation-trigger__line\"></i>\n                        <i className=\"navigation-trigger__line\"></i>\n                    </div>\n                </div>\n\n                <div className=\"header__logo hidden-sm-down\">\n                    <h1><a href=\"index.html\">{M(\"appName\")}</a></h1>\n                </div>\n            </header>\n        )\n    }\n}\n\nclass ProfileBox extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        connect(this, [SessionStore, UIStore])\n\n        this.state = {}\n    }\n\n    logout() {\n        logout()\n        ui.navigate(\"/login\")\n    }\n\n    render() {\n        return (\n            <div className=\"user\">\n                <div className=\"user__info\" data-toggle=\"dropdown\">\n                        {this.state.profileImage ?\n                            <img className=\"user__img\" src={this.state.profileImage} alt=\"\" />\n                            :\n                            <img className=\"user__img\" src=\"theme/img/demo/profile-pics/1.jpg\" alt=\"\" />\n                        }\n                    <img className=\"user__img\" src=\"demo/img/profile-pics/8.jpg\" alt=\"\" />\n                    <div>\n                        <div className=\"user__name\">{optional(() => this.state.user.name, \"NA\")}</div>\n                        <div className=\"user__email\">{optional(() => this.state.user.mail, \"NA\")}</div>\n                    </div>\n                </div>\n\n                <div className=\"dropdown-menu\">\n                    <a className=\"dropdown-item\" href=\"#\">View Profile</a>\n                    <a className=\"dropdown-item\" href=\"#\">Settings</a>\n                    <a className=\"dropdown-item\" href=\"#\" onClick={this.logout.bind(this)}><i className=\"zmdi zmdi-time-restore\"></i> Logout</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MenuLevel extends React.Component {\n    onSelect(item) {\n        if (item.href) {\n            location.href = item.href\n        }\n\n        if (_.isFunction(this.props.onSelect)) {\n            this.props.onSelect(item)\n        }\n\n        let hasChildren = !_.isEmpty(item.children)\n        if (hasChildren) {\n            this.onExpand(item)\n        }\n    }\n\n    onExpand(item) {\n        if (_.isFunction(this.props.onExpand)) {\n            this.props.onExpand(item)\n        }\n    }\n\n    render() {\n        let menu = optional(this.props.menu, [])\n        let isMainMenu = optional(parseBoolean(this.props.isMainMenu), false)\n\n        let key = 1\n        let items = menu.map(i => {\n            let className = \"\"\n            if (i.active) { className += \"active\" }\n            let hasChildren = !_.isEmpty(i.children)\n            if (hasChildren) { className += \" navigation__sub\" }\n            if (i.expanded) { className += \" toggled\" }\n\n            return (\n                <li key={key++} className={className}>\n                    <a href=\"javascript:;\" onClick={this.onSelect.bind(this, i)} data-ma-action={hasChildren ? \"submenu-toggle\" : undefined} >\n                        <i className={i.icon}></i> {i.text}\n                    </a>\n\n                    {hasChildren &&\n                        <MenuLevel parent={i} menu={i.children} onExpand={this.onExpand.bind(this, i)} onSelect={this.onSelect.bind(this)} />\n                    }\n                </li>\n            )\n        })\n\n        let expanded = !isMainMenu && this.props.parent.expanded === true\n        let style = {}\n        if (expanded) {\n            style.display = \"block\"\n        }\n        let className = \"\"\n        if (isMainMenu) {\n            className += \"navigation\"\n        } else {\n            className = \"navigation__sub\"\n        }\n\n        return (\n            <ul className={className} style={style}>\n                {items}\n            </ul>\n        )\n    }\n}\n\nclass MainMenu extends React.Component {\n    onExpand(item) {\n        if (_.isFunction(this.props.onExpand)) {\n            this.props.onExpand(item)\n        }\n    }\n\n    onSelect(item) {\n        if (_.isFunction(this.props.onSelect)) {\n            this.props.onSelect(item)\n        }\n    }\n\n\n    render() {\n        let menu = this.props.menu\n\n        return (\n            <MenuLevel menu={menu} isMainMenu=\"true\" onExpand={this.onExpand.bind(this)} onSelect={this.onSelect.bind(this)}/>\n        )\n    }\n}\n\nclass SideBar extends React.Component {\n    render() {\n        return (\n            <aside id=\"sidebar\" className=\"sidebar\">\n                <div className=\"scrollbar-inner\">\n                    <ProfileBox />\n                    <MainMenuContainer />\n                </div>\n            </aside>\n        )\n    }\n}\n\nclass MainMenuContainer extends React.Component {\n    constructor(props) {\n        super(props)\n\n        connect(this, MenuStore, {menu: []})\n\n        logger.i(\"Menu created\")\n    }\n\n    onSelect(item) {\n        setActiveMenuItem({item})\n    }\n\n    onExpand(item) {\n        expandMenuItem({item})\n    }\n\n    render() {\n        return <MainMenu menu={this.state.menu} onExpand={this.onExpand.bind(this)} onSelect={this.onSelect.bind(this)} />\n    }\n}\n\n\nclass Footer extends React.Component {\n\n    constructor(props) {\n        super(props)\n        connect(this, SystemStore, {})\n    }\n\n    componentDidMount() {\n        systemInformation()\n    }\n\n    render() {\n        let backendVersion = this.state.backendVersion;\n        let apiVersion = this.state.apiVersion;\n        let copyrightInfos = this.state.copyrightInfos;\n\n        return (\n            <footer className=\"footer hidden-xs-down\">\n                <ul className=\"nav footer__nav\">\n                    {backendVersion && <li> Web: v {backendVersion}</li> }\n                    {apiVersion && <li> API: v {apiVersion}</li>}\n                    {copyrightInfos && <li> Copyright: {copyrightInfos}</li>}\n                </ul>\n            </footer>\n        )\n    }\n}\n\nclass Layout extends React.Component {\n    render() {\n        return (\n            <div>\n                <Header/>\n                <SideBar/>\n\n                <section className=\"content\">\n                    {this.props.children}\n                </section>\n\n                <Footer />\n            </div>\n        )\n    }\n}\n\n\nclass FullScreenLayout extends React.Component {\n    render() {\n        return <div>{this.props.children}</div>\n    }\n}\n\n\nclass ScreenContainer extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentScreen: null\n        }\n    }\n\n    componentDidMount() {\n        ui.addScreenChangeListener(screen => {\n            //showPageLoader()\n            this.setState(_.assign(this.state, {currentScreen: screen}))\n            //hidePageLoader()\n        })\n    }\n\n    render() {\n        if (_.isEmpty(this.state.currentScreen)) {\n            return <div />\n        }\n        return this.state.currentScreen\n    }\n}\n\n\nclass Screen extends React.Component {\n\n}\n\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div>\n                <PageLoader />\n                <GlobalLoader />\n                <UnobtrusiveLoader />\n                <ScreenContainer />\n            </div>\n        )\n    }\n}\n\nexports.Index = Index\nexports.Screen = Screen\nexports.FullScreenLayout = FullScreenLayout\nexports.Layout = Layout\nexports.Header = Header\nexports.Footer = Footer\n","\"use strict\"\n\nexport function hidePageLoader() {\n    $(\".page-loader\").fadeOut(500)\n}\n\nclass PageLoader extends React.Component {\n\n    componentDidUpdate() {\n        if (this.state.loading) {\n            $(this.refs.page_loader).show()\n        } else {\n            $(this.refs.page_loader).fadeOut(500);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"page-loader\" style={{display: \"block\"}}>\n                <div className=\"preloader\">\n                    <svg className=\"pl-circular\" viewBox=\"25 25 50 50\">\n                        <circle className=\"plc-path\" cx=\"50\" cy=\"50\" r=\"20\" />\n                    </svg>\n\n                    <p>Please wait...</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass GlobalLoader extends React.Component {\n\n    render() {\n        return (\n            <div className=\"global-loader\" style={{display: \"none\"}}>\n                <div className=\"layer\"></div>\n                <div className=\"preloader\">\n                    <svg className=\"pl-circular\" viewBox=\"25 25 50 50\">\n                        <circle className=\"plc-path\" cx=\"50\" cy=\"50\" r=\"20\" />\n                    </svg>\n                </div>\n\n                <p className=\"message\">Please wait...</p>\n            </div>\n        )\n    }\n}\n\nclass Preloader extends React.Component {\n    render() {\n        return ((this.props.visible || true) ?\n            <div className=\"preloader\">\n                <svg className=\"pl-circular\" viewBox=\"25 25 50 50\">\n                    <circle className=\"plc-path\" cx=\"50\" cy=\"50\" r=\"20\" />\n                </svg>\n            </div>\n            :\n            null\n        )\n    }\n}\n\nclass UnobtrusiveLoader extends React.Component {\n\n    render() {\n        return (\n            <div className=\"unobtrusive-loader\" style={{display: \"none\"}}>\n                <div className=\"preloader pls-white pl-sm\">\n                    <svg className=\"pl-circular\" viewBox=\"25 25 50 50\">\n                        <circle className=\"plc-path\" cx=\"50\" cy=\"50\" r=\"20\" />\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n}\n\nexports.PageLoader = PageLoader;\nexports.GlobalLoader = GlobalLoader;\nexports.Preloader = Preloader;\nexports.UnobtrusiveLoader = UnobtrusiveLoader;","\"use strict\"\n\nimport Login from \"../screens/login\"\nimport {connect} from \"../utils/aj\"\nimport ChangePassword from \"../screens/changePassword\";\nimport {SessionStore} from \"../../stores/session\";\n\nclass Secure extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        connect(this, SessionStore)\n    }\n\n    render() {\n        let toPrint = this.props.children;\n        if (this.state.isLoggedIn && this.state.user && this.state.user.firstLogin) {\n            toPrint =  <ChangePassword/>\n        } else if (!this.state.isLoggedIn)  {\n            toPrint =  <Login/>\n        }\n        return (\n            (\n                toPrint\n            )\n        )\n    }\n\n}\n\nmodule.exports = Secure\n","\"use strict\"\n\nimport {CheckCell, TextCell} from \"./components/grids\";\nimport {check, sanitize} from \"../libs/validator\";\nimport {Image, Mail, PasswordText, Text, YesNo} from \"./components/forms\";\nimport {EntitiesLookupContainer, ValuesLookupContainer} from \"./components/containers\";\nimport M from \"../strings\";\nimport {getLoggedUser, hasPermission} from \"../api/session\";\n\n\nconst entities = {\n\tuser: {\n\t\tgrid: {\n\t\t\ttitle: M(\"usersList\"),\n\t\t\tsubtitle: M(\"usersListDescription\"),\n\t\t\tdescriptor: {\n\t            columns: [\n\t                {property: \"name\", header: M(\"name\"), cell: TextCell, sortable: true, searchable: true},\n\t                {property: \"mail\", header: M(\"mail\"), cell: TextCell, sortable: true, searchable: true},\n\t                {property: \"active\", header: M(\"active\"), cell: CheckCell, sortable: true, searchable: true}\n\t            ]\n\t        }\n\t\t},\n\t\tform: {\n\t\t\ttitle: M(\"editUser\"),\n\t\t\tsubtitle: M(\"editUserDescription\"),\n\t\t\tgetActions(data) {\n\t\t\t\tlet actions = [\"back\", \"save\", \"save-go-back\", \"revisions\"];\n\t\t\t\tif (hasPermission(\"canResetPassword\")) {\n\t\t\t\t\tif (data && data.id) {\n\t\t\t\t\t\tactions.push({\n\t\t\t\t\t\t\ttype: \"button\",\n\t\t\t\t\t\t\ticon: \"zmdi zmdi-brush\",\n\t\t\t\t\t\t\ttooltip: \"Reset password\",\n\t\t\t\t\t\t\taction: () => {\n\t\t\t\t\t\t\t\tswal({\n\t\t\t\t\t\t\t\t\ttitle: M(\"confirm\"),\n\t\t\t\t\t\t\t\t\ttext: \"Verrà impostata una nuova password ed inviata all'indirizzo mail dell'utente\",\n\t\t\t\t\t\t\t\t\tshowCancelButton: true\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\t\t\tif (res.value) {\n\t\t\t\t\t\t\t\t\t\tresetUserPassword({id: data.id})\n\t\t\t\t\t\t\t\t\t\tif (data.id === getLoggedUser().id) {\n\t\t\t\t\t\t\t\t\t\t\tswal({\n\t\t\t\t\t\t\t\t\t\t\t\ttitle: M(\"confirm\"),\n\t\t\t\t\t\t\t\t\t\t\t\ttext: \"La tua password è stata resettata. Dovrai eseguire un nuovo accesso\",\n\t\t\t\t\t\t\t\t\t\t\t\tshowCancelButton: false\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (res.value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogout();\n\t\t\t\t\t\t\t\t\t\t\t\t\tui.navigate(\"/login\")\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\t\tlogger.i(e)\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn actions\n\t\t\t},\n\t\t\tdescriptor: {\n\t            areas: [\n\t                {\n\t                    title: M(\"generalInformations\"),\n\t                    subtitle: null,\n\t                    fields: [\n\t                        {\n\t                            property: \"name\",\n\t                            control: Text,\n\t                            label: M(\"name\"),\n\t                            placeholder: M(\"name\"),\n\t                            sanitizer: (value) => sanitize(value).trim(),\n\t                            validator: (value) => check(value).notEmpty()\n\t                        },\n\t                        {\n\t                            property: \"mail\",\n\t                            control: Mail,\n\t                            label: M(\"mail\"),\n\t                            placeholder: M(\"mailAddress\"),\n\t                            sanitizer: (value) => sanitize(value).trim(),\n\t                            validator: (value) => check(value).isEmail()\n\t                        },\n                            {\n                                property: \"password\",\n                                control: PasswordText,\n                                label: M(\"password\"),\n                                placeholder: M(\"password\"),\n                                sanitizer: value => sanitize(value).trim()\n                            },\n\n                            {\n\t                            property: \"active\",\n\t                            control: YesNo,\n\t                            label: M(\"active\"),\n\t                            sanitizer: (value) => sanitize(value).toBoolean()\n\t                        },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tproperty: \"_image\",\n\t\t\t\t\t\t\t\tcontrol: Image,\n\t\t\t\t\t\t\t\tlabel: M(\"image\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tproperty: \"_cover\",\n\t\t\t\t\t\t\t\tcontrol: Image,\n\t\t\t\t\t\t\t\tlabel: M(\"cover\")\n\t\t\t\t\t\t\t},\n\t                        {\n\t                            property: \"roles\",\n\t                            label: M(\"roles\"),\n\t                            control: EntitiesLookupContainer,\n\t                            props: {\n\t                            \tid: \"user_roles\",\n\t                            \tmode: \"multiple\",\n\t                            \tentity: \"role\",\n\t\t                            selectionGrid: {\n\t\t                                columns: [\n\t\t                                    {property: \"role\", header: M(\"name\"), cell: TextCell}\n\t\t                                ]\n\t\t                            },\n\t\t                            popupGrid: {\n\t\t                                columns: [\n\t\t                                    {property: \"role\", header: M(\"name\"), cell: TextCell}\n\t\t                                ]\n\t\t                            }\n\t                            }\t                            \n\t                        }\n\t                    ]\n\t                }\n\t            ]\n\t        }\n\t\t}\n\t},\n\n\trole: {\n\t\tgrid: {\n\t\t\ttitle: M(\"rolesList\"),\n\t\t\tsubtitle: M(\"rolesListDescription\"),\n\t\t\tquickSearchEnabled: true,\n\t\t\tdescriptor: {\n\t\t\t\tcolumns: [\n\t                {property: \"role\", header: \"Role\", cell: TextCell, sortable: true, searchable: true}\n\t            ]\n\t\t\t}\n\t\t},\n\t\tform: {\n\t\t\ttitle: \"Edit role\",\n\t\t\tsubtitle: null,\n\t\t\tdescriptor: {\n\t\t\t\tfields: [\n\t\t\t\t\t{\n                        property: \"role\",\n                        control: Text,\n                        label: M(\"role\"),\n                        placeholder: M(\"nameOfRole\"),\n                        sanitizer: value => sanitize(value).trim(),\n                        validator: value => check(value).notEmpty()\n                    },\n                    {\n                    \tproperty: \"_permissions\",\n                    \tlabel: M(\"permissions\"),\n                    \tplaceholder: M(\"selectPermissions\"),\n                    \tcontrol: ValuesLookupContainer,\n                    \t//sanitizer: value => _.map(value, v => v.value),\n                    \tvalidator: value => check(value).notEmpty(),\n                    \tprops: {\n                    \t\tid: \"role_permissions\",\n                    \t\tcollection: \"permissions\",\n\t                    \tmode: \"multiple\",\n\t                        selectionGrid: {\n\t                            columns: [\n\t                                {property: \"label\", header: M(\"name\"), cell: TextCell}\n\t                            ]\n\t                        },\n\t                        popupGrid: {\n\t                            columns: [\n\t                                {property: \"label\", header: M(\"name\"), cell: TextCell}\n\t                            ]\n\t                        }\n                    \t}\n\n                    }\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n\n    // ,revisionSettings: {\n    //     form: {\n    //         title: M(\"entityRevisionSettings\"),\n    //         subtitle: null,\n    //         descriptor: {\n    //             canGoBack() {\n    //                 return false\n    //             },\n    //             fields: [\n    //                 {\n    //                     property: \"items\",\n    //                     control: MultiCheckboxByValue,\n    //                     size: \"col-xs-12\",\n    //                     props: {\n    //                         formatter: v => {\n    //                             return M(v.itemType)\n    //                         }\n    //                     }\n    //                 },\n    //             ]\n    //         }\n    //     }\n    // },\n    // revision: {\n    //     grid: {\n    //         title: M(\"revisions\"),\n    //         descriptor: {\n    //             columns: [\n    //                 {property: \"code\", header: M(\"code\"), cell: TextCell, sortable: false, searchable: false},\n    //                 {property: \"type\", header: M(\"type\"), cell: TextCell, sortable: false, searchable: false},\n    //                 {\n    //                     property: \"creator\",\n    //                     header: M(\"author\"),\n    //                     cell: TextCell,\n    //                     sortable: false,\n    //                     searchable: false\n    //                 },\n    //\n    //                 {\n    //                     property: \"dateToString\",\n    //                     header: M(\"date\"),\n    //                     cell: TextCell,\n    //                     sortable: false,\n    //                     searchable: false\n    //                 },\n    //                 {\n    //                     property: \"differences\",\n    //                     header: M(\"differences\"),\n    //                     cell: MultiTextCell,\n    //                     sortable: false,\n    //                     searchable: false,\n    //                     props: {\n    //                         singleItemFormatter(v) {\n    //                             debugger\n    //                             let previousValueString = \"\";\n    //                             let newValueString = \"\";\n    //                             previousValueString = M(\"previousValue\") + \": \" + (v.previousValueDescription? v.previousValueDescription : \" null \") + \", \";\n    //                             newValueString = M(\"newValue\") + \": \" + (v.newValueDescription? v.newValueDescription : \" null \");\n    //                             return M(v.name) + \" -> \" + previousValueString + newValueString\n    //                         }\n    //                     }\n    //                 }\n    //\n    //             ]\n    //         }\n    //     },\n    // }\n}\n\nexport default entities","import {Index} from \"./components/layout\";\nimport Login from \"./screens/login\";\nimport Register from \"./screens/register\";\nimport Recover from \"./screens/recover\";\nimport Home from \"./screens/home\";\nimport RegistrationOk from \"./screens/registrationOk\";\nimport Confirm from \"./screens/confirm\";\nimport * as ui from \"./utils/ui\";\nimport * as plugins from \"./pluginsimpl\";\nimport {resumeSession} from \"../actions/session\";\nimport * as keyboard from \"./utils/keyboard\";\nimport {SessionStore} from \"../stores/session\";\nimport {EntitiesGrid, EntityForm, RevisionGrid} from \"./screens/entities\";\nimport {hidePageLoader} from \"./components/loader\";\n\n\nexport default function main() {\n\t/* Register plugins */\n\tplugins.register()\n\n\t/* Admin routes */\n\tui.addRoute(\"/entities/:entity\", params => ui.changeScreen(<EntitiesGrid key={params.entity} entity={params.entity} />))\n\tui.addRoute(\"/entities/:entity/:entityId\", params => ui.changeScreen(<EntityForm key={params.entity} entity={params.entity} entityId={params.entityId} params={params}/>))\n\tui.addRoute(\"/entities/single/:entity\", params => ui.changeScreen(<EntityForm key={params.entity} entity={params.entity} entityId=\"_\" params={params}/>))\n\tui.addRoute(\"/revision/:entity/:entityId\", params => ui.changeScreen(<RevisionGrid key={params.entity} entityId={params.entityId}  entity={params.entity} params={params} />))\n\tui.addRoute(\"/recover\", params => ui.changeScreen(<Recover />))\n\n\t/* Account routes */\n\tui.addRoute(\"/login\", params => ui.changeScreen(<Login />))\n\tui.addRoute(\"/register\", params => ui.changeScreen(<Register />))\n\tui.addRoute(\"/recover\", params => ui.changeScreen(<Recover />))\n\tui.addRoute(\"/registrationComplete\", params => ui.changeScreen(<RegistrationOk />))\n\n\tui.addRoute(\"/confirm\", params => ui.changeScreen(<Confirm activationCode={params.activationCode}/>))\n\n\t/* home route */\n\tui.addRoute(\"/\", params => ui.changeScreen(<Home />))\n\n\t/* Attach keyboard for global key bindings */\n\tkeyboard.attach()\n\n\t/* render main index page into dom */\n\tReactDOM.render(<Index />, document.getElementById(\"entry-point\"))\n\n\t/* Avoid going in screens that require login before trying session resume */\n\tlet owner = {}\n\tSessionStore.subscribe(owner, state => {\n\t    if (state.resumeComplete) {\n\t        SessionStore.unsubscribe(owner)\n\t        ui.startNavigation()\n\t        hidePageLoader()\n\t    }\n\t})\n\n\t/* automatic login, if possible */\n\tresumeSession()\n}\n","\"use strict\";\n\nexports.Alert = {\n    alert(data, callback) {\n        let {title, message, type} = data;\n        let _callback = (v) => { if (_.isFunction(callback)) {  callback(v) } }\n        swal({title, text: message, type}).then((res) => _callback(res.value))\n    },\n\n    confirm(data, callback) {\n        let {title, message} = data;\n        let _callback = (v) => { if (_.isFunction(callback)) {  callback(v) } }\n        swal({title, text: message, showCancelButton: true}).then((res) => _callback(res.value))\n    }\n}\n\nlet loaderCount = 0;\nlet unobtrusiveLoaderCount = 0;\n\nexports.Loader = {\n    show(data, callback) {\n        loaderCount++\n        $(\".global-loader\").find(\".message\").text(data.message).end().show()\n    },\n\n    hide(data, callback) {\n        loaderCount--\n        if (loaderCount <= 0) {\n            $(\".global-loader\").hide()\n            loaderCount = 0\n        }\n    },\n\n    showUnobtrusive(data, callback) {\n        unobtrusiveLoaderCount++\n        $(\".unobtrusive-loader\").show()\n        $(\".hide-on-unobtrusive-loading\").hide();\n    },\n\n    hideUnobtrusive(data, callback) {\n        unobtrusiveLoaderCount--;\n        if (unobtrusiveLoaderCount <= 0) {\n            $(\".unobtrusive-loader\").hide()\n            $(\".hide-on-unobtrusive-loading\").show();\n        }\n    }\n}\n\nexports.Toast = {\n    show(data, callback) {\n        $.growl({\n            message: data.message,\n            url: ''\n        }, {\n            element: 'body',\n            type: \"inverse\",\n            allow_dismiss: true,\n            placement: {\n                from: \"bottom\",\n                align: \"center\"\n            },\n            offset: {\n                x: 20,\n                y: 85\n            },\n            spacing: 10,\n            z_index: 1031,\n            delay: 2500,\n            timer: 1000,\n            url_target: '_blank',\n            mouse_over: false,\n            icon_type: 'class',\n            template: '<div data-growl=\"container\" class=\"alert\" role=\"alert\">' +\n                        '<button type=\"button\" class=\"close\" data-growl=\"dismiss\">' +\n                        '<span aria-hidden=\"true\">&times;</span>' +\n                        '<span class=\"sr-only\">Close</span>' +\n                        '</button>' +\n                        '<span data-growl=\"icon\"></span>' +\n                        '<span data-growl=\"message\"></span>' +\n                        '<a href=\"#\" data-growl=\"url\"></a>' +\n                        '</div>'\n        });\n    }\n}\n\nexports.register = function() {\n    window.Alert = exports.Alert;\n    window.Toast = exports.Toast;\n    window.Loader = exports.Loader;\n}\n\n","\"use strict\"\n\nimport {FullScreenLayout, Screen} from \"../components/layout\";\nimport M from \"../../strings\";\nimport {changePassword} from \"../../actions/account\";\n\nexport default class ChangePassword extends Screen {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {};\n    }\n\n    changePassword() {\n        changePassword({password: this.state.password, passwordConfirm: this.state.passwordConfirm})\n    }\n\n    updatePassword(value) {\n        this.state.password = value.target.value;\n    }\n\n    updatePasswordConfirm(value) {\n        this.state.passwordConfirm = value.target.value;\n    }\n\n    render() {\n        return (\n            <FullScreenLayout>\n                <div className=\"login-content\">\n                    <div className=\"lc-block lc-block-alt toggled\" id=\"l-lockscreen\">\n                        <div className=\"lcb-form\" ref=\"changePassword_form\">\n\n                            <p>E' necessario impostare una password personale al primo accesso nel sistema</p>\n                            <div className=\"input-group m-b-20\">\n                                <span className=\"input-group-addon\"><i className=\"zmdi zmdi-lock\"></i></span>\n                                <div className=\"fg-line\">\n                                    <input type=\"password\" onChange={this.updatePassword.bind(this)} name=\"password\" className=\"form-control\" placeholder={M(\"password\")} />\n                                </div>\n                            </div>\n\n                            <div className=\"input-group m-b-20\">\n                                <span className=\"input-group-addon\"><i className=\"zmdi zmdi-lock-outline\"></i></span>\n                                <div className=\"fg-line\">\n                                    <input type=\"password\" name=\"confirmPassword\"  onChange={this.updatePasswordConfirm.bind(this)} className=\"form-control\" placeholder={M(\"passwordConfirm\")} />\n                                </div>\n                            </div>\n                        </div>\n\n                        <a href=\"javascript:;\" onClick={this.changePassword.bind(this)} className=\"btn btn-login btn-success btn-float waves-effect waves-circle waves-float\"><i className=\"zmdi zmdi-arrow-forward\"></i></a>\n\n                    </div>\n                </div>\n\n            </FullScreenLayout>\n        )\n    }\n\n}\n\n\n","\"use strict\";\n\nimport {AccountStore} from \"../../stores/account\";\nimport {FullScreenLayout, Screen} from \"../components/layout\";\nimport * as ui from \"../utils/ui\";\nimport * as forms from \"../utils/forms\";\nimport M from \"../../strings\";\nimport {confirmAccount, setActivationCode} from \"../../actions/account\";\nimport {connect} from \"../utils/aj\";\n\nexport default class Recover extends Screen {\n    constructor(props) {\n        super(props)\n\n        connect(this, AccountStore, {activationCode: \"\"})\n    }\n\n    confirm() {\n        let data = forms.serialize(this.refs.confirm_form)\n        confirmAccount(data)\n    }\n\n    componentWillUpdate(props, state) {\n        if (state.confirmed) {\n            ui.navigate(\"/\")\n        }\n    }\n\n    componentDidMount() {\n        setActivationCode({activationCode: this.props.activationCode})\n    }\n\n    render() {\n        return (\n            <FullScreenLayout>\n                <div className=\"login-content\">\n                    <div className=\"lc-block toggled\" id=\"l-forget-password\">\n                        <form action=\"javascript:;\" className=\"lcb-form\" onSubmit={this.confirm.bind(this)} ref=\"confirm_form\">\n                            <p className=\"text-left\">{M(\"accountConfirmText\")}</p>\n\n                            <div className=\"input-group m-b-20\">\n                                <span className=\"input-group-addon\"><i className=\"zmdi zmdi-lock\"></i></span>\n                                <div className=\"fg-line\">\n                                    <input type=\"text\" name=\"activationCode\" className=\"form-control\" placeholder={M(\"activationCode\")} value={this.state.activationCode} />\n                                </div>\n                            </div>\n\n                            <button type=\"submit\" className=\"btn btn-login btn-success btn-float animated fadeInLeft\"><i className=\"zmdi zmdi-lock-open\"></i></button>\n                        </form>\n\n                        <div className=\"lcb-navigation\">\n                            <a href=\"#login\" data-ma-block=\"#l-login\"><i className=\"zmdi zmdi-long-arrow-right\"></i> <span>{M(\"signIn\")}</span></a>\n                            <a href=\"#register\" data-ma-block=\"#l-register\"><i className=\"zmdi zmdi-plus\"></i> <span>{M(\"register\")}</span></a>\n                        </div>\n                    </div>\n                </div>\n            </FullScreenLayout>\n        )\n    }\n\n}\n\n\n","\"use strict\";\n\n\nimport {Layout, Screen} from \"../../components/layout\";\nimport M from \"../../../strings\";\nimport {deleteEntities, freeEntities, loadEntities} from \"../../../actions/entities\";\nimport {ActionsMatcher, FloatingButton, HeaderBlock} from \"../../components/common\";\nimport {Grid, resultToGridData} from \"../../components/grids\";\nimport * as query from \"../../../api/query\";\nimport {format, optional} from \"../../../utils/lang\";\nimport {isCancel} from \"../../utils/keyboard\";\nimport entities from \"../../entities\";\nimport * as ui from \"../../utils/ui\";\nimport {Permission} from \"../../../api/session\";\n\nexport default class AbstractEntitiesGrid extends Screen {\n    constructor(props) {\n        super(props)\n\n        if (_.isEmpty(this.getEntity())) {\n            throw new Error(\"Please specify entity for form\")\n        }\n\n        let _query = entities[this.getEntity()].grid.initialQuery\n        if (_.isFunction(entities[this.getEntity()].grid.initialQuery)) {\n            _query = entities[this.getEntity()].grid.initialQuery()\n        }\n        if (!_query) {\n            _query = query.create()\n            _query.page = 1\n            _query.rowsPerPage = 50\n        }\n\n        this.state = {grid: null, result: null, query: _query}\n    }\n\n    getEntity() {\n        return this.props.entity\n    }\n\n    componentDidMount() {\n        loadEntities({discriminator: this.discriminator, entity: this.getEntity(), query: this.state.query})\n    }\n\n    componentWillUnmount() {\n        freeEntities({discriminator: this.discriminator})\n    }\n\n    onQueryChanged() {\n        loadEntities({discriminator: this.discriminator, entity: this.getEntity(), query: this.state.query})\n    }\n\n    editEntity(data) {\n        if (!this.canEdit()) {\n            return\n        }\n\n        ui.navigate(this.getEditUrl(data))\n    }\n\n    createEntity() {\n        if (!this.canCreate()) {\n            return\n        }\n\n        ui.navigate(this.getCreateUrl())\n    }\n\n    getCreateUrl() {\n        let grid = entities[this.getEntity()].grid\n        let createUrl = grid.createUrl\n        if (_.isFunction(createUrl)) {\n            createUrl = createUrl()\n        }\n        return optional(createUrl, `/entities/${this.getEntity()}/new`)\n    }\n\n    getEditUrl(data) {\n        let grid = entities[this.getEntity()].grid\n        if (_.isFunction(grid.editUrl)) {\n            return format(grid.editUrl(data))\n        } else if (!_.isEmpty(grid.editUrl)) {\n            return format(grid.editUrl, data.id)\n        } else {\n            return `/entities/${this.getEntity()}/${data.id}`\n        }\n    }\n    getDeleteMessage() {\n        let message = format(M(\"entityDeleteConfirm\"), this.refs.grid.getSelection().length)\n        let entityMessage = this.getGrid().deleteMessage\n        if (entityMessage)\n            message = format(\"{0}\\n{1}\", message, entityMessage)\n        return message;\n    }\n\n    deleteEntities() {\n        if (!this.canDelete()) {\n            return\n        }\n\n        let selection = this.refs.grid.getSelection()\n        if (_.isEmpty(selection)) {\n            return\n        }\n\n        swal({ title: M(\"confirm\"), text: this.getDeleteMessage(), showCancelButton: true })\n            .then(res => {\n                if (res.value) {\n                    deleteEntities({discriminator: this.discriminator, entity: this.getEntity(), ids: selection.map(s => s.id)})\n                }\n            })\n    }\n\n    onGridRowDoubleClick(row) {\n        this.editEntity(row)\n    }\n\n    getTitle() {\n        let grid = entities[this.getEntity()].grid\n        return optional(grid.title, \"List\")\n    }\n\n    getSubtitle() {\n        let grid = entities[this.getEntity()].grid\n        return grid.subtitle\n    }\n\n    getActions() {\n        let defaultActions = [\n            {\n                id: \"refresh\",\n                type: \"button\",\n                icon: \"zmdi zmdi-refresh-alt\",\n                tooltip: M(\"refresh\"),\n                permissions: [this.getEntity() + \":\" + Permission.LIST],\n                action: () => { loadEntities({discriminator: this.discriminator, entity: this.getEntity(), query: this.state.query}) }\n            },\n            {\n                id: \"create\",\n                type: \"button\",\n                icon: \"zmdi zmdi-plus\",\n                tooltip: M(\"create\"),\n                permissions: [this.getEntity() + \":\" + Permission.NEW],\n                action: () => { this.createEntity() }\n            },\n            {\n                id: \"delete\",\n                type: \"button\",\n                icon: \"zmdi zmdi-delete\",\n                tooltip: M(\"delete\"),\n                permissions: [this.getEntity() + \":\" + Permission.DELETE],\n                action: () => { this.deleteEntities() }\n            },\n            {\n                id: \"selectAll\",\n                type: \"button\",\n                icon: \"zmdi zmdi-select-all\",\n                tooltip: M(\"selectAll\"),\n                action: () => { this.refs.grid.toggleSelectAll() }\n            }\n\n        ]\n\n        let grid = entities[this.getEntity()].grid\n        let matcher = new ActionsMatcher(defaultActions)\n        return matcher.match(grid.actions)\n    }\n\n    getGrid() {\n        return this.refs.grid\n    }\n\n    getDescriptor() {\n        let grid = entities[this.getEntity()].grid\n        return grid.descriptor\n    }\n\n    getData() {\n        return resultToGridData(this.state.result)\n    }\n\n    isQuickSearchEnabled() {\n        let grid = entities[this.getEntity()].grid\n        return optional(grid.quickSearchEnabled, false)\n    }\n\n    canEdit() {\n        let grid = entities[this.getEntity()].grid\n        return optional(grid.canEdit, true)\n    }\n\n    canCreate() {\n        let grid = entities[this.getEntity()].grid\n        return optional(grid.canCreate, true)\n    }\n\n    canDelete() {\n        let grid = entities[this.getEntity()].grid\n        return optional(grid.canDelete, true)\n    }\n\n    hideFilters() {\n        return false;\n    }\n\n\n    generateHeaderBlock() {\n\n        let title = this.getTitle()\n        let subtitle = this.getSubtitle()\n        let actions = this.getActions()\n        return <HeaderBlock title={title} subtitle={subtitle} actions={actions}/>\n    }\n\n    render() {\n\n        let descriptor = this.getDescriptor()\n        let data = this.getData()\n        let header = this.generateHeaderBlock()\n\n        return (\n            <Layout>\n                {header}\n                <Grid\n                    ref=\"grid\"\n                    descriptor={descriptor}\n                    data={data}\n                    hideFilters={this.hideFilters()}\n                    query={this.state.query}\n                    //onKeyDown={this.onGridKeyDown.bind(this)}\n                    onRowDoubleClick={this.onGridRowDoubleClick.bind(this)}\n                    quickSearchEnabled={this.isQuickSearchEnabled()}\n                />\n                {this.canCreate() &&\n                <FloatingButton icon=\"zmdi zmdi-plus\" onClick={this.createEntity.bind(this)} />\n                }\n            </Layout>\n        )\n    }\n}\n\n","\"use strict\";\n\nimport {EntitiesStore} from \"../../../stores/entities\";\nimport {connectDiscriminated} from \"../../utils/aj\";\nimport AbstractEntitiesGrid from \"./abstractEntitiesGrid\";\n\nexport default class EntitiesGrid extends AbstractEntitiesGrid {\n    constructor(props) {\n        super(props)\n\n        this.state.query.on(\"change\", () => {\n            this.onQueryChanged()\n        })\n\n\n        this.discriminator = \"entity_grid_\" + this.getEntity()\n\n        connectDiscriminated(this.discriminator, this, [EntitiesStore])\n    }\n}\n\n","\"use strict\";\n\nimport {Layout, Screen} from \"../../components/layout\"\nimport M from \"../../../strings\"\nimport {connectDiscriminated} from \"../../utils/aj\"\nimport {checkRevisionEnableStatus, freeEntities, getEntity, saveEntity} from \"../../../actions/entities\"\nimport {Form} from \"../../components/forms\"\nimport entities from \"../../entities\"\nimport * as ui from \"../../utils/ui\"\nimport {optional} from \"../../../utils/lang\"\nimport {EntitiesStore} from \"../../../stores/entities\";\nimport {ActionsMatcher, HeaderBlockWithBreadcrumbs} from \"../../components/common\";\nimport {hasPermission, Permission} from \"../../../api/session\";\n\nexport default class EntityForm extends Screen {\n    constructor(props) {\n        super(props)\n\n        if (_.isEmpty(props.entity)) {\n            throw new Error(\"Please specify entity for form\")\n        }\n\n        this.discriminator = \"entity_form_\" + props.entity\n        this.initialEntity = null\n        this.willGoBack = true\n\n        connectDiscriminated(this.discriminator, this, EntitiesStore, {data: null})\n    }\n\n    componentDidMount() {\n        let form = this.refs.form\n        let model = form.model\n\n        this.onBeforeUnload = function() {\n            if (model.hasChanges()) {\n                return M(\"formChangeAlert\")\n            }\n        }\n\n        window.onbeforeunload = this.onBeforeUnload\n        ui.addOnBeforeChangeListener(this.onBeforeUnload)\n\n        this.setState({isCreation: this.props.entityId == \"new\"});\n        getEntity({discriminator: this.discriminator, entity: this.props.entity, id: this.props.entityId, params: this.props.params})\n        //checkRevisionEnableStatus({discriminator: this.discriminator, entity: this.props.entity})\n    }\n\n    goToRevision() {\n        ui.navigate(\"/revision/\" + this.props.entity + \"/\" + this.getEntityId())\n    }\n\n\n    getEntityId() {\n        let id = this.state.data != null? this.state.data.id : null\n        if (!id) {\n            if (this.props.entityId !== \"new\" && this.props.entityId !== \"_\")\n                id = this.props.entityId\n        }\n        return id;\n    }\n    componentWillUnmount() {\n        freeEntities({discriminator: this.discriminator})\n\n        window.onbeforeunload = null\n        ui.removeOnBeforeChangeListener(this.onBeforeUnload)\n    }\n\n    submit(goBack) {\n        this.willGoBack = goBack\n        this.refs.form.submit()\n    }\n\n    onSubmit(data) {\n        if (_.isFunction(this.props.onSubmit)) {\n            this.props.onSubmit(data)\n        } else {\n            saveEntity({discriminator: this.discriminator, entity: this.props.entity, data: data, reload: !this.willGoBack})    \n        }        \n    }\n\n    onCancel() {\n        this.goBack()\n    }\n\n    goBack() {\n        const form = this.refs.form\n        const data = form.model.sanitized()\n        ui.navigate(this.getGridUrl(data))\n    }\n\n    componentWillUpdate(props, state) {\n        if (state.saved) {\n            this.refs.form.model.reset()\n        }\n\n        if (state.saved && this.willGoBack) {\n            this.goBack()\n            return false\n        }\n\n        if (state.validationError) {\n            if (state.validationResult) {\n                let form = this.refs.form\n                if (form && form.model) { \n                    _.each(state.validationResult.errors, e => {\n                        form.model.setError(e.property, M(e.message))\n                    })\n                }\n            }\n            this.refs.form.model.invalidateForm()\n        }\n\n        if (state.loaded && !this.initialized) {\n            this.onDataLoad(state.data)\n            this.initialized = true;\n        }\n    }\n\n     onDataLoad(data) {\n        let form = entities[this.getEntity()].form\n        if (_.isFunction(form.onDataLoad)) {\n            form.onDataLoad(data, this.props.params);\n        }\n    }\n\n    getEntity() {\n        return this.props.entity\n    }\n\n    getGridUrl(data) {\n        const form = entities[this.getEntity()].form\n        let gridUrl = form.gridUrl\n        if (_.isFunction(gridUrl)) {\n            gridUrl = gridUrl(data)\n        }\n        return optional(gridUrl, \"/entities/\" + this.getEntity())\n    }\n\n    getActions() {\n        let defaultActions = [\n            {\n                id: \"back\",\n                type: \"button\",\n                icon: \"zmdi zmdi-arrow-left\",\n                tooltip: M(\"back\"),\n                action: () => {\n                    this.goBack()\n                }\n            }\n        ]\n\n        if(this.canSave()){\n            defaultActions.push(\n                {\n                    id: \"save\",\n                    type: \"button\",\n                    icon: \"zmdi zmdi-save\",\n                    tooltip: M(\"save\"),\n                    permissions: this.getEntitySavePermissions(),\n                    action: () => {\n                        this.submit(false)\n                    }\n                },\n                {\n                    id: \"save-go-back\",\n                    type: \"button\",\n                    icon: \"zmdi zmdi-rotate-ccw\",\n                    tooltip: M(\"saveAndGoBack\"),\n                    permissions: this.getEntitySavePermissions(),\n                    action: () => {\n                        this.submit(true)\n                    }\n                }\n            )\n        }\n\n        if (this.canShowRevisions()) {\n            defaultActions.push(\n                {\n                    id: \"revisions\",\n                    type: \"button\",\n                    icon: \"zmdi zmdi-time-restore\",\n                    tooltip: M(\"showRevisions\"),\n                    action: () => {\n                        this.goToRevision()\n                    }\n                }\n            )\n        }\n\n        let form = entities[this.getEntity()].form;\n        let matcher = new ActionsMatcher(defaultActions);\n        return matcher.match(_.isFunction(form.getActions) ? form.getActions(this.state.data)  : form.actions)\n    }\n\n    canShowRevisions() {\n        return this.state && this.state.revisionEnabled && this.state.revisionEnabled === true && this.getEntityId();\n    }\n\n    canSave() {\n        let form = entities[this.getEntity()].form\n        return optional(form.canSave, hasPermission(this.getEntitySavePermissions()))\n    }\n\n    getEntitySavePermissions() {\n        return [this.getEntity() + \":\" + Permission.SAVE]\n    }\n\n    getEntityListPermissions() {\n        return [this.getEntity() + \":\" + Permission.LIST]\n    }\n\n    getPermittedActions() {\n        return _.filter(this.getActions(), a => hasPermission(a.permissions) === true)\n    }\n\n\n    canCancel() {\n        let descriptor = this.getDescriptor()\n        return _.isFunction(descriptor.canCancel) ? descriptor.canCancel(this.state.data) : true\n    }\n\n\n    getTitle() {\n        let form = entities[this.getEntity()].form\n        return optional(form.title, \"Edit\")\n    }\n\n    getSubtitle() {\n        let form = entities[this.getEntity()].form\n        return form.subtitle\n    }\n\n    getDescriptor() {\n        let form = entities[this.getEntity()].form\n        return form.descriptor\n    }\n\n    getFormComponent() {\n        let form = entities[this.getEntity()].form\n        return optional(() => form.component, () => Form)\n    }\n\n    render() {\n        let title = this.getTitle()\n        let subtitle = this.getSubtitle()\n        let actions = this.getActions()\n        let descriptor = this.getDescriptor()\n        let component = this.getFormComponent()\n        let selectedTab = this.props.params.selectedTab;\n\n\n        return (\n            <Layout>\n                <HeaderBlockWithBreadcrumbs title={title} subtitle={subtitle} actions={actions}/>\n                {React.createElement(component, {\n                    ref: \"form\",\n                    descriptor: descriptor,\n                    data: this.state.data,\n                    selectedTab : selectedTab,\n                    onSubmit: this.onSubmit.bind(this),\n                    onCancel: this.onCancel.bind(this)\n                })}\n            </Layout>\n        )\n    }\n}\n\n\n","export const EntitiesGrid = require(\"./entitiesGrid\").default\nexport const EntityForm = require(\"./entityForm\").default\nexport const RevisionGrid = require(\"./revisionsGrid\").default","\"use strict\";\n\nimport {EntitiesStore} from \"../../../stores/entities\";\nimport {connectDiscriminated} from \"../../utils/aj\";\nimport AbstractEntitiesGrid from \"./abstractEntitiesGrid\";\nimport M from \"../../../strings\";\nimport {ActionsMatcher, HeaderBlockWithBreadcrumbs} from \"../../components/common\";\nimport entities from \"../../entities\";\nimport * as ui from \"../../utils/ui\";\n\nexport default class RevisionsGrid extends AbstractEntitiesGrid {\n    constructor(props) {\n        super(props)\n\n\n        this.state.query.eq(\"entity\", props.entity)\n        if (props.entityId) {\n            this.state.query.eq(\"entityId\", props.entityId)\n        }\n\n        this.state.query.sort(\"date\", true)\n\n        this.state.query.on(\"change\", () => {\n            this.onQueryChanged()\n        })\n\n\n        this.discriminator = \"entity_grid_\" + this.getEntity()\n\n        connectDiscriminated(this.discriminator, this, [EntitiesStore])\n\n    }\n\n    generateEntityUrl() {\n        return \"/entities/\" + this.props.entity + \"/\" + this.props.entityId;\n    }\n\n    goBack() {\n        ui.navigate(this.generateEntityUrl())\n    }\n\n\n    hideFilters() {\n        return true;\n    }\n\n    getActions() {\n        let defaultActions = [\n            {\n                id: \"back\",\n                type: \"button\",\n                icon: \"zmdi zmdi-arrow-left\",\n                tooltip: M(\"back\"),\n                action: () => {\n                    this.goBack()\n                }\n            }\n\n        ];\n\n        let grid = entities[this.getEntity()].grid\n        let matcher = new ActionsMatcher(defaultActions)\n        return matcher.match(grid.actions)\n    }\n\n    getEntity() {\n        return \"revision\"\n    }\n\n    canEdit() {\n      return false;\n    }\n\n    canCreate() {\n      return false;\n    }\n\n    canDelete() {\n      return false;\n    }\n\n    generateTitleItems() {\n        let items = [];\n        items.push({title: M(this.props.entity), url : this.generateEntityUrl()});\n        items.push({title: this.getTitle()});\n        return items;\n    }\n\n    generateHeaderBlock() {\n        let subtitle = this.getSubtitle()\n        let title = this.generateTitleItems();\n        let actions = this.getActions()\n\n        return <HeaderBlockWithBreadcrumbs title={title} subtitle={subtitle} actions={actions}/>\n    }\n\n}\n\n","\"use strict\"\n\nconst { Screen, Layout } = require(\"../components/layout\")\nconst Secure = require(\"../components/secure\")\n\nexport default class Home extends Screen {\n    render() {\n        return (\n            <Secure>\n                <Layout>\n                    <div className=\"card\">\n                        Home Screen\n                    </div>\n                </Layout>\n            </Secure>\n        )\n    }\n}\n\n","\"use strict\"\n\nimport {FullScreenLayout, Screen} from \"../components/layout\";\nimport {login} from \"../../actions/session\";\nimport * as forms from \"../utils/forms\";\nimport M from \"../../strings\";\nimport {SessionStore} from \"../../stores/session\";\nimport {connect} from \"../utils/aj\";\n\nexport default class Login extends Screen {\n\n    constructor(props) {\n        super(props)\n\n        connect(this, SessionStore)\n    }\n\n    login() {\n        let data = forms.serialize(this.refs.login_form)\n        login(data)\n    }\n\n    componentDidMount() {\n        const me = ReactDOM.findDOMNode(this)\n        $(me).find(\".form-control\").change(function () {\n            var x = $(this).val();\n\n            if(!x.length == 0) {\n                $(this).addClass(\"form-control--active\");\n            }\n        }).change();\n\n        $(me).on(\"blur input\", \".form-group--float .form-control\", function(){\n            var i = $(this).val();\n\n            if (i.length == 0) {\n                $(this).removeClass(\"form-control--active\");\n            }\n            else {\n                $(this).addClass(\"form-control--active\");\n            }\n        });     \n        \n    }\n\n    componentDidUpdate() {\n        if (this.state.isLoggedIn) {\n            if (location.href.indexOf(\"login\") != -1) {\n                location.href = \"/#/\"\n            }\n        }\n\n        const me = ReactDOM.findDOMNode(this)\n        $(me).find(\".form-control\").change();\n    }\n\n    render() {\n        return (\n            <FullScreenLayout>\n                <div className=\"login\">\n                    <div className=\"login__block active\" id=\"l-login\">\n                        <div className=\"login__block__header\">\n                            <i className=\"zmdi zmdi-account-circle\"></i>\n                            Hi there! Please Sign in\n\n                            <div className=\"actions actions--inverse login__block__actions\">\n                                <div className=\"dropdown\">\n                                    <i data-toggle=\"dropdown\" className=\"zmdi zmdi-more-vert actions__item\"></i>\n\n                                    <div className=\"dropdown-menu dropdown-menu-right\">\n                                        <a className=\"dropdown-item\" href=\"/#/register\">Create an account</a>\n                                        <a className=\"dropdown-item\" href=\"/#/recover\">Forgot password?</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <form action=\"javascript:\" className=\"lcb-form\" onSubmit={this.login.bind(this)} ref=\"login_form\">\n                            <div className=\"login__block__body\">\n                                <div className=\"form-group form-group--float form-group--centered\">\n                                    <input type=\"email\" name=\"mail\" className=\"form-control\" autoComplete=\"username\"/>\n                                    <label>Email Address</label>\n                                    <i className=\"form-group__bar\"></i>\n                                </div>\n\n                                <div className=\"form-group form-group--float form-group--centered\">\n                                    <input type=\"password\" name=\"password\" className=\"form-control\" autoComplete=\"current-password\" />\n                                    <label>Password</label>\n                                    <i className=\"form-group__bar\"></i>\n                                </div>\n\n                                <button type=\"submit\" className=\"btn btn--icon login__block__btn\"><i className=\"zmdi zmdi-long-arrow-right\"></i></button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </FullScreenLayout>\n        )\n    }\n\n}\n\n\n","\"use strict\";\n\nimport {AccountStore} from \"../../stores/account\";\nimport M from \"../../strings\";\nimport {connect} from \"../utils/aj\";\nimport {FullScreenLayout, Screen} from \"../components/layout\";\nimport * as ui from \"../utils/ui\";\nimport {requestRecoveryCode, resetPassword, validateRecoveryCode} from \"../../actions/account\";\nimport * as forms from \"../utils/forms\";\nimport {safeGet} from \"../../utils/lang\";\nimport * as _ from \"underscore\"\nimport {PasswordRecoveryStore} from \"../../stores/passwordRecovery\";\n\nexport default class Recover extends Screen {\n    constructor(props) {\n        super(props);\n        connect(this, [AccountStore, PasswordRecoveryStore]);\n    }\n\n    requestCode(data) {\n        requestRecoveryCode(data);\n    }\n\n    requestNewCode() {\n        let data = {\n            mail: this.state.mail,\n        };\n        this.requestCode(data);\n    }\n\n    validateCode(data) {\n        data.mail = this.state.mail;\n        validateRecoveryCode(data);\n    }\n\n    resetPassword(data) {\n        _.assign(data,{mail: this.state.mail, code: this.state.code});\n        resetPassword(data);\n    }\n\n    componentDidMount() {\n        const me = ReactDOM.findDOMNode(this)\n        $(me).find(\".form-control\").change(function () {\n            var x = $(this).val();\n\n            if(!x.length == 0) {\n                $(this).addClass(\"form-control--active\");\n            }\n        }).change();\n\n        $(me).on(\"blur input\", \".form-group--float .form-control\", function(){\n            var i = $(this).val();\n\n            if (i.length == 0) {\n                $(this).removeClass(\"form-control--active\");\n            }\n            else {\n                $(this).addClass(\"form-control--active\");\n            }\n        });     \n        \n    }\n\n    componentWillUpdate(props, state) {\n        if (state.recovered) {\n            // ui.navigate(\"/\")\n        }\n    }\n\n    getContent(){\n        let recoveryStep = safeGet(this.state,\"recoveryStep\", 1);\n        switch (recoveryStep) {\n            case 1:\n                return <CodeRequestForm\n                    onSubmit = {this.requestCode.bind(this)}\n                />;\n            case 2:\n                return <CodeValidationForm\n                    onSubmit = {this.validateCode.bind(this)}\n                    onTryAgain = {this.requestNewCode.bind(this)}\n                />;\n            case 3:\n                return <PasswordChangeForm\n                    onSubmit = {this.resetPassword.bind(this)}\n                />;\n            case 4:\n                return ui.navigate(\"/\");\n            default:\n                return \"\";\n        }\n    }\n\n    render() {\n\n        let content = this.getContent();\n        return (\n            <FullScreenLayout>\n                <div className=\"login\">\n                    <div class=\"login__block active\" id=\"l-forget-password\">\n                        <div class=\"login__block__header palette-Purple bg\">\n                            <i class=\"zmdi zmdi-account-circle\"></i>\n                            Forgot Password?\n\n                            <div class=\"actions actions--inverse login__block__actions\">\n                                <div class=\"dropdown\">\n                                    <i data-toggle=\"dropdown\" class=\"zmdi zmdi-more-vert actions__item\"></i>\n\n                                    <div class=\"dropdown-menu dropdown-menu-right\">\n                                        <a class=\"dropdown-item\" href=\"/#/login\">Already have an account?</a>\n                                        <a class=\"dropdown-item\" href=\"/#/register\">Create an account</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"login__block__body\">\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </FullScreenLayout>\n        )\n    }\n\n}\n\nclass CodeRequestForm extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onSubmit() {\n        let data = forms.serialize(this.refs.recover_form);\n        if (_.isFunction(this.props.onSubmit)) {\n            this.props.onSubmit(data);\n        }\n    }\n\n    render() {\n        return (\n            <form action=\"javascript:;\" className=\"lcb-form\" onSubmit={this.onSubmit.bind(this)}\n                  ref=\"recover_form\">\n                <p className=\"text-left\">{M(\"accountRecoverText\")}</p>\n\n                <div class=\"form-group form-group--float form-group--centered\">\n                    <input type=\"text\" name=\"mail\" class=\"form-control\" />\n                    <label>Email Address</label>\n                    <i class=\"form-group__bar\"></i>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn--icon login__block__btn\"><i className=\"zmdi zmdi-check\"></i></button>\n            </form>\n        )\n\n    }\n}\n\nclass CodeValidationForm extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    onSubmit() {\n        let data = forms.serialize(this.refs.validate_code_form);\n        if (_.isFunction(this.props.onSubmit)) {\n            this.props.onSubmit(data);\n        }\n    }\n\n    onTryAgain() {\n        if (_.isFunction(this.props.onTryAgain)) {\n            this.props.onTryAgain();\n        }\n    }\n\n    render(){\n        return(\n            <form action=\"javascript:;\" className=\"lcb-form\" onSubmit={this.onSubmit.bind(this)}\n                  ref=\"validate_code_form\">\n                <p className=\"text-left\">{M(\"codeValidationText\")}</p>\n\n               <div class=\"form-group form-group--float form-group--centered\">\n                    <input type=\"text\" name=\"code\" class=\"form-control\" />\n                    <label>Validation code</label>\n                    <i class=\"form-group__bar\"></i>\n                </div>\n\n                <button\n                    type=\"button\"\n                    className = \"btn btn--icon login__block__btn\"\n                    onClick = {this.onTryAgain.bind(this)}\n                >\n                    <i className = \"zmdi zmdi-refresh\"/>\n                    {M(\"requestNew\")}\n                </button>\n\n                <button type=\"submit\" className=\"btn btn--icon login__block__btn\"><i\n                    className=\"zmdi zmdi-check\"></i></button>\n\n\n            </form>\n        )\n    }\n}\n\nclass PasswordChangeForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    onSubmit(){\n        let data = {\n            password: this.state.password,\n            passwordConfirm: this.state.passwordConfirm,\n        };\n        if (_.isFunction(this.props.onSubmit)) {\n            this.props.onSubmit(data);\n        }\n    }\n\n    updatePassword(e){\n        this.setState({password: e.target.value});\n    }\n\n    updatePasswordConfirm(e){\n\n        this.setState({passwordConfirm: e.target.value});\n    }\n\n    render(){\n        return(\n            <form action=\"javascript:;\" className=\"lcb-form\" onSubmit={this.onSubmit.bind(this)}\n                  ref=\"validate_code_form\">\n                <p className=\"text-left\">{M(\"newPasswordText\")}</p>\n\n                <div className=\"input-group m-b-20\">\n                    <span className=\"input-group-addon\"><i className=\"zmdi zmdi-lock\"></i></span>\n                    <div className=\"fg-line\">\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            className=\"form-control\"\n                            placeholder={M(\"password\")}\n                            onChange={this.updatePassword.bind(this)}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"input-group m-b-20\">\n                    <span className=\"input-group-addon\"><i className=\"zmdi zmdi-lock-outline\"></i></span>\n                    <div className=\"fg-line\">\n                        <input\n                            type=\"password\"\n                            name=\"passwordConfirm\"\n                            className=\"form-control\"\n                            placeholder={M(\"passwordConfirm\")}\n                            onChange={this.updatePasswordConfirm.bind(this)}\n                        />\n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-login btn-success btn-float animated fadeInLeft\"><i\n                    className=\"zmdi zmdi-check\"></i></button>\n\n            </form>\n        )\n    }\n}\n\n\n","\"use strict\";\n\nimport {AccountStore} from \"../../stores/account\";\nimport M from \"../../strings\";\nimport {connect} from \"../utils/aj\";\nimport {FullScreenLayout, Screen} from \"../components/layout\";\nimport * as ui from \"../utils/ui\";\nimport {register} from \"../../actions/account\";\nimport * as forms from \"../utils/forms\";\n\nexport default class Register extends Screen {\n    constructor(props) {\n        super(props)\n\n        connect(this, AccountStore)\n    }\n\n    register() {\n        let data = forms.serialize(this.refs.register_form)\n        register(data)\n    }\n\n    componentDidMount() {\n        const me = ReactDOM.findDOMNode(this)\n        $(me).find(\".form-control\").change(function () {\n            var x = $(this).val();\n\n            if(!x.length == 0) {\n                $(this).addClass(\"form-control--active\");\n            }\n        }).change();\n\n        $(me).on(\"blur input\", \".form-group--float .form-control\", function(){\n            var i = $(this).val();\n\n            if (i.length == 0) {\n                $(this).removeClass(\"form-control--active\");\n            }\n            else {\n                $(this).addClass(\"form-control--active\");\n            }\n        });     \n        \n    }\n\n    componentWillUpdate(props, state) {\n        if (state.registered) {\n            ui.navigate(\"/registrationComplete\")\n        }\n    }\n\n    render() {\n        return (\n            <FullScreenLayout>\n                <div className=\"login\">\n                    <div className=\"login__block active\">\n                        <div className=\"login__block__header palette-Blue bg\">\n                            <i className=\"zmdi zmdi-account-circle\"></i>\n                            Create an account\n\n                            <div className=\"actions actions--inverse login__block__actions\">\n                                <div className=\"dropdown\">\n                                    <i data-toggle=\"dropdown\" className=\"zmdi zmdi-more-vert actions__item\"></i>\n\n                                    <div className=\"dropdown-menu dropdown-menu-right\">\n                                        <a className=\"dropdown-item\" href=\"/#/login\">Already have an account?</a>\n                                        <a className=\"dropdown-item\" href=\"/#/recover\">Forgot password?</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <form action=\"javascript:;\" className=\"lcb-form\" onSubmit={this.register.bind(this)} ref=\"register_form\">\n                            <div className=\"login__block__body\">\n                                <div className=\"form-group form-group--float form-group--centered\">\n                                    <input type=\"text\" name=\"name\" className=\"form-control\" />\n                                    <label>Name</label>\n                                    <i className=\"form-group__bar\"></i>\n                                </div>\n\n                                <div className=\"form-group form-group--float form-group--centered\">\n                                    <input type=\"email\" name=\"mail\" className=\"form-control\" />\n                                    <label>Email Address</label>\n                                    <i className=\"form-group__bar\"></i>\n                                </div>\n\n                                <div className=\"form-group form-group--float form-group--centered\">\n                                    <input type=\"password\" name=\"password\" className=\"form-control\" />\n                                    <label>Password</label>\n                                    <i className=\"form-group__bar\"></i>\n                                </div>\n\n                                <div className=\"checkbox\">\n                                    <input type=\"checkbox\" id=\"accept\" />\n                                    <label className=\"checkbox__label\" htmlFor=\"accept\">Accept the license agreement</label>\n                                </div>\n\n                                <button type=\"submit\" className=\"btn btn--icon login__block__btn\"><i className=\"zmdi zmdi-check\"></i></button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </FullScreenLayout>\n        )\n    }\n\n}\n\n","\"use strict\";\n\nimport {AccountStore} from \"../../stores/account\";\nimport M from \"../../strings\";\nimport {connect} from \"../utils/aj\";\nimport {FullScreenLayout, Screen} from \"../components/layout\";\nimport * as ui from \"../utils/ui\";\n\nexport default class RegistrationOk extends Screen {\n\n    constructor(props) {\n        super(props)\n\n        connect(this, AccountStore)\n    }\n\n    goHome() {\n        ui.navigate(\"/\")\n    }\n\n    render() {\n        return (\n            <FullScreenLayout>\n                <div className=\"login-content\">\n                    <div className=\"lc-block toggled\" id=\"l-login\">\n                        <div className=\"text-center m-b-10\"><img src=\"resources/images/logo.png\" /></div>\n\n                        <div className=\"jumbotron p-20\">\n                            <h1>{M(\"congratulations\")}!</h1>\n                            <p>{this.state.message}</p>\n                            <p><a className=\"btn btn-primary btn-lg waves-effect\" href=\"javascript:;\" onClick={this.goHome.bind(this)} role=\"button\">{M(\"continue\")}</a></p>\n                        </div>\n\n                        <div className=\"lcb-navigation\">\n                            <a href=\"#register\" data-ma-block=\"#l-register\"><i className=\"zmdi zmdi-plus\"></i> <span>{M(\"register\")}</span></a>\n                            <a href=\"#recover\" data-ma-block=\"#l-forget-password\"><i>?</i> <span>{M(\"forgotPassword\")}</span></a>\n                        </div>\n                    </div>\n                </div>\n            </FullScreenLayout>\n        )\n    }\n\n}\n\n\n","\"use strict\"\n\nimport {discriminated} from \"../../utils/ajex\";\n\nfunction connectInternal(setState, component, stores, localState) {\n    let singleStore = !_.isArray(stores)\n\n    if (!_.isArray(stores)) {\n        stores = [stores]\n    }\n\n    let originals = {\n        componentDidMount: component.componentDidMount,\n        componentWillUnmount: component.componentWillUnmount\n    }\n\n    if (singleStore) {\n        component.state = singleStore.state || localState\n    }\n\n    component.componentDidMount = function() {\n        _.each(stores, store => {\n            store.subscribe(component, state => setState(component, state))\n            setState(component, store.state || {})\n        })\n\n        if (_.isFunction(originals.componentDidMount)) {\n            originals.componentDidMount.call(component)\n        }\n    }\n\n    component.componentWillUnmount = function() {\n        _.each(stores, store => {\n            store.unsubscribe(component)\n        })\n\n        if (_.isFunction(originals.componentWillUnmount)) {\n            originals.componentWillUnmount.call(component)\n        }\n    }\n}\n\nexport function connect(component, stores, localState = {}) {\n    return connectInternal((component, state) => component.setState(state), component, stores, localState)\n}\n\nexport function connectDiscriminated(discriminator, component, stores, localState = {}) {\n    return connectInternal((component, state) => component.setState(discriminated(state, discriminator)), component, stores, localState)\n}","\"use strict\"\n\nlet EventEmitter = {}\nEventEmitter.addListener = function(obj, evt, handler) {\n    let listeners = obj.__events_listeners;\n    if(!listeners) {\n        listeners = {};\n        obj.__events_listeners = listeners;\n    }\n\n    if(!listeners[evt]) {\n        listeners[evt] = [];\n    }\n\n    listeners[evt].push(handler);\n};\n\nEventEmitter.addListeners = function(obj, listeners) {\n    for(let key in listeners) {\n        events.addListener(obj, key, listeners[key]);\n    }\n};\n\nEventEmitter.removeListener = function(obj, evt, listener) {\n    if (obj.__events_listeners && obj.__events_listeners[evt]) {\n        obj.__events_listeners[evt] = obj.__events_listeners[evt].filter(l => l != listener);\n    }\n};\n\nEventEmitter.on = function(obj, evt, handler) {\n    if($.isPlainObject(evt)) {\n        EventEmitter.addListeners(obj, evt);\n    } else {\n        EventEmitter.addListener(obj, evt, handler);\n    }\n};\n\nEventEmitter.live = function(obj, evt) {\n    if(!obj.__events_offs) obj.__events_offs = {};\n    if(evt) {\n        obj.__events_offs[evt] = false;\n    } else {\n        obj.__events_off = false;\n    }\n};\n\nEventEmitter.die = function(obj, evt) {\n    if(!obj.__events_offs) obj.__events_offs = {};\n    if(evt) {\n        obj.__events_offs[evt] = true;\n    } else {\n        obj.__events_off = true;\n    }\n};\n\nEventEmitter.invoke = function(obj, evt) {\n    if(!obj.__events_offs) obj.__events_offs = {};\n    if(obj.__events_off) return;\n    if(obj.__events_offs[evt]) return;\n\n    let listeners = obj.__events_listeners;\n    if(!listeners) {\n        listeners = {};\n        obj.__events_listeners = listeners;\n    }\n\n    let handlers = listeners[evt];\n    if(handlers) {\n        let size = handlers.length;\n        for (let i = 0; i < size; i++) {\n            let h = handlers[i];\n            h.apply(obj, Array.prototype.slice.call(arguments, 2));\n        }\n    }\n};\n\n\nclass Observable {\n    addListener(evt, handler) {\n        EventEmitter.addListener(this, evt, handler);\n    }\n\n    addListeners(listeners) {\n        EventEmitter.addListeners(this, listeners);\n    }\n\n    removeListener(evt, handler) {\n        EventEmitter.removeListener(evt, handler);\n    }\n\n    on(evt, fn) {\n        EventEmitter.on(this, evt, fn);\n    }\n\n    live(evt) {\n        EventEmitter.live(this, evt);\n    }\n\n    die(evt) {\n        EventEmitter.die(this, evt);\n    }\n\n    invoke(evt) {\n        Array.prototype.splice.call(arguments, 0, 0, this);\n        EventEmitter.invoke.apply(this, arguments);\n    }\n}\n\nexports.EventEmitter = EventEmitter;\nexports.Observable = Observable;\n","\"use strict\"\n\nfunction serialize(form) {\n    var o = {}\n    var a = $(form).serializeArray()\n    $.each(a, function() {\n        if (o[this.name] !== undefined) {\n            if (!o[this.name].push) {\n                o[this.name] = [o[this.name]]\n            }\n            o[this.name].push(this.value || '')\n        } else {\n            o[this.name] = this.value || ''\n        }\n    })\n    return o\n}\n\n\nexports.serialize = serialize\n\n","\"use strict\"\n\nexport function cleanedData(data) {\n    if (_.isEmpty(data)) {\n        return null\n    }\n    let search = \";base64,\"\n    let index = data.indexOf(search)\n    if (index == -1) {\n        return null\n    }\n\n    let startIndex = index + search.length\n    return data.substring(startIndex)\n}\n\nexport function dataUrl(data, format) {\n    return \"data;base64,\" + data\n}\n\nfunction _unchangedData(data) {\n    return data\n}\n\nfunction _readDataInternal(file, cleaner) {\n    return new Promise((resolve, reject) => {\n        try {\n            let reader = new FileReader()\n            reader.onload = (e) => {\n                resolve(cleaner(e.target.result))\n            }\n            reader.readAsDataURL(file)\n        } catch(e) {\n            reject(e)\n        }\n    })\n}\n\nexport function readData(file) {\n    return _readDataInternal(file, cleanedData)\n}\n\nexport function readDataUrl(file) {\n    return _readDataInternal(file, _unchangedData)\n}","\"use strict\"\n\nlet pressedKeys = {}\n\nconst onWindowKeyUp = (e) => {\n    pressedKeys[e.which] = false\n}\n\nconst onWindowKeyDown = (e) => {\n    pressedKeys[e.which] = true\n}\n\nconst onWindowBlur = (e) => {\n    pressedKeys = {}\n}\n\nfunction isMac() {\n    return navigator.platform.indexOf('Mac') > -1\n}\n\nexport function isControl(which) {\n    if (isMac()) {\n        return which == 91 || which == 93\n    } else {\n        return which == 17\n    }\n}\n\nexport function isShift(which) {\n    return which == 16\n}\n\nexport function isUp(which) {\n    return which == 38\n}\n\nexport function isDown(which) {\n    return which == 40\n}\n\nexport function isEnter(which) {\n    return which == 13\n}\n\nexport function isCancel(which) {\n    return which == 46 || which == 8\n}\n\nexport function isEsc(which) {\n    return which == 27\n}\n\nexport function attach() {\n    window.addEventListener(\"keydown\", onWindowKeyDown)\n    window.addEventListener(\"keyup\", onWindowKeyUp)\n    window.addEventListener(\"blur\", onWindowBlur)\n\n    if (DEBUG) {\n        logger.i(\"Keyboard attached to global key events\")\n    }\n}\n\nexport function detach() {\n    window.removeEventListener(\"keydown\", onWindowKeyDown)\n    window.removeEventListener(\"keyup\", onWindowKeyUp)\n    window.removeEventListener(\"blur\", onWindowBlur)\n\n    if (DEBUG) {\n        logger.i(\"Keyboard detached from global key events\")\n    }\n}\n\nexport function isShiftPressed() {\n    return pressedKeys[16]\n}\n\nexport function isControlPressed() {\n    if (isMac()) {\n        return pressedKeys[91] || pressedKeys[93]\n    } else {\n        return pressedKeys[17]\n    }\n}","\"use strict\"\n\nexport function isAndroid() {\n    return navigator.userAgent.match(/Android/i);\n}\n\nexport function isiOS() {\n    return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n}\n\nexport function isOpera() {\n    return navigator.userAgent.match(/Opera Mini/i);\n}\n\nexport function isBlackBerry() {\n    return navigator.userAgent.match(/BlackBerry/i);\n}\n\nexport function isWindows() {\n    return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);\n}\n\nexport function isMobile() {\n    return (isAndroid() || isBlackBerry() || isiOS() || isOpera() || isWindows());\n}","\"use strict\";\n\nimport M from \"../../strings\";\nimport {Observable} from \"./events\";\nimport {isControlPressed, isShiftPressed} from \"./keyboard\";\n\n\nlet router = new RouteRecognizer();\nlet base = null;\nlet lastFragment = null;\nlet veryLastFragment = null;\nlet screens = new Observable();\nlet beforeChangeListeners = [];\nlet routerDisabledNextTime = false;\nlet changeScreenConfirmEnabled = true\n\n\nexport function getUrlParameter(sParam) {\n\tlet queryStringIndex = window.location.href.indexOf(\"?\")\n\tif (queryStringIndex == -1) {\n\t\treturn null\n\t}\n    var sPageURL = decodeURIComponent(window.location.href.substring(queryStringIndex + 1)),\n        sURLVariables = sPageURL.split('&'),\n        sParameterName,\n        i;\n\n    for (i = 0; i < sURLVariables.length; i++) {\n        sParameterName = sURLVariables[i].split('=');\n\n        if (sParameterName[0] === sParam) {\n            return sParameterName[1] === undefined ? true : sParameterName[1];\n        }\n    }\n};\n\nfunction _handleRoute(fragment) {\n\tlet route = router.recognize(fragment);\n\tif (route) {\n\t\tlet params = _.extend(route[0].params, route.queryParams || {});\n\t\troute[0].handler(params);\n\t}\n}\n\nfunction _clearSlashes(path) {\n\treturn path.toString().replace(/\\/$/, '').replace(/^\\//, '');\n}\n\nexports.addRoute = function(path, handler) {\n\trouter.add([{path: path, handler: handler}]);\n};\n\nexports.startNavigation = function(_base) {\n\tbase = _base || \"#\";\n\n\tlet loop = () => {\n\t\tlet fragment = \"/\";\n\t\tif (location.href.indexOf(\"#\") !== -1) {\n\t\t\tfragment = _clearSlashes(location.href.split(\"#\")[1]);\n\t\t}\n\n\t\tif (lastFragment !== fragment) {\n\t\t\tveryLastFragment = lastFragment\n\t\t\tlastFragment = fragment;\n\n\t\t\tif (!routerDisabledNextTime) {\n\t\t\t\t_handleRoute(fragment);\n\t\t\t}\n\n\t\t\trouterDisabledNextTime = false\n\t\t}\n\n\t\twindow.setTimeout(loop, 100);\n\t};\n\n\tloop();\n};\n\nexports.addQueryParam = function(param, value) {\n    updateQueryStringParam(param, value)\n};\n\nfunction updateQueryStringParam (key, value) {\n\n    let base = \t[location.protocol, '//', location.host, location.pathname].join(\"\");\n    if (location.href.indexOf(\"#\") !== -1) {\n        base = base + \"#/\" + _clearSlashes(location.href.split(\"#\")[1].split(\"?\")[0]);\n\n    }\n    let urlQueryString = location.href.split(\"?\")[1];\n\n    let newParams = key + '=' + value;\n    // If the \"search\" string exists, then build params from it\n    if (urlQueryString) {\n        urlQueryString.split(\"&\").forEach(function(e, i) {\n            if (e.split(\"=\")[0] != key) {\n                newParams = newParams + \"&\" + e;\n            }\n        })\n    }\n    base = base + \"?\" + newParams;\n\n    history.replaceState({}, \"\", base);\n}\n\n\n\nexports.navigate = function(path, openInNewTab = false) {\n\tif (isShiftPressed()) {\n\t\twindow.open(_clearSlashes(base + path)).focus()\t\t\t\n\t} else if (isControlPressed() || openInNewTab) {\n\t\t$(\"<a>\")\n\t\t\t.attr(\"href\", _clearSlashes(base + path))\n\t\t\t.attr(\"target\", \"_blank\")\n\t\t\t.get(0)\n\t\t\t.click()\n\t} else {\n\t\thistory.pushState(null, null, _clearSlashes(base + path))\n        $(\"html, body\").animate({ scrollTop: 0 }, \"slow\");\n\n    }\n};\n\nexports.enableChangeScreenConfirm = function() {\n\tchangeScreenConfirmEnabled = true\n}\n\nexports.disableChangeScreenConfirm = function() {\n\tchangeScreenConfirmEnabled = false\n}\n\nexports.changeScreen = function(screen) {\n\tfor (let i = 0; i < beforeChangeListeners.length; i++) {\n\t\tlet listener = beforeChangeListeners[i]\n\t\tif (_.isFunction(listener)) {\n\t\t\tlet out = listener()\n\n\t\t\tif (changeScreenConfirmEnabled) {\n\t\t\t\tif (out) {\n\t\t\t\t\tswal({title: M(\"confirm\"), text: M(\"formChangeAlert\"), showCancelButton: true})\n\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\tif (res.value) {\n\t\t\t\t\t\t\t\tscreens.invoke(\"screen.change\", screen);\t\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (!_.isEmpty(veryLastFragment)) {\n\t\t\t\t\t\t\t\t\trouterDisabledNextTime = true\n\t\t\t\t\t\t\t\t\twindow.location.href = \"#\" + veryLastFragment\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscreens.invoke(\"screen.change\", screen);\n\t\t\t}\n\t\t}\n\t}\t\n\n\tscreens.invoke(\"screen.change\", screen);\n};\n\nexports.addScreenChangeListener = function(listener) {\n\tscreens.addListener(\"screen.change\", listener);\n};\n\nexports.removeScreenChangeListener = function(listener) {\n\tscreens.removeListener(\"screen.change\", listener);\n};\n\nexports.addOnBeforeChangeListener = function(listener) {\n\tbeforeChangeListeners.push(listener)\n}\n\nexports.removeOnBeforeChangeListener = function(listener) {\n\tbeforeChangeListeners = _.filter(beforeChangeListeners, l => l !== listener)\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}